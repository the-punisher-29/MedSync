[{"/Users/arman_gupta/Documents/GitHub/MedSync/src/index.js":"1","/Users/arman_gupta/Documents/GitHub/MedSync/src/App.js":"2","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ContactScreen.js":"3","/Users/arman_gupta/Documents/GitHub/MedSync/src/contexts/OrderProvider.js":"4","/Users/arman_gupta/Documents/GitHub/MedSync/src/routes/PublicRoute.js":"5","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/OrderScreen.js":"6","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ProductsScreen.js":"7","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ServicesDetailScreen.js":"8","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ProductDetailScreen.js":"9","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/SignInScreen.js":"10","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ErrorScreen.js":"11","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/HomeScreen.js":"12","/Users/arman_gupta/Documents/GitHub/MedSync/src/contexts/AuthProvider.js":"13","/Users/arman_gupta/Documents/GitHub/MedSync/src/routes/PrivateRoute.js":"14","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/SignUpScreen.js":"15","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/profilepage.js":"16","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/adminpage.js":"17","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/Navbar.js":"18","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Footer/Footer.js":"19","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Heading.js":"20","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Brand.js":"21","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useOrder.js":"22","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/AuthorizeUser.js":"23","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Contact/ContactForm.js":"24","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useAuth.js":"25","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useFirebase.js":"26","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/NavBrand.js":"27","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Order/OrderCard.js":"28","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/AuthorizeUserMobile.js":"29","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/TextField.js":"30","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/GoogleSignIn.js":"31","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/Button.js":"32","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/products/Product.js":"33","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useFetch.js":"34","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Services/Services.js":"35","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Header/Banner.js":"36","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Testimonial/Testimonials.js":"37","/Users/arman_gupta/Documents/GitHub/MedSync/src/config/firebase.js":"38","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Services/Service.js":"39","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Testimonial/Testimonial.js":"40","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/OrdersPage.js":"41"},{"size":259,"mtime":1731230402215,"results":"42","hashOfConfig":"43"},{"size":2292,"mtime":1731246622992,"results":"44","hashOfConfig":"43"},{"size":983,"mtime":1731230402216,"results":"45","hashOfConfig":"43"},{"size":1389,"mtime":1731230402214,"results":"46","hashOfConfig":"43"},{"size":1076,"mtime":1731230402216,"results":"47","hashOfConfig":"43"},{"size":9649,"mtime":1731240008319,"results":"48","hashOfConfig":"43"},{"size":5899,"mtime":1731230402218,"results":"49","hashOfConfig":"43"},{"size":1631,"mtime":1731230402218,"results":"50","hashOfConfig":"43"},{"size":4557,"mtime":1731230402217,"results":"51","hashOfConfig":"43"},{"size":5793,"mtime":1731230402218,"results":"52","hashOfConfig":"43"},{"size":692,"mtime":1731230402217,"results":"53","hashOfConfig":"43"},{"size":413,"mtime":1731230402217,"results":"54","hashOfConfig":"43"},{"size":394,"mtime":1731230402214,"results":"55","hashOfConfig":"43"},{"size":1395,"mtime":1731230402216,"results":"56","hashOfConfig":"43"},{"size":3053,"mtime":1731230402218,"results":"57","hashOfConfig":"43"},{"size":9103,"mtime":1731230402219,"results":"58","hashOfConfig":"43"},{"size":12478,"mtime":1731230402219,"results":"59","hashOfConfig":"43"},{"size":3588,"mtime":1731246634381,"results":"60","hashOfConfig":"43"},{"size":3204,"mtime":1731230402208,"results":"61","hashOfConfig":"43"},{"size":534,"mtime":1731230402210,"results":"62","hashOfConfig":"43"},{"size":354,"mtime":1731230402207,"results":"63","hashOfConfig":"43"},{"size":185,"mtime":1731230402215,"results":"64","hashOfConfig":"43"},{"size":2962,"mtime":1731233688064,"results":"65","hashOfConfig":"43"},{"size":5525,"mtime":1731230402207,"results":"66","hashOfConfig":"43"},{"size":176,"mtime":1731236735726,"results":"67","hashOfConfig":"43"},{"size":6572,"mtime":1731239317163,"results":"68","hashOfConfig":"43"},{"size":365,"mtime":1731230402211,"results":"69","hashOfConfig":"43"},{"size":3023,"mtime":1731230402212,"results":"70","hashOfConfig":"43"},{"size":2039,"mtime":1731230402211,"results":"71","hashOfConfig":"43"},{"size":254,"mtime":1731230402208,"results":"72","hashOfConfig":"43"},{"size":776,"mtime":1731230402208,"results":"73","hashOfConfig":"43"},{"size":186,"mtime":1731230402208,"results":"74","hashOfConfig":"43"},{"size":2787,"mtime":1731230402213,"results":"75","hashOfConfig":"43"},{"size":1772,"mtime":1731235103292,"results":"76","hashOfConfig":"43"},{"size":1785,"mtime":1731230402212,"results":"77","hashOfConfig":"43"},{"size":2874,"mtime":1731230402209,"results":"78","hashOfConfig":"43"},{"size":2231,"mtime":1731235446496,"results":"79","hashOfConfig":"43"},{"size":982,"mtime":1731230402214,"results":"80","hashOfConfig":"43"},{"size":799,"mtime":1731230402212,"results":"81","hashOfConfig":"43"},{"size":1626,"mtime":1731235280272,"results":"82","hashOfConfig":"43"},{"size":6540,"mtime":1731248399932,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"upz90o",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/arman_gupta/Documents/GitHub/MedSync/src/index.js",[],["175","176"],"/Users/arman_gupta/Documents/GitHub/MedSync/src/App.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ContactScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/contexts/OrderProvider.js",["177"],"import React, { createContext, useContext, useState } from 'react';\n\nexport const OrderContext = createContext();\n\nexport const OrderProvider = ({ children }) => {\n    const [orders, setOrders] = useState([]);\n\n    // Function to add product to the cart\n    const handleCart = (product) => {\n        const existingProduct = orders.find((item) => item.id === product.id);\n        if (existingProduct) {\n            // Increment quantity if product already in cart\n            updateProductQuantity(product.id, existingProduct.quantity + 1);\n        } else {\n            // Add product with quantity 1 if not in cart\n            setOrders([...orders, { ...product, quantity: 1 }]);\n        }\n    };\n\n    // Function to update product quantity\n    const updateProductQuantity = (productId, newQuantity) => {\n        setOrders((prevOrders) =>\n            prevOrders.map((item) =>\n                item.id === productId ? { ...item, quantity: newQuantity } : item\n            )\n        );\n    };\n\n    // Function to remove a product from the cart\n    const removeProduct = (productId) => {\n        setOrders((prevOrders) => prevOrders.filter((item) => item.id !== productId));\n    };\n\n    return (\n        <OrderContext.Provider value={{ orders, handleCart, updateProductQuantity, removeProduct }}>\n            {children}\n        </OrderContext.Provider>\n    );\n};\n\nexport default OrderProvider\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/routes/PublicRoute.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/OrderScreen.js",["178","179"],"import React, { useState, useEffect } from 'react';\nimport Bounce from 'react-reveal/Bounce';\nimport OrderCard from '../components/Order/OrderCard';\nimport useOrder from '../hooks/useOrder';\nimport { addDoc, collection, doc, updateDoc, arrayUnion, setDoc } from 'firebase/firestore';\nimport  useAuth from '../hooks/useAuth';\nimport { getFirestore } from 'firebase/firestore';\nimport { useHistory } from 'react-router-dom'; // Import for redirection\nimport swal from 'sweetalert'; \n\nconst OrderScreen = () => {\n    const { orders } = useOrder();\n    const [deliveryTiming, setDeliveryTiming] = useState('one-time');\n    const [deliveryTimeRange, setDeliveryTimeRange] = useState('None');\n    const [recurringOption, setRecurringOption] = useState('None');\n    const [paymentType, setPaymentType] = useState('cash');\n    const [totalPrice, setTotalPrice] = useState(0); // State for total price\n    const gstRate = 0.05; // 5% GST\n    const { user } = useAuth(); // Get the current user from AuthContext\n    const db = getFirestore();\n    const history = useHistory();\n\n    // Calculate total price based on orders and their quantities\n    useEffect(() => {\n        const price = orders.reduce((acc, order) => {\n            return acc + (order.price * order.quantity); // Use quantity from order\n        }, 0);\n        setTotalPrice(price + price * gstRate); // Total price including GST\n    }, [orders]);\n\n    // Function to handle form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const orderDetails = {\n            user_id: user.uid,  // Get current user UID from AuthContext\n            items: orders.map(item => ({\n                product_id: item.id,\n                name: item.title,\n                quantity: item.quantity,\n                price_per_unit: item.price,\n                total_price: item.price * item.quantity\n            })),\n            total_price: totalPrice || 0,  // Make sure total_price is a valid number (default 0)\n            gst: totalPrice * gstRate || 0,  // Ensure gst is valid\n            delivery_timing: deliveryTiming || 'None',  // Set default value if empty\n            delivery_time_range: deliveryTimeRange || 'None',  // Set default value if empty\n            recurring_option: recurringOption || 'None',  // Set default value if empty\n            payment_type: paymentType || 'None',  // Set default value if empty\n            timestamp: new Date(),\n            status: 'pending'\n        };\n\n     // Log the orderDetails to check for undefined values\n    console.log(\"Order Details:\", orderDetails);\n\n    // Check if any field is undefined and log it\n    Object.keys(orderDetails).forEach(key => {\n        if (orderDetails[key] === undefined) {\n            console.error(`Field ${key} is undefined`);\n        }\n    });\n\n    try {\n        // Generate a unique order_id (can be based on timestamp or any other unique identifier)\n        const order_id = `order_${new Date().getTime()}`;  // Generate unique order_id (timestamp-based)\n\n        // Create a reference to the document with the order_id\n        const orderRef = doc(db, 'orders', order_id);  // Use the order_id as the document ID\n\n        // Add the order details to that document\n        await setDoc(orderRef, orderDetails);\n\n        // Add the order_id to the user's orders array in the users collection\n        const userRef = doc(db, 'user_profile', user.uid);\n        await updateDoc(userRef, {\n            orders: arrayUnion(order_id)  // Add order_id to the orders array\n        });\n\n        console.log(\"Order placed successfully with order_id:\", order_id);\n\n        // Show success message using SweetAlert\n        swal(\"Order Placed!\", \"Your order has been placed successfully!\", \"success\")\n\n        history.push('/'); \n\n    } catch (error) {\n        console.error(\"Error placing order:\", error);\n    }\n    };\n\n    // Check if the form is complete (i.e., \"Place Order\" button should be enabled)\n    const isFormValid = deliveryTiming !== 'None' && deliveryTimeRange !== 'None' && paymentType !== 'None';\n\n    return (\n        <section className=\"max-w-screen-xl py-24 mx-auto px-6\">\n            {orders.length === 0 ? (\n                <div className=\"h-screen\">\n                    <h1 className=\"text-3xl poppins text-center text-blue-600\">Cart is Empty!</h1>\n                </div>\n            ) : (\n                <>\n                    {/* Heading */}\n                    <Bounce left>\n                        <div className=\"flex flex-col items-center space-x-2 pb-8\">\n                            <h1 className=\"text-gray-700 poppins text-3xl\">All <span className=\"text-blue-600 font-semibold select-none\">Orders</span></h1>\n                            <div className=\"bg-blue-600 flex items-center justify-center w-16 h-1 mt-2 rounded-full\"></div>\n                        </div>\n                    </Bounce>\n                    <div className=\"flex justify-center\">\n                        <div className=\"flex flex-col space-y-4\">\n                            {orders.map(item => (\n                                <OrderCard key={item.id} {...item} />\n                            ))}\n                        </div>\n                    </div>\n\n                    {/* Form for Delivery Details */}\n                    <div className=\"mt-12\">\n                        <h2 className=\"text-2xl font-semibold mb-4\">Delivery Details</h2>\n                        <form onSubmit={handleSubmit} className=\"flex flex-col space-y-4\">\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700\">Delivery Timing</label>\n                                <select \n                                    value={deliveryTiming}\n                                    onChange={(e) => setDeliveryTiming(e.target.value)}\n                                    className=\"mt-1 block w-full border-gray-300 rounded-md\"\n                                >\n                                    <option value=\"None\">Select Timing</option>\n                                    <option value=\"one-time\">One Time</option>\n                                    <option value=\"recurring\">Recurring</option>\n                                </select>\n                            </div>\n\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700\">Delivery Time Range</label>\n                                <select \n                                    value={deliveryTimeRange}\n                                    onChange={(e) => setDeliveryTimeRange(e.target.value)}\n                                    className=\"mt-1 block w-full border-gray-300 rounded-md\"\n                                >\n                                    <option value=\"None\">Select Time Range</option>\n                                    <option value=\"morning\">Morning</option>\n                                    <option value=\"afternoon\">Afternoon</option>\n                                    <option value=\"evening\">Evening</option>\n                                </select>\n                            </div>\n\n                            {deliveryTiming === 'recurring' && (\n                                <div>\n                                    <label className=\"block text-sm font-medium text-gray-700\">Repeat This Order</label>\n                                    <select \n                                        value={recurringOption}\n                                        onChange={(e) => setRecurringOption(e.target.value)}\n                                        className=\"mt-1 block w-full border-gray-300 rounded-md\"\n                                    >\n                                        <option value=\"None\">Select Option</option>\n                                        <option value=\"monthly\">Every Month</option>\n                                        <option value=\"bi-monthly\">Every Two Months</option>\n                                    </select>\n                                </div>\n                            )}\n\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700\">Payment Type</label>\n                                <select \n                                    value={paymentType}\n                                    onChange={(e) => setPaymentType(e.target.value)}\n                                    className=\"mt-1 block w-full border-gray-300 rounded-md\"\n                                >\n                                    <option value=\"None\">Select Payment</option>\n                                    <option value=\"cash\">Cash</option>\n                                    <option value=\"upi\">UPI</option>\n                                </select>\n                            </div>\n\n                            <div className=\"mt-4\">\n                                <h3 className=\"text-lg font-semibold\">Total Price (including GST): ₹{totalPrice.toFixed(2)}</h3>\n                            </div>\n\n                            <button \n                                type=\"submit\"\n                                className={`mt-4 bg-blue-600 text-white py-2 px-4 rounded-md ${!isFormValid ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                disabled={!isFormValid}  // Disable button if form is not valid\n                            >\n                                Place Order\n                            </button>\n                        </form>\n                    </div>\n                </>\n            )}\n        </section>\n    );\n};\n\nexport default OrderScreen;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ProductsScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ServicesDetailScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ProductDetailScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/SignInScreen.js",["180"],"import React, { useState } from 'react';\nimport Bounce from 'react-reveal/Bounce';\nimport { Link, useHistory } from 'react-router-dom';\nimport Brand from '../components/Brand';\nimport Button from '../components/Form/Button';\nimport GoogleSignIn from '../components/Form/GoogleSignIn';\nimport TextField from '../components/Form/TextField';\nimport useAuth from '../hooks/useAuth';\n\nconst SignInScreen = () => {\n    const [userInput, setUserInput] = useState({\n        email: '',\n        password: '',\n    });\n    const [isAdmin, setIsAdmin] = useState(false); // Toggle for user/admin tab\n    const { signInUser, signInWithGoogle } = useAuth();\n    const history = useHistory();\n\n    const allowedAdminEmails = ['b22es006@iitj.ac.in', 'b22cs101@iitj.ac.in', 'b22cs014@iitj.ac.in'];\n\n    // Handle form input changes\n    const handleChange = (e) => {\n        const { value, name } = e.target;\n        setUserInput((prev) => ({ ...prev, [name]: value }));\n    };\n\n    // Handle regular user form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const result = await signInUser(userInput.email, userInput.password);\n\n        // Redirect based on user type\n        if (allowedAdminEmails.includes(userInput.email)) {\n            history.replace('/admin'); // Use replace to avoid back navigation to root\n        } else {\n            history.push('/'); // Redirect regular user to dashboard\n        }\n    };\n\n// Handle Google Sign-In with immediate admin check\nconst handleGoogleSignIn = async () => {\n    try {\n        const result = await signInWithGoogle();  // Assuming this returns a result object\n        const user = result.user;\n\n        console.log(\"Signed in user:\", user); // Log user info for debugging\n\n        // Check if user is an admin and navigate accordingly\n        if (allowedAdminEmails.includes(user.email)) {\n            history.replace('/admin'); // Directly redirect to admin page if email is allowed\n        } else {\n            history.push('/'); // Redirect to user dashboard if not admin\n        }\n    } catch (error) {\n        console.error(\"Google sign-in failed:\", error);\n    }\n};\n\n    // Form inputs configuration\n    const Inputs = [\n        { id: 1, type: \"email\", placeholder: \"Email\", value: userInput.email, name: 'email' },\n        { id: 2, type: \"password\", placeholder: \"Password\", value: userInput.password, name: 'password' },\n    ];\n\n    return (\n        <main className=\"h-screen w-full banner\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10\">\n                {/* Image Section */}\n                <Bounce left>\n                    <div className=\"hidden md:flex lg:flex flex-col justify-center items-center w-full h-screen\">\n                        <img className=\"w-4/4 mx-auto\" src=\"../../assets/signin.png\" alt=\"signin\" />\n                    </div>\n                </Bounce>\n\n                {/* Form Section */}\n                <Bounce right>\n                    <div className=\"flex flex-col justify-center items-center h-screen\">\n                        {/* Logo */}\n                        <Brand />\n\n                        {/* Tabs for User and Admin Login */}\n                        <div className=\"flex space-x-6 mt-4\">\n                            <button \n                                onClick={() => setIsAdmin(false)} \n                                className={`px-4 py-2 ${!isAdmin ? \"bg-blue-500 text-white\" : \"text-blue-500\"}`}>\n                                User Login\n                            </button>\n                            <button \n                                onClick={() => setIsAdmin(true)} \n                                className={`px-4 py-2 ${isAdmin ? \"bg-blue-500 text-white\" : \"text-blue-500\"}`}>\n                                Admin Login\n                            </button>\n                        </div>\n\n                        {/* Form */}\n                        <form className=\"bg-white w-3/5 mt-6 p-4 rounded-lg shadow-lg\" onSubmit={handleSubmit}>\n                            {!isAdmin ? (\n                                // Regular User Login Form\n                                <div className=\"flex flex-col space-y-6\">\n                                    {Inputs.map((input) => (\n                                        <TextField\n                                            key={input.id}\n                                            type={input.type}\n                                            placeholder={input.placeholder}\n                                            value={input.value}\n                                            name={input.name}\n                                            onChange={handleChange}\n                                        />\n                                    ))}\n                                </div>\n                            ) : (\n                                // Admin Login with Google only\n                                <p className=\"text-gray-600 text-center mt-4\">Use Sign In with Google for Admin Access</p>\n                            )}\n                            {!isAdmin && <Button text=\"Sign In\" />}\n                            <Link to=\"/signup\">\n                                <p className=\"text-base text-primary text-center my-6 hover:underline\">\n                                    First Time? Create Account Here.\n                                </p>\n                            </Link>\n\n                            {/* Google Sign-In Button */}\n                            <GoogleSignIn text={isAdmin ? \"Sign In as Admin\" : \"Sign In With Google\"} onClick={handleGoogleSignIn} />\n                        </form>\n                    </div>\n                </Bounce>\n            </div>\n        </main>\n    );\n};\n\nexport default SignInScreen;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ErrorScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/HomeScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/contexts/AuthProvider.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/routes/PrivateRoute.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/SignUpScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/profilepage.js",["181"],"import React, { useState, useEffect } from 'react';\nimport { getFirestore, doc, addDoc, setDoc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n\nimport { getAuth, updateProfile } from 'firebase/auth';\nimport useAuth from '../hooks/useAuth';\n\nconst ProfilePage = () => {\n    const { user, setUser } = useAuth();\n    const db = getFirestore();\n    const storage = getStorage();\n    const auth = getAuth();\n    \n    const [profileData, setProfileData] = useState({\n        phone: '',\n        bloodGroup: '',\n        rollOrEmpId: '',\n        age: '',\n        medicalBio: '',\n        serviceReview: '',  // Review text\n        rating: 1,  // Rating value (1 to 5 stars)\n    });\n    const [profilePic, setProfilePic] = useState(user.photoURL || \"https://cdn-icons-png.flaticon.com/512/236/236832.png\");\n    const [imageFile, setImageFile] = useState(null);\n\n    useEffect(() => {\n        const fetchProfileData = async () => {\n            if (user) {\n                const userDoc = doc(db, \"user_profile\", user.uid);\n                const docSnap = await getDoc(userDoc);\n                if (docSnap.exists()) {\n                    setProfileData(docSnap.data());\n                }\n            }\n        };\n        fetchProfileData();\n    }, [user, db]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setProfileData(prev => ({ ...prev, [name]: value }));\n    };\n\n    const handleImageChange = (e) => {\n        if (e.target.files[0]) {\n            setImageFile(e.target.files[0]);\n        }\n    };\n\n    const handleSave = async (e) => {\n        e.preventDefault();\n        if (user) {\n            let imageUrl = profilePic;\n    \n            // Upload the image to Firebase Storage if a new image is selected\n            if (imageFile) {\n                const storageRef = ref(storage, `profile_pictures/${user.uid}`);\n                await uploadBytes(storageRef, imageFile);\n                imageUrl = await getDownloadURL(storageRef);\n    \n                // Update the profile picture in Firebase Auth\n                await updateProfile(auth.currentUser, { photoURL: imageUrl });\n                setProfilePic(imageUrl); // Update local profile picture display\n            }\n    \n            // Save profile data to Firestore\n            const userDoc = doc(db, \"user_profile\", user.uid);\n            await setDoc(userDoc, {\n                name: user.displayName,\n                email: user.email,\n                photoURL: imageUrl,\n                ...profileData // Including the service review and rating\n            });\n    \n            // Check if a review document exists for the user\n            const reviewsQuery = query(collection(db, \"reviews\"), where(\"username\", \"==\", user.displayName));\n            const querySnapshot = await getDocs(reviewsQuery);\n\n            if (!querySnapshot.empty) {\n                // If a review exists, overwrite it using setDoc\n                const reviewDoc = doc(db, \"reviews\", querySnapshot.docs[0].id); // Get the first document (user's review)\n                await setDoc(reviewDoc, {\n                    username: user.displayName,\n                    image: imageUrl,\n                    review: profileData.serviceReview,\n                    rating: profileData.rating,\n                });\n            } else {\n                // If no review exists, create a new one\n                const reviewsRef = collection(db, \"reviews\");\n                await addDoc(reviewsRef, {\n                    username: user.displayName,\n                    image: imageUrl,\n                    review: profileData.serviceReview,\n                    rating: profileData.rating,\n                });\n            }\n\n            alert(\"Profile updated and review submitted successfully\");\n        }\n    };\n\n    return (\n        <div className=\"profile-page container mx-auto p-4 mt-20\">\n            <header className=\"flex justify-between items-start mb-6\">\n                <h1 className=\"text-3xl font-bold\">Profile</h1>\n                <div>\n                    <img\n                        src={profilePic}\n                        alt=\"Profile\"\n                        className=\"w-40 h-40 rounded-full border mb-2\"\n                    />\n                </div>\n            </header>\n            \n            <form onSubmit={handleSave} className=\"bg-white p-6 rounded-lg shadow-lg\">\n                <div className=\"grid grid-cols-1 gap-4 mb-6\">\n                    <div>\n                        <label className=\"font-semibold\">Name:</label>\n                        <p>{user.displayName}</p>\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Email:</label>\n                        <p>{user.email}</p>\n                    </div>\n                    {/* Profile Picture Upload Box - Moved below Email */}\n                    <div>\n                        <label className=\"font-semibold\">Upload Profile Picture:</label>\n                        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} className=\"w-full p-2 border rounded mt-2\" />\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Phone Number:</label>\n                        <input \n                            type=\"tel\"\n                            name=\"phone\"\n                            value={profileData.phone}\n                            onChange={handleChange}\n                            maxLength=\"10\"\n                            pattern=\"\\d*\" // Ensures only digits are allowed\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n\n                    <div>\n                        <label className=\"font-semibold\">Blood Group:</label>\n                        <input \n                            type=\"text\"\n                            name=\"bloodGroup\"\n                            value={profileData.bloodGroup}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Roll No/Emp ID:</label>\n                        <input \n                            type=\"text\"\n                            name=\"rollOrEmpId\"\n                            value={profileData.rollOrEmpId}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Age:</label>\n                        <input \n                            type=\"number\"\n                            name=\"age\"\n                            value={profileData.age}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Medical Bio:</label>\n                        <textarea \n                            name=\"medicalBio\"\n                            value={profileData.medicalBio}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n\n                    {/* Service Review Section */}\n                    <div>\n                        <label className=\"font-semibold\">Service Review:</label>\n                        <textarea \n                            name=\"serviceReview\"\n                            value={profileData.serviceReview}\n                            onChange={handleChange}\n                            placeholder=\"Write your review here...\"\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n\n                    {/* Rating Section */}\n                    <div>\n                        <label className=\"font-semibold\">Rating (1-5):</label>\n                        <input\n                            type=\"number\"\n                            name=\"rating\"\n                            min=\"1\"\n                            max=\"5\"\n                            value={profileData.rating}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n                </div>\n                \n                <div className=\"text-center\">\n                    <button \n                        type=\"submit\"\n                        className=\"bg-blue-500 text-white py-2 px-6 rounded-lg font-semibold hover:bg-blue-600\"\n                    >\n                        Update Profile\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default ProfilePage;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/adminpage.js",["182","183"],"import React, { useState, useEffect } from 'react';\nimport useFirebase from '../hooks/useFirebase';\nimport './admin.css';\n\nconst Admin = () => {\n    const { user, isLoading, getMedicines, getOrders, getSuppliers, getSales, getMessages } = useFirebase();\n    const [medicines, setMedicines] = useState([]);\n    const [orders, setOrders] = useState([]);\n    const [suppliers, setSuppliers] = useState([]);\n    const [sales, setSales] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const [selectedTab, setSelectedTab] = useState(\"Order Status\");\n\n    useEffect(() => {\n        if (user) {\n            fetchData();\n        }\n    }, [user]);\n\n    const fetchData = async () => {\n        setMedicines(await getMedicines());\n        setOrders(await getOrders());\n        setSuppliers(await getSuppliers());\n        setSales(await getSales());\n        setMessages(await getMessages());  // Fetch messages for the new tab\n    };\n\n    const handleOrderStatusUpdate = (orderId, newStatus) => {\n        console.log(`Updating order ${orderId} to ${newStatus}`);\n    };\n\n    const handleQuantityUpdate = (id, newQuantity) => {\n        console.log(`Updating medicine ${id} to quantity ${newQuantity}`);\n    };\n\n    const handleResponseSubmit = (messageId, response) => {\n        console.log(`Response to message ${messageId}: ${response}`);\n        // You can add further code here to send this response to the backend\n    };\n\n    return (\n        <section className=\"admin-section px-8 py-12\">\n            <h1 className=\"text-3xl font-bold text-gray-700 mb-8 mt-10\">Admin Dashboard</h1>\n\n            {/* Expiring Soon Section */}\n            <section className=\"mb-12\">\n                <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">Expiring Soon</h2>\n                <table className=\"table-auto w-full text-left border-collapse\">\n                    <thead>\n                        <tr>\n                            <th className=\"px-4 py-2 border\">Medicine</th>\n                            <th className=\"px-4 py-2 border\">Expiration Date</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {medicines.slice(0, 5).map(med => (\n                            <tr key={med.id}>\n                                <td className=\"px-4 py-2 border\">{med.name}</td>\n                                <td className=\"px-4 py-2 border\">{med.expirationDate}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </section>\n\n            {/* Quantity Graph - Simple Bar Chart */}\n            <section className=\"mb-12\">\n                <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">Medicine Quantity Graph</h2>\n                <div className=\"bar-chart-container\">\n                    {medicines.map((med) => (\n                        <div key={med.id} className=\"bar-chart\">\n                            <div className=\"bar\" style={{ height: `${med.quantity * 10}px` }}></div>\n                            <span className=\"label\">{med.name}</span>\n                        </div>\n                    ))}\n                </div>\n            </section>\n\n\n            {/* Tabs for Admin Sections */}\n            <div className=\"flex space-x-4 mb-8\">\n                {[\"Order Status\", \"Suppliers\", \"Sales History\", \"Product Management\", \"Responses to Messages\"].map((tab) => (\n                    <button\n                        key={tab}\n                        className={`px-4 py-2 rounded ${selectedTab === tab ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n                        onClick={() => setSelectedTab(tab)}\n                    >\n                        {tab}\n                    </button>\n                ))}\n            </div>\n\n            {selectedTab === \"Order Status\" && (\n                <section>\n                    <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">Order Status</h2>\n                    <table className=\"table-auto w-full text-left border-collapse\">\n                        <thead>\n                            <tr>\n                                <th className=\"px-4 py-2 border\">Order ID</th>\n                                <th className=\"px-4 py-2 border\">Status</th>\n                                <th className=\"px-4 py-2 border\">Update Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {orders.map(order => (\n                                <tr key={order.id}>\n                                    <td className=\"px-4 py-2 border\">{order.id}</td>\n                                    <td className=\"px-4 py-2 border\">{order.status}</td>\n                                    <td className=\"px-4 py-2 border\">\n                                        <select\n                                            onChange={(e) => handleOrderStatusUpdate(order.id, e.target.value)}\n                                            defaultValue={order.status}\n                                            className=\"border p-1 rounded\"\n                                        >\n                                            <option value=\"Pending\">Pending</option>\n                                            <option value=\"Shipped\">Shipped</option>\n                                            <option value=\"Delivered\">Delivered</option>\n                                        </select>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </section>\n            )}\n\n            {selectedTab === \"Suppliers\" && (\n                <section>\n                    <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">Suppliers</h2>\n                    <table className=\"table-auto w-full text-left border-collapse\">\n                        <thead>\n                            <tr>\n                                <th className=\"px-4 py-2 border\">Supplier</th>\n                                <th className=\"px-4 py-2 border\">Order</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {suppliers.map(supplier => (\n                                <tr key={supplier.id}>\n                                    <td className=\"px-4 py-2 border\">{supplier.name}</td>\n                                    <td className=\"px-4 py-2 border\">\n                                        <button\n                                            className=\"bg-blue-500 text-white px-4 py-1 rounded\"\n                                            onClick={() => console.log(`Order placed with ${supplier.name}`)}\n                                        >\n                                            Place Order\n                                        </button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </section>\n            )}\n\n            {selectedTab === \"Sales History\" && (\n                <section>\n                    <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">Sales History</h2>\n                    <table className=\"table-auto w-full text-left border-collapse\">\n                        <thead>\n                            <tr>\n                                <th className=\"px-4 py-2 border\">Transaction ID</th>\n                                <th className=\"px-4 py-2 border\">Medicine</th>\n                                <th className=\"px-4 py-2 border\">Quantity</th>\n                                <th className=\"px-4 py-2 border\">Date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {sales.map(sale => (\n                                <tr key={sale.id}>\n                                    <td className=\"px-4 py-2 border\">{sale.transactionId}</td>\n                                    <td className=\"px-4 py-2 border\">{sale.medicineName}</td>\n                                    <td className=\"px-4 py-2 border\">{sale.quantity}</td>\n                                    <td className=\"px-4 py-2 border\">{sale.date}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </section>\n            )}\n\n            {selectedTab === \"Product Management\" && (\n                <section>\n                    <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">Product Management</h2>\n                    <table className=\"table-auto w-full text-left border-collapse\">\n                        <thead>\n                            <tr>\n                                <th className=\"px-4 py-2 border\">Medicine</th>\n                                <th className=\"px-4 py-2 border\">Quantity</th>\n                                <th className=\"px-4 py-2 border\">Availability</th>\n                                <th className=\"px-4 py-2 border\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {medicines.map(med => (\n                                <tr key={med.id}>\n                                    <td className=\"px-4 py-2 border\">{med.name}</td>\n                                    <td className=\"px-4 py-2 border\">\n                                        <input\n                                            type=\"number\"\n                                            value={med.quantity}\n                                            onChange={(e) => handleQuantityUpdate(med.id, e.target.value)}\n                                            className=\"w-16 text-center\"\n                                        />\n                                    </td>\n                                    <td className=\"px-4 py-2 border\">{med.quantity > 0 ? 'In Stock' : 'Out of Stock'}</td>\n                                    <td className=\"px-4 py-2 border\">\n                                        <button\n                                            onClick={() => console.log(`Removing product ${med.name}`)}\n                                            className=\"bg-red-500 text-white px-4 py-1 rounded\"\n                                        >\n                                            Remove\n                                        </button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </section>\n                \n            )}\n                         {selectedTab === \"Responses to Messages\" && (\n                <section>\n                    <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">Responses to Messages</h2>\n                    <table className=\"table-auto w-full text-left border-collapse\">\n                        <thead>\n                            <tr>\n                                <th className=\"px-4 py-2 border\">Message ID</th>\n                                <th className=\"px-4 py-2 border\">Message</th>\n                                <th className=\"px-4 py-2 border\">Response</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {messages.map((msg) => (\n                                <tr key={msg.id}>\n                                    <td className=\"px-4 py-2 border\">{msg.id}</td>\n                                    <td className=\"px-4 py-2 border\">{msg.content}</td>\n                                    <td className=\"px-4 py-2 border\">\n                                        <input\n                                            type=\"text\"\n                                            placeholder=\"Type your response...\"\n                                            onBlur={(e) => handleResponseSubmit(msg.id, e.target.value)}\n                                            className=\"border p-1 rounded w-full\"\n                                        />\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </section>\n            )}\n        </section>\n    );\n};\n\nexport default Admin;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/Navbar.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Footer/Footer.js",["184"],"import React from 'react';\nimport Fade from 'react-reveal/Fade';\nimport NavBrand from '../Navbar/NavBrand';\n\nconst Footer = () => {\n\n    const footerLink = [\n        { id: 1, text: 'Monday to Sunday' },\n        { id: 2, text: 'Open 24 hours' },\n        { id: 3, text: 'IITJ Medical Centre' },\n        { id: 4, text: 'IIT Jodhpur,Karwar' },\n        { id: 5, text: 'Pharmacy Help Line' },\n        { id: 6, text: 'Prescribing Tools' },\n        { id: 7, text: 'Speciality Medications' },\n        { id: 8, text: 'Pharmacy Claims' },\n        { id: 9, text: 'Email - phc@iitj.ac.in' },\n        { id: 11, text: 'Call - 0291-280-(1184)' }\n    ]\n    return (\n        <Fade left>\n        <footer className=\"text-gray-600 poppins\" style={{ backgroundColor: '#98F5F9' }}>\n            <div className=\"max-w-screen-xl px-5 py-24 mx-auto flex md:items-center lg:items-start md:flex-row md:flex-nowrap flex-wrap flex-col\">\n                <div className=\"w-64 flex-shrink-0 md:mx-0 mx-auto text-center md:text-left\">\n                    <NavBrand />\n                </div>\n                <div className=\"flex-grow flex justify-end flex-wrap md:pl-20 -mb-10 md:mt-0 mt-10 md:text-left text-center\">\n                    <div className=\"lg:w-1/4 md:w-1/2 w-full px-4\">\n                        <h2 className=\"poppins text-gray-900 text-base mb-3 font-semibold\">Working Hours</h2>\n                        <nav className=\"list-none mb-10 flex flex-col space-y-2\">\n                            {/* list  */}\n                            {\n                                footerLink.slice(0, 4).map(item => (\n                                    <span key={item.id} className=\"text-sm\">\n    {item.text}\n</span>\n\n                                ))\n                            }\n                        </nav>\n                    </div>\n                    <div className=\"lg:w-1/4 md:w-1/2 w-full px-4\">\n                        <h2 className=\"poppins text-gray-900 text-base mb-3 font-semibold\">Services</h2>\n                        <nav className=\"list-none mb-10 flex flex-col space-y-2\">\n                            {/* list  */}\n                            {\n                                footerLink.slice(4, 8).map(item => (\n                                    <a  target=\"_blank\" rel=\"noopener noreferrer\" key={item.id} className=\"text-sm hover:underline\">{item.text}</a>\n                                ))\n                            }\n                        </nav>\n                    </div>\n                    <div className=\"lg:w-1/4 md:w-1/2 w-full px-4\">\n                        <h2 className=\"poppins text-gray-900 text-base mb-3 font-semibold\">Contact</h2>\n                        <nav className=\"list-none mb-10 flex flex-col space-y-2\">\n                            {/* list  */}\n                            {\n                                footerLink.slice(8, 12).map(item => (\n                                    <span key={item.id} className=\"text-sm\">\n    {item.text}\n</span>\n\n                                ))\n                            }\n                        </nav>\n                    </div>\n\n                </div>\n            </div>\n        </footer>\n        </Fade>\n    )\n}\n\nexport default Footer\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Heading.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Brand.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useOrder.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/AuthorizeUser.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Contact/ContactForm.js",["185"],"import React, { useState, useEffect } from 'react';\nimport Bounce from 'react-reveal/Bounce';\nimport TextField from '../Form/TextField';\nimport { db } from '../../config/firebase'; // Adjust the path as necessary\nimport { collection, addDoc, query, where, onSnapshot, Timestamp } from 'firebase/firestore';\n\nconst ContactForm = () => {\n    const [formData, setFormData] = useState({\n        fullName: '',\n        email: '',\n        phoneNumber: '',\n        message: '',\n    });\n\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [successMessage, setSuccessMessage] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const [responseMessage, setResponseMessage] = useState(null);\n\n    // Form inputs configuration\n    const Inputs = [\n        { id: 1, name: \"fullName\", type: \"text\", placeholder: \"Full Name\" },\n        { id: 2, name: \"email\", type: \"email\", placeholder: \"Email\" },\n        { id: 3, name: \"phoneNumber\", type: \"text\", placeholder: \"Phone Number\" },  // Changed to text for proper validation\n    ];\n\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    };\n\n    // Validate phone number (only 10 digits allowed)\n    const validatePhoneNumber = (phone) => {\n        const phoneRegex = /^[0-9]{10}$/;\n        return phoneRegex.test(phone);\n    };\n\n    // Validate email\n    const validateEmail = (email) => {\n        const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n        return emailRegex.test(email);\n    };\n\n    // Handle form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsSubmitting(true);\n        setSuccessMessage('');\n        setErrorMessage('');\n\n        // Validate phone number\n        if (!validatePhoneNumber(formData.phoneNumber)) {\n            setErrorMessage('Please enter a valid 10-digit phone number.');\n            setIsSubmitting(false);\n            return;\n        }\n\n        // Validate email\n        if (!validateEmail(formData.email)) {\n            setErrorMessage('Please enter a valid email address.');\n            setIsSubmitting(false);\n            return;\n        }\n\n        try {\n            // Add data to Firestore\n            const docRef = await addDoc(collection(db, 'customer_queries'), {\n                ...formData,\n                response: '', // Default empty response\n                createdAt: Timestamp.now(),\n            });\n            setSuccessMessage('Your message has been sent successfully!');\n            setFormData({ fullName: '', email: '', phoneNumber: '', message: '' }); // Reset form\n        } catch (error) {\n            setErrorMessage('Failed to send message. Please try again.');\n            console.error(\"Error adding document: \", error);\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    // Fetch response from Firestore for the current user\n    useEffect(() => {\n        if (formData.email) {  // Only fetch if email is provided\n            const q = query(collection(db, 'customer_queries'), where('email', '==', formData.email));\n            const unsubscribe = onSnapshot(q, (snapshot) => {\n                snapshot.forEach(doc => {\n                    const data = doc.data();\n                    setResponseMessage(data.response || ''); // Display response if available\n                });\n            });\n            return () => unsubscribe(); // Clean up listener\n        }\n    }, [formData.email]);\n\n    return (\n        <form className=\"p-6 flex flex-col justify-center w-full lg:w-2/4 mx-auto\" onSubmit={handleSubmit}>\n            <div className=\"flex flex-col space-y-6\">\n                <Bounce left>\n                    {Inputs.map(input => (\n                        <TextField\n                            key={input.id}\n                            name={input.name}\n                            type={input.type}\n                            placeholder={input.placeholder}\n                            value={formData[input.name]}\n                            onChange={handleChange}\n                        />\n                    ))}\n                </Bounce>\n            </div>\n\n            {/* Text area for message */}\n            <Bounce left>\n                <div className=\"mt-6\">\n                    <textarea\n                        name=\"message\"\n                        placeholder=\"Your Message\"\n                        className=\"w-full px-4 py-3 h-36 rounded-lg ring-blue-200 focus:ring-4 focus:outline-none transition duration-300 border border-gray-300 resize-none\"\n                        value={formData.message}\n                        onChange={handleChange}\n                    />\n                </div>\n\n                <button type=\"submit\" className=\"btn-primary px-6 py-3 w-36 mt-6\" disabled={isSubmitting}>\n                    {isSubmitting ? 'Sending...' : 'Submit'}\n                </button>\n            </Bounce>\n\n            {successMessage && <p className=\"text-green-500 mt-4\">{successMessage}</p>}\n            {errorMessage && <p className=\"text-red-500 mt-4\">{errorMessage}</p>}\n\n            {/* Display admin response */}\n            {responseMessage && (\n                <div className=\"mt-8 p-4 border border-gray-300 rounded-lg bg-gray-100\">\n                    <h4 className=\"text-gray-700 font-semibold mb-2\">Admin Response:</h4>\n                    <p className=\"text-gray-600\">{responseMessage}</p>\n                </div>\n            )}\n        </form>\n    );\n};\n\nexport default ContactForm;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useAuth.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useFirebase.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/NavBrand.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Order/OrderCard.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/AuthorizeUserMobile.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/TextField.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/GoogleSignIn.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/Button.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/products/Product.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useFetch.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Services/Services.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Header/Banner.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Testimonial/Testimonials.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/config/firebase.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Services/Service.js",["186"],"import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Button from '../Form/Button';\n\nconst Service = (props) => {\n    const { title, icon, description } = props;\n    const history = useHistory();\n    return (\n        <div className=\"flex flex-col justify-center items-center space-y-3 bg-white border border-gray-200 hover:shadow-xl transition duration-700 ease-in-out transform hover:scale-105 p-4 box-border rounded-xl\">\n            <img className=\"w-24\" src={icon} alt={title} />\n            <h1 className=\"text-gray-600 poppins text-xl text-center\">{title}</h1>\n           \n            <Button className=\"w-36 btn-primary py-3 px-2 poppins text-sm\" text=\"Learn More\" onClick={() => history.push(`/services/${title}`)} />\n        </div>\n    )\n}\n\nexport default Service\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Testimonial/Testimonial.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/OrdersPage.js",["187","188","189","190","191","192","193","194","195","196","197","198"],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":32,"nodeType":"205","messageId":"206","endLine":1,"endColumn":42},{"ruleId":"203","severity":1,"message":"207","line":5,"column":10,"nodeType":"205","messageId":"206","endLine":5,"endColumn":16},{"ruleId":"203","severity":1,"message":"208","line":5,"column":18,"nodeType":"205","messageId":"206","endLine":5,"endColumn":28},{"ruleId":"203","severity":1,"message":"209","line":30,"column":15,"nodeType":"205","messageId":"206","endLine":30,"endColumn":21},{"ruleId":"203","severity":1,"message":"210","line":9,"column":19,"nodeType":"205","messageId":"206","endLine":9,"endColumn":26},{"ruleId":"203","severity":1,"message":"211","line":6,"column":19,"nodeType":"205","messageId":"206","endLine":6,"endColumn":28},{"ruleId":"212","severity":1,"message":"213","line":18,"column":8,"nodeType":"214","endLine":18,"endColumn":14,"suggestions":"215"},{"ruleId":"216","severity":1,"message":"217","line":47,"column":37,"nodeType":"218","endLine":47,"endColumn":133},{"ruleId":"203","severity":1,"message":"219","line":66,"column":19,"nodeType":"205","messageId":"206","endLine":66,"endColumn":25},{"ruleId":"203","severity":1,"message":"220","line":6,"column":26,"nodeType":"205","messageId":"206","endLine":6,"endColumn":37},{"ruleId":"203","severity":1,"message":"211","line":19,"column":5,"nodeType":"205","messageId":"206","endLine":19,"endColumn":14},{"ruleId":"203","severity":1,"message":"221","line":26,"column":10,"nodeType":"205","messageId":"206","endLine":26,"endColumn":19},{"ruleId":"203","severity":1,"message":"222","line":28,"column":10,"nodeType":"205","messageId":"206","endLine":28,"endColumn":19},{"ruleId":"203","severity":1,"message":"223","line":29,"column":10,"nodeType":"205","messageId":"206","endLine":29,"endColumn":15},{"ruleId":"203","severity":1,"message":"224","line":30,"column":10,"nodeType":"205","messageId":"206","endLine":30,"endColumn":18},{"ruleId":"203","severity":1,"message":"225","line":31,"column":10,"nodeType":"205","messageId":"206","endLine":31,"endColumn":21},{"ruleId":"203","severity":1,"message":"226","line":31,"column":23,"nodeType":"205","messageId":"206","endLine":31,"endColumn":37},{"ruleId":"212","severity":1,"message":"227","line":38,"column":6,"nodeType":"214","endLine":38,"endColumn":12,"suggestions":"228"},{"ruleId":"203","severity":1,"message":"229","line":47,"column":9,"nodeType":"205","messageId":"206","endLine":47,"endColumn":18},{"ruleId":"203","severity":1,"message":"230","line":55,"column":9,"nodeType":"205","messageId":"206","endLine":55,"endColumn":32},{"ruleId":"203","severity":1,"message":"231","line":59,"column":9,"nodeType":"205","messageId":"206","endLine":59,"endColumn":29},{"ruleId":"203","severity":1,"message":"232","line":63,"column":9,"nodeType":"205","messageId":"206","endLine":63,"endColumn":29},"no-native-reassign",["233"],"no-negated-in-lhs",["234"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'addDoc' is defined but never used.","'collection' is defined but never used.","'result' is assigned a value but never used.","'setUser' is assigned a value but never used.","'isLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["235"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'docRef' is assigned a value but never used.","'description' is assigned a value but never used.","'medicines' is assigned a value but never used.","'suppliers' is assigned a value but never used.","'sales' is assigned a value but never used.","'messages' is assigned a value but never used.","'selectedTab' is assigned a value but never used.","'setSelectedTab' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.",["236"],"'fetchData' is assigned a value but never used.","'handleOrderStatusUpdate' is assigned a value but never used.","'handleQuantityUpdate' is assigned a value but never used.","'handleResponseSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},"Update the dependencies array to be: [fetchData, user]",{"range":"241","text":"242"},"Update the dependencies array to be: [fetchOrders, user]",{"range":"243","text":"244"},[651,657],"[fetchData, user]",[1003,1009],"[fetchOrders, user]"]