[{"E:\\Pr\\Web D\\MedSync\\src\\index.js":"1","E:\\Pr\\Web D\\MedSync\\src\\App.js":"2","E:\\Pr\\Web D\\MedSync\\src\\contexts\\OrderProvider.js":"3","E:\\Pr\\Web D\\MedSync\\src\\contexts\\AuthProvider.js":"4","E:\\Pr\\Web D\\MedSync\\src\\routes\\PublicRoute.js":"5","E:\\Pr\\Web D\\MedSync\\src\\screens\\ErrorScreen.js":"6","E:\\Pr\\Web D\\MedSync\\src\\screens\\ServicesDetailScreen.js":"7","E:\\Pr\\Web D\\MedSync\\src\\screens\\SignUpScreen.js":"8","E:\\Pr\\Web D\\MedSync\\src\\screens\\SignInScreen.js":"9","E:\\Pr\\Web D\\MedSync\\src\\routes\\PrivateRoute.js":"10","E:\\Pr\\Web D\\MedSync\\src\\screens\\OrderScreen.js":"11","E:\\Pr\\Web D\\MedSync\\src\\screens\\HomeScreen.js":"12","E:\\Pr\\Web D\\MedSync\\src\\screens\\ContactScreen.js":"13","E:\\Pr\\Web D\\MedSync\\src\\screens\\ProductDetailScreen.js":"14","E:\\Pr\\Web D\\MedSync\\src\\screens\\ProductsScreen.js":"15","E:\\Pr\\Web D\\MedSync\\src\\screens\\profilepage.js":"16","E:\\Pr\\Web D\\MedSync\\src\\components\\Footer\\Footer.js":"17","E:\\Pr\\Web D\\MedSync\\src\\screens\\adminpage.js":"18","E:\\Pr\\Web D\\MedSync\\src\\screens\\OrdersPage.js":"19","E:\\Pr\\Web D\\MedSync\\src\\components\\Navbar\\Navbar.js":"20","E:\\Pr\\Web D\\MedSync\\src\\components\\Brand.js":"21","E:\\Pr\\Web D\\MedSync\\src\\hooks\\useOrder.js":"22","E:\\Pr\\Web D\\MedSync\\src\\components\\Form\\TextField.js":"23","E:\\Pr\\Web D\\MedSync\\src\\components\\Heading.js":"24","E:\\Pr\\Web D\\MedSync\\src\\hooks\\useAuth.js":"25","E:\\Pr\\Web D\\MedSync\\src\\components\\Form\\GoogleSignIn.js":"26","E:\\Pr\\Web D\\MedSync\\src\\components\\Form\\Button.js":"27","E:\\Pr\\Web D\\MedSync\\src\\components\\Navbar\\NavBrand.js":"28","E:\\Pr\\Web D\\MedSync\\src\\hooks\\useFetch.js":"29","E:\\Pr\\Web D\\MedSync\\src\\hooks\\useFirebase.js":"30","E:\\Pr\\Web D\\MedSync\\src\\components\\Order\\OrderCard.js":"31","E:\\Pr\\Web D\\MedSync\\src\\components\\Header\\Banner.js":"32","E:\\Pr\\Web D\\MedSync\\src\\components\\Services\\Services.js":"33","E:\\Pr\\Web D\\MedSync\\src\\components\\products\\Product.js":"34","E:\\Pr\\Web D\\MedSync\\src\\config\\firebase.js":"35","E:\\Pr\\Web D\\MedSync\\src\\components\\Navbar\\AuthorizeUserMobile.js":"36","E:\\Pr\\Web D\\MedSync\\src\\components\\Testimonial\\Testimonials.js":"37","E:\\Pr\\Web D\\MedSync\\src\\components\\Contact\\ContactForm.js":"38","E:\\Pr\\Web D\\MedSync\\src\\components\\Navbar\\AuthorizeUser.js":"39","E:\\Pr\\Web D\\MedSync\\src\\components\\Services\\Service.js":"40","E:\\Pr\\Web D\\MedSync\\src\\components\\Testimonial\\Testimonial.js":"41"},{"size":272,"mtime":1728114430705,"results":"42","hashOfConfig":"43"},{"size":2299,"mtime":1731485865646,"results":"44","hashOfConfig":"43"},{"size":1430,"mtime":1730760224289,"results":"45","hashOfConfig":"43"},{"size":411,"mtime":1731221066925,"results":"46","hashOfConfig":"43"},{"size":1119,"mtime":1731093564462,"results":"47","hashOfConfig":"43"},{"size":712,"mtime":1728114430706,"results":"48","hashOfConfig":"43"},{"size":1666,"mtime":1728114430707,"results":"49","hashOfConfig":"43"},{"size":3128,"mtime":1731092541099,"results":"50","hashOfConfig":"43"},{"size":5925,"mtime":1731227929952,"results":"51","hashOfConfig":"43"},{"size":1443,"mtime":1731485865648,"results":"52","hashOfConfig":"43"},{"size":10274,"mtime":1731485865649,"results":"53","hashOfConfig":"43"},{"size":502,"mtime":1731485865648,"results":"54","hashOfConfig":"43"},{"size":941,"mtime":1731485865648,"results":"55","hashOfConfig":"43"},{"size":4915,"mtime":1731525216006,"results":"56","hashOfConfig":"43"},{"size":6219,"mtime":1731485865649,"results":"57","hashOfConfig":"43"},{"size":9423,"mtime":1731485865650,"results":"58","hashOfConfig":"43"},{"size":3278,"mtime":1731090608796,"results":"59","hashOfConfig":"43"},{"size":48112,"mtime":1731485865650,"results":"60","hashOfConfig":"43"},{"size":6790,"mtime":1731485865649,"results":"61","hashOfConfig":"43"},{"size":5733,"mtime":1731485865647,"results":"62","hashOfConfig":"43"},{"size":366,"mtime":1730247125978,"results":"63","hashOfConfig":"43"},{"size":193,"mtime":1730760198201,"results":"64","hashOfConfig":"43"},{"size":261,"mtime":1728114430701,"results":"65","hashOfConfig":"43"},{"size":549,"mtime":1728114430701,"results":"66","hashOfConfig":"43"},{"size":183,"mtime":1731249488771,"results":"67","hashOfConfig":"43"},{"size":798,"mtime":1728114430701,"results":"68","hashOfConfig":"43"},{"size":193,"mtime":1728114430701,"results":"69","hashOfConfig":"43"},{"size":378,"mtime":1730244871355,"results":"70","hashOfConfig":"43"},{"size":1821,"mtime":1731249488771,"results":"71","hashOfConfig":"43"},{"size":7090,"mtime":1731485865647,"results":"72","hashOfConfig":"43"},{"size":3098,"mtime":1730760972293,"results":"73","hashOfConfig":"43"},{"size":2928,"mtime":1731063091959,"results":"74","hashOfConfig":"43"},{"size":1843,"mtime":1728114430703,"results":"75","hashOfConfig":"43"},{"size":2850,"mtime":1731525343227,"results":"76","hashOfConfig":"43"},{"size":1010,"mtime":1731218529160,"results":"77","hashOfConfig":"43"},{"size":2081,"mtime":1730243924599,"results":"78","hashOfConfig":"43"},{"size":2287,"mtime":1731249488771,"results":"79","hashOfConfig":"43"},{"size":5787,"mtime":1731485865646,"results":"80","hashOfConfig":"43"},{"size":3025,"mtime":1731249488771,"results":"81","hashOfConfig":"43"},{"size":817,"mtime":1730631933931,"results":"82","hashOfConfig":"43"},{"size":1664,"mtime":1731249488771,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1q97nze",{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"86"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"86"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"E:\\Pr\\Web D\\MedSync\\src\\index.js",[],["179","180"],"E:\\Pr\\Web D\\MedSync\\src\\App.js",["181"],"import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Footer from './components/Footer/Footer';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport AuthProvider from './contexts/AuthProvider'; // Import AuthProvider\r\nimport OrderProvider from './contexts/OrderProvider';\r\nimport PrivateRoute from './routes/PrivateRoute';\r\nimport PublicRoute from './routes/PublicRoute';\r\nimport ContactScreen from './screens/ContactScreen';\r\nimport ErrorScreen from './screens/ErrorScreen';\r\nimport HomeScreen from './screens/HomeScreen';\r\nimport OrderScreen from './screens/OrderScreen';\r\nimport ProductDetailScreen from './screens/ProductDetailScreen';\r\nimport ProductsScreen from './screens/ProductsScreen';\r\nimport ServicesDetailScreen from './screens/ServicesDetailScreen';\r\nimport SignInScreen from './screens/SignInScreen';\r\nimport SignUpScreen from './screens/SignUpScreen';\r\nimport ProfilePage from './screens/profilepage';\r\nimport AdminPage from './screens/adminpage'; // Import AdminPage\r\nimport OrdersPage from './screens/OrdersPage';\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <AuthProvider>  {/* Wrap the app with AuthProvider */}\r\n        <OrderProvider>\r\n          \r\n          <Switch>\r\n            <Route exact path=\"/\"><HomeScreen /></Route>\r\n            <Route exact path=\"/contact\"><ContactScreen /></Route>\r\n            <PublicRoute path=\"/signup\"><SignUpScreen /></PublicRoute>\r\n            <PublicRoute path=\"/signin\"><SignInScreen /></PublicRoute>\r\n            <PrivateRoute exact path=\"/services/:title\"><ServicesDetailScreen /></PrivateRoute>\r\n            <Route exact path=\"/products/\"><ProductsScreen /></Route>\r\n            <PrivateRoute exact path=\"/products/:title\"><ProductDetailScreen /></PrivateRoute>\r\n            <PrivateRoute exact path=\"/orders\"><OrderScreen /></PrivateRoute>\r\n            <PrivateRoute exact path=\"/profile\"><ProfilePage /></PrivateRoute>\r\n            <PrivateRoute exact path=\"/admin\"><AdminPage /></PrivateRoute>\r\n            <Route exact path=\"/userOrders\"> <OrdersPage /> </Route>\r\n            <Route path=\"*\"><ErrorScreen /></Route>\r\n          </Switch>\r\n          <Footer />\r\n        </OrderProvider>\r\n      </AuthProvider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","E:\\Pr\\Web D\\MedSync\\src\\contexts\\OrderProvider.js",["182"],"import React, { createContext, useContext, useState } from 'react';\r\n\r\nexport const OrderContext = createContext();\r\n\r\nexport const OrderProvider = ({ children }) => {\r\n    const [orders, setOrders] = useState([]);\r\n\r\n    // Function to add product to the cart\r\n    const handleCart = (product) => {\r\n        const existingProduct = orders.find((item) => item.id === product.id);\r\n        if (existingProduct) {\r\n            // Increment quantity if product already in cart\r\n            updateProductQuantity(product.id, existingProduct.quantity + 1);\r\n        } else {\r\n            // Add product with quantity 1 if not in cart\r\n            setOrders([...orders, { ...product, quantity: 1 }]);\r\n        }\r\n    };\r\n\r\n    // Function to update product quantity\r\n    const updateProductQuantity = (productId, newQuantity) => {\r\n        setOrders((prevOrders) =>\r\n            prevOrders.map((item) =>\r\n                item.id === productId ? { ...item, quantity: newQuantity } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    // Function to remove a product from the cart\r\n    const removeProduct = (productId) => {\r\n        setOrders((prevOrders) => prevOrders.filter((item) => item.id !== productId));\r\n    };\r\n\r\n    return (\r\n        <OrderContext.Provider value={{ orders, handleCart, updateProductQuantity, removeProduct }}>\r\n            {children}\r\n        </OrderContext.Provider>\r\n    );\r\n};\r\n\r\nexport default OrderProvider\r\n","E:\\Pr\\Web D\\MedSync\\src\\contexts\\AuthProvider.js",[],"E:\\Pr\\Web D\\MedSync\\src\\routes\\PublicRoute.js",[],"E:\\Pr\\Web D\\MedSync\\src\\screens\\ErrorScreen.js",[],"E:\\Pr\\Web D\\MedSync\\src\\screens\\ServicesDetailScreen.js",[],"E:\\Pr\\Web D\\MedSync\\src\\screens\\SignUpScreen.js",[],"E:\\Pr\\Web D\\MedSync\\src\\screens\\SignInScreen.js",["183"],"import React, { useState } from 'react';\r\nimport Bounce from 'react-reveal/Bounce';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Brand from '../components/Brand';\r\nimport Button from '../components/Form/Button';\r\nimport GoogleSignIn from '../components/Form/GoogleSignIn';\r\nimport TextField from '../components/Form/TextField';\r\nimport useAuth from '../hooks/useAuth';\r\n\r\nconst SignInScreen = () => {\r\n    const [userInput, setUserInput] = useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [isAdmin, setIsAdmin] = useState(false); // Toggle for user/admin tab\r\n    const { signInUser, signInWithGoogle } = useAuth();\r\n    const history = useHistory();\r\n\r\n    const allowedAdminEmails = ['b22es006@iitj.ac.in', 'b22cs101@iitj.ac.in', 'b22cs014@iitj.ac.in'];\r\n\r\n    // Handle form input changes\r\n    const handleChange = (e) => {\r\n        const { value, name } = e.target;\r\n        setUserInput((prev) => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    // Handle regular user form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const result = await signInUser(userInput.email, userInput.password);\r\n\r\n        // Redirect based on user type\r\n        if (allowedAdminEmails.includes(userInput.email)) {\r\n            history.replace('/admin'); // Use replace to avoid back navigation to root\r\n        } else {\r\n            history.push('/'); // Redirect regular user to dashboard\r\n        }\r\n    };\r\n\r\n// Handle Google Sign-In with immediate admin check\r\nconst handleGoogleSignIn = async () => {\r\n    try {\r\n        const result = await signInWithGoogle();  // Assuming this returns a result object\r\n        const user = result.user;\r\n\r\n        console.log(\"Signed in user:\", user); // Log user info for debugging\r\n\r\n        // Check if user is an admin and navigate accordingly\r\n        if (allowedAdminEmails.includes(user.email)) {\r\n            history.replace('/admin'); // Directly redirect to admin page if email is allowed\r\n        } else {\r\n            history.push('/'); // Redirect to user dashboard if not admin\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Google sign-in failed:\", error);\r\n    }\r\n};\r\n\r\n    // Form inputs configuration\r\n    const Inputs = [\r\n        { id: 1, type: \"email\", placeholder: \"Email\", value: userInput.email, name: 'email' },\r\n        { id: 2, type: \"password\", placeholder: \"Password\", value: userInput.password, name: 'password' },\r\n    ];\r\n\r\n    return (\r\n        <main className=\"h-screen w-full banner\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10\">\r\n                {/* Image Section */}\r\n                <Bounce left>\r\n                    <div className=\"hidden md:flex lg:flex flex-col justify-center items-center w-full h-screen\">\r\n                        <img className=\"w-4/4 mx-auto\" src=\"../../assets/signin.png\" alt=\"signin\" />\r\n                    </div>\r\n                </Bounce>\r\n\r\n                {/* Form Section */}\r\n                <Bounce right>\r\n                    <div className=\"flex flex-col justify-center items-center h-screen\">\r\n                        {/* Logo */}\r\n                        <Brand />\r\n\r\n                        {/* Tabs for User and Admin Login */}\r\n                        <div className=\"flex space-x-6 mt-4\">\r\n                            <button \r\n                                onClick={() => setIsAdmin(false)} \r\n                                className={`px-4 py-2 ${!isAdmin ? \"bg-blue-500 text-white\" : \"text-blue-500\"}`}>\r\n                                User Login\r\n                            </button>\r\n                            <button \r\n                                onClick={() => setIsAdmin(true)} \r\n                                className={`px-4 py-2 ${isAdmin ? \"bg-blue-500 text-white\" : \"text-blue-500\"}`}>\r\n                                Admin Login\r\n                            </button>\r\n                        </div>\r\n\r\n                        {/* Form */}\r\n                        <form className=\"bg-white w-3/5 mt-6 p-4 rounded-lg shadow-lg\" onSubmit={handleSubmit}>\r\n                            {!isAdmin ? (\r\n                                // Regular User Login Form\r\n                                <div className=\"flex flex-col space-y-6\">\r\n                                    {Inputs.map((input) => (\r\n                                        <TextField\r\n                                            key={input.id}\r\n                                            type={input.type}\r\n                                            placeholder={input.placeholder}\r\n                                            value={input.value}\r\n                                            name={input.name}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    ))}\r\n                                </div>\r\n                            ) : (\r\n                                // Admin Login with Google only\r\n                                <p className=\"text-gray-600 text-center mt-4\">Use Sign In with Google for Admin Access</p>\r\n                            )}\r\n                            {!isAdmin && <Button text=\"Sign In\" />}\r\n                            <Link to=\"/signup\">\r\n                                <p className=\"text-base text-primary text-center my-6 hover:underline\">\r\n                                    First Time? Create Account Here.\r\n                                </p>\r\n                            </Link>\r\n\r\n                            {/* Google Sign-In Button */}\r\n                            <GoogleSignIn text={isAdmin ? \"Sign In as Admin\" : \"Sign In With Google\"} onClick={handleGoogleSignIn} />\r\n                        </form>\r\n                    </div>\r\n                </Bounce>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default SignInScreen;\r\n","E:\\Pr\\Web D\\MedSync\\src\\routes\\PrivateRoute.js",[],"E:\\Pr\\Web D\\MedSync\\src\\screens\\OrderScreen.js",["184","185"],"import React, { useState, useEffect } from 'react';\r\nimport Bounce from 'react-reveal/Bounce';\r\nimport OrderCard from '../components/Order/OrderCard';\r\nimport useOrder from '../hooks/useOrder';\r\nimport { addDoc, collection, doc, updateDoc, arrayUnion, setDoc, getDoc, getDocs, query, where } from 'firebase/firestore';\r\nimport  useAuth from '../hooks/useAuth';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { useHistory } from 'react-router-dom'; // Import for redirection\r\nimport swal from 'sweetalert'; \r\nimport Navbar from '../components/Navbar/Navbar'\r\n\r\nconst OrderScreen = () => {\r\n    const { orders } = useOrder();\r\n    const [deliveryTiming, setDeliveryTiming] = useState('one-time');\r\n    const [deliveryTimeRange, setDeliveryTimeRange] = useState('None');\r\n    const [recurringOption, setRecurringOption] = useState('None');\r\n    const [paymentType, setPaymentType] = useState('cash');\r\n    const [totalPrice, setTotalPrice] = useState(0); // State for total price\r\n    const gstRate = 0.05; // 5% GST\r\n    const { user } = useAuth(); // Get the current user from AuthContext\r\n    const db = getFirestore();\r\n    const history = useHistory();\r\n\r\n    // Calculate total price based on orders and their quantities\r\n    useEffect(() => {\r\n        const price = orders.reduce((acc, order) => {\r\n            return acc + (order.price * order.quantity); // Use quantity from order\r\n        }, 0);\r\n        setTotalPrice(price + price * gstRate); // Total price including GST\r\n    }, [orders]);\r\n\r\n    // Function to handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        const orderDetails = {\r\n            user_id: user?.uid || 'unknown',\r\n            items: orders.map(item => ({\r\n                product_id: String(item.id),\r\n                name: item.title,\r\n                quantity: item.quantity,\r\n                price_per_unit: item.price,\r\n                total_price: item.price * item.quantity\r\n            })),\r\n            total_price: totalPrice || 0,\r\n            gst: totalPrice * gstRate || 0,\r\n            delivery_timing: deliveryTiming || 'None',\r\n            delivery_time_range: deliveryTimeRange || 'None',\r\n            recurring_option: recurringOption || 'None',\r\n            payment_type: paymentType || 'None',\r\n            timestamp: new Date(),\r\n            status: 'pending'\r\n        };\r\n    \r\n        console.log(\"Order Details:\", orderDetails);\r\n    \r\n        try {\r\n            const order_id = `order_${new Date().getTime()}`;\r\n            const orderRef = doc(db, 'orders', order_id);\r\n        \r\n            for (const item of orders) {\r\n                // Query to find the document with the matching 'id' field\r\n                const productQuery = query(\r\n                    collection(db, 'products'),\r\n                    where('id', '==', item.id) // Filter documents by 'id' field matching item.id\r\n                );\r\n        \r\n                const productSnapshot = await getDocs(productQuery);\r\n        \r\n                if (!productSnapshot.empty) {\r\n                    // There should only be one document matching the `id` field\r\n                    const productDoc = productSnapshot.docs[0];\r\n                    const currentQuantity = productDoc.data().quantity;\r\n                    const newQuantity = currentQuantity - item.quantity;\r\n        \r\n                    // Update the quantity in the matched document\r\n                    await updateDoc(productDoc.ref, {\r\n                        quantity: newQuantity >= 0 ? newQuantity : 0\r\n                    });\r\n                } else {\r\n                    console.warn(`Product with ID ${item.id} does not exist.`);\r\n                }\r\n            }\r\n        \r\n            // Set order document in 'orders' collection\r\n            await setDoc(orderRef, orderDetails);\r\n        \r\n            // Update user's order history\r\n            const userRef = doc(db, 'user_profile', String(user.uid));\r\n            await updateDoc(userRef, {\r\n                orders: arrayUnion(order_id)\r\n            });\r\n        \r\n            swal(\"Order Placed!\", \"Your order has been placed successfully!\", \"success\");\r\n            history.push('/');\r\n        } catch (error) {\r\n            console.error(\"Error placing order:\", error);\r\n        }\r\n        \r\n    };\r\n    \r\n    \r\n\r\n    // Check if the form is complete (i.e., \"Place Order\" button should be enabled)\r\n    const isFormValid = deliveryTiming !== 'None' && deliveryTimeRange !== 'None' && paymentType !== 'None';\r\n\r\n    return (\r\n        <>\r\n        <Navbar />\r\n        <section className=\"max-w-screen-xl py-24 mx-auto px-6\">\r\n            {orders.length === 0 ? (\r\n                <div className=\"h-screen\">\r\n                    <h1 className=\"text-3xl poppins text-center text-blue-600\">Cart is Empty!</h1>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    {/* Heading */}\r\n                    <Bounce left>\r\n                        <div className=\"flex flex-col items-center space-x-2 pb-8\">\r\n                            <h1 className=\"text-gray-700 poppins text-3xl\">All <span className=\"text-blue-600 font-semibold select-none\">Orders</span></h1>\r\n                            <div className=\"bg-blue-600 flex items-center justify-center w-16 h-1 mt-2 rounded-full\"></div>\r\n                        </div>\r\n                    </Bounce>\r\n                    <div className=\"flex justify-center\">\r\n                        <div className=\"flex flex-col space-y-4\">\r\n                            {orders.map(item => (\r\n                                <OrderCard key={item.id} {...item} />\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Form for Delivery Details */}\r\n                    <div className=\"mt-12\">\r\n                        <h2 className=\"text-2xl font-semibold mb-4\">Delivery Details</h2>\r\n                        <form onSubmit={handleSubmit} className=\"flex flex-col space-y-4\">\r\n                            <div>\r\n                                <label className=\"block text-sm font-medium text-gray-700\">Delivery Timing</label>\r\n                                <select \r\n                                    value={deliveryTiming}\r\n                                    onChange={(e) => setDeliveryTiming(e.target.value)}\r\n                                    className=\"mt-1 block w-full border-gray-300 rounded-md\"\r\n                                >\r\n                                    <option value=\"None\">Select Timing</option>\r\n                                    <option value=\"one-time\">One Time</option>\r\n                                    <option value=\"recurring\">Recurring</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <label className=\"block text-sm font-medium text-gray-700\">Delivery Time Range</label>\r\n                                <select \r\n                                    value={deliveryTimeRange}\r\n                                    onChange={(e) => setDeliveryTimeRange(e.target.value)}\r\n                                    className=\"mt-1 block w-full border-gray-300 rounded-md\"\r\n                                >\r\n                                    <option value=\"None\">Select Time Range</option>\r\n                                    <option value=\"morning\">Morning</option>\r\n                                    <option value=\"afternoon\">Afternoon</option>\r\n                                    <option value=\"evening\">Evening</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            {deliveryTiming === 'recurring' && (\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700\">Repeat This Order</label>\r\n                                    <select \r\n                                        value={recurringOption}\r\n                                        onChange={(e) => setRecurringOption(e.target.value)}\r\n                                        className=\"mt-1 block w-full border-gray-300 rounded-md\"\r\n                                    >\r\n                                        <option value=\"None\">Select Option</option>\r\n                                        <option value=\"monthly\">Every Month</option>\r\n                                        <option value=\"bi-monthly\">Every Two Months</option>\r\n                                    </select>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div>\r\n                                <label className=\"block text-sm font-medium text-gray-700\">Payment Type</label>\r\n                                <select \r\n                                    value={paymentType}\r\n                                    onChange={(e) => setPaymentType(e.target.value)}\r\n                                    className=\"mt-1 block w-full border-gray-300 rounded-md\"\r\n                                >\r\n                                    <option value=\"None\">Select Payment</option>\r\n                                    <option value=\"cash\">Cash</option>\r\n                                    <option value=\"upi\">UPI</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"mt-4\">\r\n                                <h3 className=\"text-lg font-semibold\">Total Price (including GST): ₹{totalPrice.toFixed(2)}</h3>\r\n                            </div>\r\n\r\n                            <button \r\n                                type=\"submit\"\r\n                                className={`mt-4 bg-blue-600 text-white py-2 px-4 rounded-md ${!isFormValid ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n                                disabled={!isFormValid}  // Disable button if form is not valid\r\n                            >\r\n                                Place Order\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OrderScreen;\r\n","E:\\Pr\\Web D\\MedSync\\src\\screens\\HomeScreen.js",[],"E:\\Pr\\Web D\\MedSync\\src\\screens\\ContactScreen.js",[],"E:\\Pr\\Web D\\MedSync\\src\\screens\\ProductDetailScreen.js",[],"E:\\Pr\\Web D\\MedSync\\src\\screens\\ProductsScreen.js",[],"E:\\Pr\\Web D\\MedSync\\src\\screens\\profilepage.js",["186"],"import React, { useState, useEffect } from 'react';\r\nimport { getFirestore, doc, addDoc, setDoc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';\r\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\r\n\r\nimport { getAuth, updateProfile } from 'firebase/auth';\r\nimport useAuth from '../hooks/useAuth';\r\nimport Navbar from '../components/Navbar/Navbar';\r\n\r\nconst ProfilePage = () => {\r\n    const { user, setUser } = useAuth();\r\n    const db = getFirestore();\r\n    const storage = getStorage();\r\n    const auth = getAuth();\r\n    \r\n    const [profileData, setProfileData] = useState({\r\n        phone: '',\r\n        bloodGroup: '',\r\n        rollOrEmpId: '',\r\n        age: '',\r\n        medicalBio: '',\r\n        serviceReview: '',  // Review text\r\n        rating: 1,  // Rating value (1 to 5 stars)\r\n    });\r\n    const [profilePic, setProfilePic] = useState(user.photoURL || \"https://cdn-icons-png.flaticon.com/512/236/236832.png\");\r\n    const [imageFile, setImageFile] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchProfileData = async () => {\r\n            if (user) {\r\n                const userDoc = doc(db, \"user_profile\", user.uid);\r\n                const docSnap = await getDoc(userDoc);\r\n                if (docSnap.exists()) {\r\n                    setProfileData(docSnap.data());\r\n                }\r\n            }\r\n        };\r\n        fetchProfileData();\r\n    }, [user, db]);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setProfileData(prev => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleImageChange = (e) => {\r\n        if (e.target.files[0]) {\r\n            setImageFile(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const handleSave = async (e) => {\r\n        e.preventDefault();\r\n        if (user) {\r\n            let imageUrl = profilePic;\r\n    \r\n            // Upload the image to Firebase Storage if a new image is selected\r\n            if (imageFile) {\r\n                const storageRef = ref(storage, `profile_pictures/${user.uid}`);\r\n                await uploadBytes(storageRef, imageFile);\r\n                imageUrl = await getDownloadURL(storageRef);\r\n    \r\n                // Update the profile picture in Firebase Auth\r\n                await updateProfile(auth.currentUser, { photoURL: imageUrl });\r\n                setProfilePic(imageUrl); // Update local profile picture display\r\n            }\r\n    \r\n            // Save profile data to Firestore\r\n            const userDoc = doc(db, \"user_profile\", user.uid);\r\n            await setDoc(userDoc, {\r\n                name: user.displayName,\r\n                email: user.email,\r\n                photoURL: imageUrl,\r\n                ...profileData // Including the service review and rating\r\n            });\r\n    \r\n            // Check if a review document exists for the user\r\n            const reviewsQuery = query(collection(db, \"reviews\"), where(\"username\", \"==\", user.displayName));\r\n            const querySnapshot = await getDocs(reviewsQuery);\r\n\r\n            if (!querySnapshot.empty) {\r\n                // If a review exists, overwrite it using setDoc\r\n                const reviewDoc = doc(db, \"reviews\", querySnapshot.docs[0].id); // Get the first document (user's review)\r\n                await setDoc(reviewDoc, {\r\n                    username: user.displayName,\r\n                    image: imageUrl,\r\n                    review: profileData.serviceReview,\r\n                    rating: profileData.rating,\r\n                });\r\n            } else {\r\n                // If no review exists, create a new one\r\n                const reviewsRef = collection(db, \"reviews\");\r\n                await addDoc(reviewsRef, {\r\n                    username: user.displayName,\r\n                    image: imageUrl,\r\n                    review: profileData.serviceReview,\r\n                    rating: profileData.rating,\r\n                });\r\n            }\r\n\r\n            alert(\"Profile updated and review submitted successfully\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <Navbar />\r\n        <div className=\"profile-page container mx-auto p-4 mt-20\">\r\n            <header className=\"flex justify-between items-start mb-6\">\r\n                <h1 className=\"text-3xl font-bold\">Profile</h1>\r\n                <div>\r\n                    <img\r\n                        src={profilePic}\r\n                        alt=\"Profile\"\r\n                        className=\"w-40 h-40 rounded-full border mb-2\"\r\n                    />\r\n                </div>\r\n            </header>\r\n            \r\n            <form onSubmit={handleSave} className=\"bg-white p-6 rounded-lg shadow-lg\">\r\n                <div className=\"grid grid-cols-1 gap-4 mb-6\">\r\n                    <div>\r\n                        <label className=\"font-semibold\">Name:</label>\r\n                        <p>{user.displayName}</p>\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"font-semibold\">Email:</label>\r\n                        <p>{user.email}</p>\r\n                    </div>\r\n                    {/* Profile Picture Upload Box - Moved below Email */}\r\n                    <div>\r\n                        <label className=\"font-semibold\">Upload Profile Picture:</label>\r\n                        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} className=\"w-full p-2 border rounded mt-2\" />\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"font-semibold\">Phone Number:</label>\r\n                        <input \r\n                            type=\"tel\"\r\n                            name=\"phone\"\r\n                            value={profileData.phone}\r\n                            onChange={handleChange}\r\n                            maxLength=\"10\"\r\n                            pattern=\"\\d*\" // Ensures only digits are allowed\r\n                            className=\"w-full p-2 border rounded\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label className=\"font-semibold\">Blood Group:</label>\r\n                        <input \r\n                            type=\"text\"\r\n                            name=\"bloodGroup\"\r\n                            value={profileData.bloodGroup}\r\n                            onChange={handleChange}\r\n                            className=\"w-full p-2 border rounded\"\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"font-semibold\">Roll No/Emp ID:</label>\r\n                        <input \r\n                            type=\"text\"\r\n                            name=\"rollOrEmpId\"\r\n                            value={profileData.rollOrEmpId}\r\n                            onChange={handleChange}\r\n                            className=\"w-full p-2 border rounded\"\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"font-semibold\">Age:</label>\r\n                        <input \r\n                            type=\"number\"\r\n                            name=\"age\"\r\n                            value={profileData.age}\r\n                            onChange={handleChange}\r\n                            className=\"w-full p-2 border rounded\"\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"font-semibold\">Medical Bio:</label>\r\n                        <textarea \r\n                            name=\"medicalBio\"\r\n                            value={profileData.medicalBio}\r\n                            onChange={handleChange}\r\n                            className=\"w-full p-2 border rounded\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Service Review Section */}\r\n                    <div>\r\n                        <label className=\"font-semibold\">Service Review:</label>\r\n                        <textarea \r\n                            name=\"serviceReview\"\r\n                            value={profileData.serviceReview}\r\n                            onChange={handleChange}\r\n                            placeholder=\"Write your review here...\"\r\n                            className=\"w-full p-2 border rounded\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Rating Section */}\r\n                    <div>\r\n                        <label className=\"font-semibold\">Rating (1-5):</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            name=\"rating\"\r\n                            min=\"1\"\r\n                            max=\"5\"\r\n                            value={profileData.rating}\r\n                            onChange={handleChange}\r\n                            className=\"w-full p-2 border rounded\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"text-center\">\r\n                    <button \r\n                        type=\"submit\"\r\n                        className=\"bg-blue-500 text-white py-2 px-6 rounded-lg font-semibold hover:bg-blue-600\"\r\n                    >\r\n                        Update Profile\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfilePage;\r\n","E:\\Pr\\Web D\\MedSync\\src\\components\\Footer\\Footer.js",["187"],"import React from 'react';\r\nimport Fade from 'react-reveal/Fade';\r\nimport NavBrand from '../Navbar/NavBrand';\r\n\r\nconst Footer = () => {\r\n\r\n    const footerLink = [\r\n        { id: 1, text: 'Monday to Sunday' },\r\n        { id: 2, text: 'Open 24 hours' },\r\n        { id: 3, text: 'IITJ Medical Centre' },\r\n        { id: 4, text: 'IIT Jodhpur,Karwar' },\r\n        { id: 5, text: 'Pharmacy Help Line' },\r\n        { id: 6, text: 'Prescribing Tools' },\r\n        { id: 7, text: 'Speciality Medications' },\r\n        { id: 8, text: 'Pharmacy Claims' },\r\n        { id: 9, text: 'Email - phc@iitj.ac.in' },\r\n        { id: 11, text: 'Call - 0291-280-(1184)' }\r\n    ]\r\n    return (\r\n        <Fade left>\r\n        <footer className=\"text-gray-600 poppins\" style={{ backgroundColor: '#98F5F9' }}>\r\n            <div className=\"max-w-screen-xl px-5 py-24 mx-auto flex md:items-center lg:items-start md:flex-row md:flex-nowrap flex-wrap flex-col\">\r\n                <div className=\"w-64 flex-shrink-0 md:mx-0 mx-auto text-center md:text-left\">\r\n                    <NavBrand />\r\n                </div>\r\n                <div className=\"flex-grow flex justify-end flex-wrap md:pl-20 -mb-10 md:mt-0 mt-10 md:text-left text-center\">\r\n                    <div className=\"lg:w-1/4 md:w-1/2 w-full px-4\">\r\n                        <h2 className=\"poppins text-gray-900 text-base mb-3 font-semibold\">Working Hours</h2>\r\n                        <nav className=\"list-none mb-10 flex flex-col space-y-2\">\r\n                            {/* list  */}\r\n                            {\r\n                                footerLink.slice(0, 4).map(item => (\r\n                                    <span key={item.id} className=\"text-sm\">\r\n    {item.text}\r\n</span>\r\n\r\n                                ))\r\n                            }\r\n                        </nav>\r\n                    </div>\r\n                    <div className=\"lg:w-1/4 md:w-1/2 w-full px-4\">\r\n                        <h2 className=\"poppins text-gray-900 text-base mb-3 font-semibold\">Services</h2>\r\n                        <nav className=\"list-none mb-10 flex flex-col space-y-2\">\r\n                            {/* list  */}\r\n                            {\r\n                                footerLink.slice(4, 8).map(item => (\r\n                                    <a  target=\"_blank\" rel=\"noopener noreferrer\" key={item.id} className=\"text-sm hover:underline\">{item.text}</a>\r\n                                ))\r\n                            }\r\n                        </nav>\r\n                    </div>\r\n                    <div className=\"lg:w-1/4 md:w-1/2 w-full px-4\">\r\n                        <h2 className=\"poppins text-gray-900 text-base mb-3 font-semibold\">Contact</h2>\r\n                        <nav className=\"list-none mb-10 flex flex-col space-y-2\">\r\n                            {/* list  */}\r\n                            {\r\n                                footerLink.slice(8, 12).map(item => (\r\n                                    <span key={item.id} className=\"text-sm\">\r\n    {item.text}\r\n</span>\r\n\r\n                                ))\r\n                            }\r\n                        </nav>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </footer>\r\n        </Fade>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","E:\\Pr\\Web D\\MedSync\\src\\screens\\adminpage.js",["188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203"],"import React, { useState, useEffect } from \"react\";\r\nimport useFirebase from \"../hooks/useFirebase\";\r\nimport \"./admin.css\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  getDocs,\r\n  doc,\r\n  updateDoc,\r\n  where,\r\n  query,\r\n  orderBy,\r\n  onSnapshot\r\n} from \"firebase/firestore\";\r\nimport { initializeApp } from \"firebase/app\"; // Import the firebase namespace\r\nimport { db } from \"../config/firebase\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\n\r\nimport Navbar from '../components/Navbar/Navbar'\r\n\r\n\r\nconst formatTimestamp = (timestamp) => {\r\n  const date = new Date(timestamp.seconds * 1000); // Convert seconds to milliseconds\r\n  return date.toLocaleDateString(\"en-US\", {\r\n    year: \"numeric\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n  });\r\n};\r\n\r\n// Helper function to format months\r\nconst getLastSixMonths = () => {\r\n  const months = [];\r\n  const currentDate = new Date();\r\n  for (let i = 0; i < 6; i++) {\r\n    const month = new Date(currentDate);\r\n    month.setMonth(currentDate.getMonth() - i);\r\n    months.push(month.toLocaleString('default', { month: 'short' }));\r\n  }\r\n  return months.reverse();\r\n};\r\n\r\nconst Admin = () => {\r\n  const {\r\n    user,\r\n    isLoading,\r\n    getMedicines,\r\n    getOrders,\r\n    getMessages,\r\n    updateOrderStatusInFirestore,\r\n  } = useFirebase();\r\n  const [orders, setOrders] = useState([]);\r\n  const [suppliers, setSuppliers] = useState([]);\r\n  const [sales, setSales] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [selectedTab, setSelectedTab] = useState(\"Sales\");\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n  const [medicines, setMedicines] = useState([]);\r\n  const [showDialog, setShowDialog] = useState(false);\r\n  const [response, setResponse] = useState(\"\");\r\n  const [selectedMessage, setSelectedMessage] = useState(null);\r\n  const [products, setProducts] = useState([]);\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n  const [formValues, setFormValues] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    price: \"\",\r\n    expiry_date: \"\",\r\n    quantity: \"\",\r\n    type: \"\",\r\n    mfg_date: \"\",\r\n  });\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [reviews, setReviews] = useState([]);\r\n\r\n  const [selectedReview, setSelectedReview] = useState(null);\r\n  const [responseMessage, setResponseMessage] = useState(\"\");\r\n\r\n  const [salesData, setSalesData] = useState([]);\r\n  const [contactData, setContactData] = useState([]);\r\n\r\n  const fetchMessages = async () => {\r\n    try {\r\n      const querySnapshot = await getDocs(collection(db, \"reviews\"));\r\n      const fetchedMessages = querySnapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setMessages(fetchedMessages);\r\n      console.log(\"Messages :- \", fetchedMessages);\r\n    } catch (error) {\r\n      console.error(\"Error fetching messages:\", error);\r\n    } finally {\r\n      setLoading(false); // Set loading to false once data is fetched\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch data from Firestore's \"contact\" collection\r\n    const q = query(collection(db, 'contact'));\r\n\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n        const data = snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            ...doc.data(), // Spread the document data into the contact object\r\n        }));\r\n        setContactData(data);\r\n    });\r\n\r\n    return () => unsubscribe(); // Clean up the listener\r\n}, []);\r\n\r\n  // Fetch the sales data from Firebase\r\n  useEffect(() => {\r\n    const fetchSalesData = async () => {\r\n      const months = getLastSixMonths();\r\n      const salesPerMonth = months.map(month => ({ month, sales: 0 }));\r\n\r\n      try {\r\n        const ordersRef = collection(db, \"orders\");\r\n        const q = query(ordersRef, where(\"timestamp\", \">=\", new Date(new Date().setMonth(new Date().getMonth() - 6))), orderBy(\"timestamp\"));\r\n        const querySnapshot = await getDocs(q);\r\n        \r\n        querySnapshot.forEach((doc) => {\r\n          const orderData = doc.data();\r\n          const orderMonth = new Date(orderData.timestamp.seconds * 1000).toLocaleString('default', { month: 'short' });\r\n\r\n          // Find the corresponding month in the salesPerMonth array\r\n          const monthIndex = salesPerMonth.findIndex(item => item.month === orderMonth);\r\n          if (monthIndex !== -1) {\r\n            salesPerMonth[monthIndex].sales += orderData.total_price;\r\n          }\r\n        });\r\n\r\n        setSalesData(salesPerMonth);\r\n      } catch (error) {\r\n        console.error(\"Error fetching sales data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSalesData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchReviews = async () => {\r\n      const reviewsCollection = collection(db, \"reviews\");\r\n      const reviewsSnapshot = await getDocs(reviewsCollection);\r\n      const reviewsList = reviewsSnapshot.docs.map((doc) => doc.data());\r\n      setReviews(reviewsList);\r\n    };\r\n\r\n    fetchReviews();\r\n  }, []);\r\n\r\n  // Fetch reviews with responded attribute\r\n  useEffect(() => {\r\n    const fetchReviews = async () => {\r\n      const reviewsCollection = collection(db, \"reviews\");\r\n      const reviewsSnapshot = await getDocs(reviewsCollection);\r\n      const reviewsList = await Promise.all(\r\n        reviewsSnapshot.docs.map(async (doc) => {\r\n          const reviewData = doc.data();\r\n          const reviewId = doc.id;\r\n          const responded = reviewData.responded || \"pending\"; // If 'responded' exists, use it, else set it as 'pending'\r\n          return {\r\n            id: reviewId,\r\n            ...reviewData,\r\n            responded,\r\n          };\r\n        })\r\n      );\r\n      setReviews(reviewsList);\r\n    };\r\n\r\n    fetchReviews();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchData();\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      const productsCollection = collection(db, \"products\");\r\n      const productSnapshot = await getDocs(productsCollection);\r\n      const productList = productSnapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setProducts(productList);\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  // Function to open the response dialog\r\n  const openResponseDialog = (msgId, currentResponse) => {\r\n    setSelectedMessage(msgId);\r\n    setResponse(currentResponse || \"\");\r\n    setShowDialog(true);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setShowDialog(false);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    // Fetch all orders and sort by timestamp\r\n    const fetchedOrders = await getOrders();\r\n    setOrders(fetchedOrders);\r\n\r\n    // Fetch other data (Medicines, Suppliers, Sales, Messages)\r\n    setMessages(await fetchMessages());\r\n\r\n    const fetchedMedicines = await getMedicines();\r\n\r\n    // Sort medicines by expiry_date (ascending)\r\n    const sortedMedicines = fetchedMedicines.sort((a, b) => {\r\n      const dateA = new Date(a.expiry_date);\r\n      const dateB = new Date(b.expiry_date);\r\n      return dateA - dateB; // Ascending order: closest expiry date first\r\n    });\r\n\r\n    // Set the top 10 medicines that are expiring soon\r\n    setMedicines(sortedMedicines.slice(0, 10));\r\n  };\r\n\r\n  const handleOrderStatusUpdate = async (orderId, newStatus) => {\r\n    try {\r\n      // Update order status in Firestore\r\n      await updateOrderStatusInFirestore(orderId, newStatus);\r\n\r\n      // Update the local state to reflect the changes\r\n      setOrders((prevOrders) =>\r\n        prevOrders.map((order) =>\r\n          order.id === orderId ? { ...order, status: newStatus } : order\r\n        )\r\n      );\r\n\r\n      // Optionally, you can reorder the list after status update if necessary\r\n      const sortedOrders = [...orders].sort((a, b) => {\r\n        const timestampA = new Date(a.timestamp);\r\n        const timestampB = new Date(b.timestamp);\r\n        return timestampB - timestampA; // Sorting in descending order\r\n      });\r\n      setOrders(sortedOrders); // Update the state with sorted orders\r\n    } catch (error) {\r\n      console.error(\"Error updating order status:\", error);\r\n    }\r\n  };\r\n\r\n  // Open edit dialog with product data\r\n  const openEditDialog = (product) => {\r\n    setSelectedProduct(product);\r\n    setFormValues({\r\n      title: product.title,\r\n      description: product.description,\r\n      price: product.price,\r\n      expiry_date: product.expiry_date,\r\n      quantity: product.quantity,\r\n      type: product.type,\r\n      mfg_date: product.mfg_date,\r\n    });\r\n  };\r\n\r\n  // Submit updated data to Firebase\r\n  const handleUpdateSubmit = async () => {\r\n    if (selectedProduct) {\r\n      const productsRef = collection(db, \"products\");\r\n      const querySnapshot = await getDocs(productsRef);\r\n\r\n      // Find the document with the matching `id` field\r\n      const productDoc = querySnapshot.docs.find(\r\n        (doc) => doc.data().id === selectedProduct.id\r\n      );\r\n\r\n      if (productDoc) {\r\n        const productRef = doc(db, \"products\", productDoc.id); // Get reference to the specific document\r\n\r\n        try {\r\n          await updateDoc(productRef, formValues);\r\n          console.log(\"Product updated successfully!\");\r\n          setSelectedProduct(null); // Close the dialog\r\n          window.location.reload();\r\n        } catch (error) {\r\n          console.error(\"Error updating product:\", error);\r\n        }\r\n      } else {\r\n        console.error(\"Product with the specified id not found.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle response button click (for either respond or update)\r\n  const handleResponseClick = (reviewId) => {\r\n    const review = reviews.find((rev) => rev.id === reviewId);\r\n    setSelectedReview(review); // Set selected review to open dialog for response\r\n    setResponseMessage(review.responded === \"pending\" ? \"\" : review.responded);\r\n  };\r\n\r\n  // Handle submitting the response\r\n  const handleResponseSubmit = async () => {\r\n    if (selectedReview) {\r\n      const reviewRef = doc(db, \"reviews\", selectedReview.id);\r\n\r\n      try {\r\n        if (responseMessage.trim() !== \"\") {\r\n          // Update response if message exists\r\n          await updateDoc(reviewRef, { responded: responseMessage });\r\n          console.log(\"Response updated successfully!\");\r\n        } else {\r\n          // Create the 'responded' attribute if it's not present\r\n          await updateDoc(reviewRef, { responded: \"No response given yet.\" });\r\n          console.log(\"No response was provided yet.\");\r\n        }\r\n\r\n        // Close the dialog after the update\r\n        setSelectedReview(null);\r\n        setResponseMessage(\"\");\r\n        // Refresh reviews list\r\n        setReviews((prevReviews) => {\r\n          return prevReviews.map((rev) =>\r\n            rev.id === selectedReview.id\r\n              ? { ...rev, responded: responseMessage }\r\n              : rev\r\n          );\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error updating response:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n\r\n    <Navbar />\r\n    \r\n      <section className=\"admin-section px-8 py-12\">\r\n        <h1 className=\"text-3xl font-bold text-gray-700 mb-8 mt-10 text-center\">\r\n          Admin Dashboard\r\n        </h1>\r\n\r\n        \r\n\r\n        {/* Tabs for Admin Sections */}\r\n        <div className=\"flex justify-center space-x-4 mb-8\">\r\n  {[\r\n    \"Sales\",\r\n    \"All Orders\",\r\n    \"Pending Orders\",\r\n    \"Shipped Orders\",\r\n    \"Delivered Orders\",\r\n    \"Queries\",\r\n    \"Products\",\r\n    \"Expiring Soon\",\r\n    \"Contact\"\r\n  ].map((tab) => (\r\n    <button\r\n      key={tab}\r\n      className={`px-4 py-2 rounded ${\r\n        selectedTab === tab ? \"bg-blue-500 text-white\" : \"bg-gray-200\"\r\n      }`}\r\n      onClick={() => setSelectedTab(tab)}\r\n    >\r\n      {tab}\r\n    </button>\r\n  ))}\r\n</div>\r\n\r\n\r\n        {selectedTab === \"Sales\" && (\r\n          <div>\r\n          <h3>Sales Data of Last 6 Months</h3>\r\n          <ResponsiveContainer width=\"100%\" height={400}>\r\n            <BarChart data={salesData}>\r\n              <CartesianGrid strokeDasharray=\"2 2\" />\r\n              <XAxis dataKey=\"month\" />\r\n              <YAxis />\r\n              <Tooltip \r\n              formatter={(value) => [`Rs. ${value.toFixed(2)}`, 'Sales']}\r\n              />\r\n              <Legend />\r\n              <Bar dataKey=\"sales\" fill=\"#3c82f6\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        )}\r\n\r\n        {selectedTab === \"All Orders\" && (\r\n          <section>\r\n            <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\r\n              All Orders\r\n            </h2>\r\n            <table className=\"table-auto w-full text-left border-collapse\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"px-4 py-2 border\">Order ID</th>\r\n                  <th className=\"px-4 py-2 border\">Bill</th>\r\n                  <th className=\"px-4 py-2 border\">Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {orders.map((order) => (\r\n                  <tr key={order.id}>\r\n                    <button\r\n                      onClick={() => setSelectedOrder(order)}\r\n                      className=\"text-blue-500 underline\"\r\n                    >\r\n                      {order.id}\r\n                    </button>\r\n                    <td className=\"px-4 py-2 border\">\r\n                      Rs. {order.total_price}\r\n                    </td>\r\n                    <td className=\"px-4 py-2 border\">\r\n                      <select\r\n                        onChange={(e) =>\r\n                          handleOrderStatusUpdate(order.id, e.target.value)\r\n                        }\r\n                        defaultValue={order.status}\r\n                        className=\"border p-1 rounded\"\r\n                      >\r\n                        <option value=\"Pending\">Pending</option>\r\n                        <option value=\"Shipped\">Shipped</option>\r\n                        <option value=\"Delivered\">Delivered</option>\r\n                      </select>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n            {/* Order Details Dialog */}\r\n            {selectedOrder && (\r\n              <div className=\"fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center\">\r\n                <div className=\"bg-white p-8 rounded shadow-lg w-1/2 max-w-lg\">\r\n                  <h2 className=\"text-2xl font-bold mb-4\">Order Details</h2>\r\n                  <p>\r\n                    <strong>Date and Time:</strong>{\" \"}\r\n                    {formatTimestamp(selectedOrder.timestamp)}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Order ID:</strong> {selectedOrder.id}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Current Status:</strong> {selectedOrder.status}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Delivery Type:</strong>{\" \"}\r\n                    {selectedOrder.delivery_timing}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Delivery Timing:</strong>{\" \"}\r\n                    {selectedOrder.delivery_time_range}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Payment Type:</strong> {selectedOrder.payment_type}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Recurring Option:</strong>{\" \"}\r\n                    {selectedOrder.recurring_option}\r\n                  </p>\r\n\r\n                  {/* Items Table */}\r\n                  <h3 className=\"text-xl font-semibold mt-6 mb-2\">\r\n                    Items Ordered\r\n                  </h3>\r\n                  <table className=\"table-auto w-full text-left border-collapse mb-4\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th className=\"px-4 py-2 border\">Item Name</th>\r\n                        <th className=\"px-4 py-2 border\">Quantity</th>\r\n                        <th className=\"px-4 py-2 border\">Price</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {selectedOrder.items.map((item, index) => (\r\n                        <tr key={index}>\r\n                          <td className=\"px-4 py-2 border\">{item.name}</td>\r\n                          <td className=\"px-4 py-2 border\">{item.quantity}</td>\r\n                          <td className=\"px-4 py-2 border\">\r\n                            ${item.total_price.toFixed(2)}\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n\r\n                  {/* Bill Summary */}\r\n                  <div className=\"mt-4\">\r\n                    <p>\r\n                      <strong>Subtotal:</strong> Rs.{\" \"}\r\n                      {selectedOrder.total_price.toFixed(2)}\r\n                    </p>\r\n                    <p>\r\n                      <strong>GST:</strong> Rs. {selectedOrder.gst.toFixed(2)}\r\n                    </p>\r\n                    <p className=\"text-lg font-semibold\">\r\n                      <strong>Total Bill:</strong> Rs.{\" \"}\r\n                      {(selectedOrder.total_price + selectedOrder.gst).toFixed(\r\n                        2\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n\r\n                  {/* Close Button */}\r\n                  <button\r\n                    onClick={() => setSelectedOrder(null)}\r\n                    className=\"mt-6 bg-blue-500 text-white px-4 py-2 rounded\"\r\n                  >\r\n                    Close\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </section>\r\n        )}\r\n\r\n        {selectedTab === \"Pending Orders\" && (\r\n          <section>\r\n            <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\r\n              Pending Orders\r\n            </h2>\r\n            <table className=\"table-auto w-full text-left border-collapse\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"px-4 py-2 border\">Order ID</th>\r\n                  <th className=\"px-4 py-2 border\">Bill</th>\r\n                  <th className=\"px-4 py-2 border\">Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {orders\r\n                  .filter((order) => order.status === \"Pending\")\r\n                  .map((order) => (\r\n                    <tr key={order.id}>\r\n                      <button\r\n                        onClick={() => setSelectedOrder(order)}\r\n                        className=\"text-blue-500 underline\"\r\n                      >\r\n                        {order.id}\r\n                      </button>\r\n                      <td className=\"px-4 py-2 border\">{order.total_price}</td>\r\n                      <td className=\"px-4 py-2 border\">\r\n                        <select\r\n                          onChange={(e) =>\r\n                            handleOrderStatusUpdate(order.id, e.target.value)\r\n                          }\r\n                          defaultValue={order.status}\r\n                          className=\"border p-1 rounded\"\r\n                        >\r\n                          <option value=\"Pending\">Pending</option>\r\n                          <option value=\"Shipped\">Shipped</option>\r\n                          <option value=\"Delivered\">Delivered</option>\r\n                        </select>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n            {/* Order Details Dialog */}\r\n            {selectedOrder && (\r\n              <div className=\"fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center\">\r\n                <div className=\"bg-white p-8 rounded shadow-lg w-1/2 max-w-lg\">\r\n                  <h2 className=\"text-2xl font-bold mb-4\">Order Details</h2>\r\n                  <p>\r\n                    <strong>Date and Time:</strong>{\" \"}\r\n                    {formatTimestamp(selectedOrder.timestamp)}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Order ID:</strong> {selectedOrder.id}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Current Status:</strong> {selectedOrder.status}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Delivery Type:</strong>{\" \"}\r\n                    {selectedOrder.delivery_timing}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Delivery Timing:</strong>{\" \"}\r\n                    {selectedOrder.delivery_time_range}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Payment Type:</strong> {selectedOrder.payment_type}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Recurring Option:</strong>{\" \"}\r\n                    {selectedOrder.recurring_option}\r\n                  </p>\r\n\r\n                  {/* Items Table */}\r\n                  <h3 className=\"text-xl font-semibold mt-6 mb-2\">\r\n                    Items Ordered\r\n                  </h3>\r\n                  <table className=\"table-auto w-full text-left border-collapse mb-4\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th className=\"px-4 py-2 border\">Item Name</th>\r\n                        <th className=\"px-4 py-2 border\">Quantity</th>\r\n                        <th className=\"px-4 py-2 border\">Price</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {selectedOrder.items.map((item, index) => (\r\n                        <tr key={index}>\r\n                          <td className=\"px-4 py-2 border\">{item.name}</td>\r\n                          <td className=\"px-4 py-2 border\">{item.quantity}</td>\r\n                          <td className=\"px-4 py-2 border\">\r\n                            ${item.total_price.toFixed(2)}\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n\r\n                  {/* Bill Summary */}\r\n                  <div className=\"mt-4\">\r\n                    <p>\r\n                      <strong>Subtotal:</strong> Rs.{\" \"}\r\n                      {selectedOrder.total_price.toFixed(2)}\r\n                    </p>\r\n                    <p>\r\n                      <strong>GST:</strong> Rs. {selectedOrder.gst.toFixed(2)}\r\n                    </p>\r\n                    <p className=\"text-lg font-semibold\">\r\n                      <strong>Total Bill:</strong> Rs.{\" \"}\r\n                      {(selectedOrder.total_price + selectedOrder.gst).toFixed(\r\n                        2\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n\r\n                  {/* Close Button */}\r\n                  <button\r\n                    onClick={() => setSelectedOrder(null)}\r\n                    className=\"mt-6 bg-blue-500 text-white px-4 py-2 rounded\"\r\n                  >\r\n                    Close\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </section>\r\n        )}\r\n\r\n        {selectedTab === \"Shipped Orders\" && (\r\n          <section>\r\n            <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\r\n              Dispatched Orders\r\n            </h2>\r\n            <table className=\"table-auto w-full text-left border-collapse\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"px-4 py-2 border\">Order ID</th>\r\n                  <th className=\"px-4 py-2 border\">Bill</th>\r\n                  <th className=\"px-4 py-2 border\">Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {orders\r\n                  .filter((order) => order.status === \"Shipped\")\r\n                  .map((order) => (\r\n                    <tr key={order.id}>\r\n                      <button\r\n                        onClick={() => setSelectedOrder(order)}\r\n                        className=\"text-blue-500 underline\"\r\n                      >\r\n                        {order.id}\r\n                      </button>\r\n                      <td className=\"px-4 py-2 border\">{order.total_price}</td>\r\n                      <td className=\"px-4 py-2 border\">\r\n                        <select\r\n                          onChange={(e) =>\r\n                            handleOrderStatusUpdate(order.id, e.target.value)\r\n                          }\r\n                          defaultValue={order.status}\r\n                          className=\"border p-1 rounded\"\r\n                        >\r\n                          <option value=\"Pending\">Pending</option>\r\n                          <option value=\"Shipped\">Shipped</option>\r\n                          <option value=\"Delivered\">Delivered</option>\r\n                        </select>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n            {/* Order Details Dialog */}\r\n            {selectedOrder && (\r\n              <div className=\"fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center\">\r\n                <div className=\"bg-white p-8 rounded shadow-lg w-1/2 max-w-lg\">\r\n                  <h2 className=\"text-2xl font-bold mb-4\">Order Details</h2>\r\n                  <p>\r\n                    <strong>Date and Time:</strong>{\" \"}\r\n                    {formatTimestamp(selectedOrder.timestamp)}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Order ID:</strong> {selectedOrder.id}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Current Status:</strong> {selectedOrder.status}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Delivery Type:</strong>{\" \"}\r\n                    {selectedOrder.delivery_timing}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Delivery Timing:</strong>{\" \"}\r\n                    {selectedOrder.delivery_time_range}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Payment Type:</strong> {selectedOrder.payment_type}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Recurring Option:</strong>{\" \"}\r\n                    {selectedOrder.recurring_option}\r\n                  </p>\r\n\r\n                  {/* Items Table */}\r\n                  <h3 className=\"text-xl font-semibold mt-6 mb-2\">\r\n                    Items Ordered\r\n                  </h3>\r\n                  <table className=\"table-auto w-full text-left border-collapse mb-4\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th className=\"px-4 py-2 border\">Item Name</th>\r\n                        <th className=\"px-4 py-2 border\">Quantity</th>\r\n                        <th className=\"px-4 py-2 border\">Price</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {selectedOrder.items.map((item, index) => (\r\n                        <tr key={index}>\r\n                          <td className=\"px-4 py-2 border\">{item.name}</td>\r\n                          <td className=\"px-4 py-2 border\">{item.quantity}</td>\r\n                          <td className=\"px-4 py-2 border\">\r\n                            ${item.total_price.toFixed(2)}\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n\r\n                  {/* Bill Summary */}\r\n                  <div className=\"mt-4\">\r\n                    <p>\r\n                      <strong>Subtotal:</strong> Rs.{\" \"}\r\n                      {selectedOrder.total_price.toFixed(2)}\r\n                    </p>\r\n                    <p>\r\n                      <strong>GST:</strong> Rs. {selectedOrder.gst.toFixed(2)}\r\n                    </p>\r\n                    <p className=\"text-lg font-semibold\">\r\n                      <strong>Total Bill:</strong> Rs.{\" \"}\r\n                      {(selectedOrder.total_price + selectedOrder.gst).toFixed(\r\n                        2\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n\r\n                  {/* Close Button */}\r\n                  <button\r\n                    onClick={() => setSelectedOrder(null)}\r\n                    className=\"mt-6 bg-blue-500 text-white px-4 py-2 rounded\"\r\n                  >\r\n                    Close\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </section>\r\n        )}\r\n\r\n        {selectedTab === \"Delivered Orders\" && (\r\n          <section>\r\n            <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\r\n              Delivered Orders\r\n            </h2>\r\n            <table className=\"table-auto w-full text-left border-collapse\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"px-4 py-2 border\">Order ID</th>\r\n                  <th className=\"px-4 py-2 border\">Bill</th>\r\n                  <th className=\"px-4 py-2 border\">Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {orders\r\n                  .filter((order) => order.status === \"Delivered\")\r\n                  .map((order) => (\r\n                    <tr key={order.id}>\r\n                      <button\r\n                        onClick={() => setSelectedOrder(order)}\r\n                        className=\"text-blue-500 underline\"\r\n                      >\r\n                        {order.id}\r\n                      </button>\r\n                      <td className=\"px-4 py-2 border\">\r\n                        Rs. {order.total_price}\r\n                      </td>\r\n                      <td className=\"px-4 py-2 border\">\r\n                        <select\r\n                          onChange={(e) =>\r\n                            handleOrderStatusUpdate(order.id, e.target.value)\r\n                          }\r\n                          defaultValue={order.status}\r\n                          className=\"border p-1 rounded\"\r\n                        >\r\n                          <option value=\"Pending\">Pending</option>\r\n                          <option value=\"Shipped\">Shipped</option>\r\n                          <option value=\"Delivered\">Delivered</option>\r\n                        </select>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n            {/* Order Details Dialog */}\r\n            {selectedOrder && (\r\n              <div className=\"fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center\">\r\n                <div className=\"bg-white p-8 rounded shadow-lg w-1/2 max-w-lg\">\r\n                  <h2 className=\"text-2xl font-bold mb-4\">Order Details</h2>\r\n                  <p>\r\n                    <strong>Date and Time:</strong>{\" \"}\r\n                    {formatTimestamp(selectedOrder.timestamp)}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Order ID:</strong> {selectedOrder.id}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Current Status:</strong> {selectedOrder.status}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Delivery Type:</strong>{\" \"}\r\n                    {selectedOrder.delivery_timing}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Delivery Timing:</strong>{\" \"}\r\n                    {selectedOrder.delivery_time_range}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Payment Type:</strong> {selectedOrder.payment_type}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Recurring Option:</strong>{\" \"}\r\n                    {selectedOrder.recurring_option}\r\n                  </p>\r\n\r\n                  {/* Items Table */}\r\n                  <h3 className=\"text-xl font-semibold mt-6 mb-2\">\r\n                    Items Ordered\r\n                  </h3>\r\n                  <table className=\"table-auto w-full text-left border-collapse mb-4\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th className=\"px-4 py-2 border\">Item Name</th>\r\n                        <th className=\"px-4 py-2 border\">Quantity</th>\r\n                        <th className=\"px-4 py-2 border\">Price</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {selectedOrder.items.map((item, index) => (\r\n                        <tr key={index}>\r\n                          <td className=\"px-4 py-2 border\">{item.name}</td>\r\n                          <td className=\"px-4 py-2 border\">{item.quantity}</td>\r\n                          <td className=\"px-4 py-2 border\">\r\n                            ${item.total_price.toFixed(2)}\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n\r\n                  {/* Bill Summary */}\r\n                  <div className=\"mt-4\">\r\n                    <p>\r\n                      <strong>Subtotal:</strong> Rs.{\" \"}\r\n                      {selectedOrder.total_price.toFixed(2)}\r\n                    </p>\r\n                    <p>\r\n                      <strong>GST:</strong> Rs. {selectedOrder.gst.toFixed(2)}\r\n                    </p>\r\n                    <p className=\"text-lg font-semibold\">\r\n                      <strong>Total Bill:</strong> Rs.{\" \"}\r\n                      {(selectedOrder.total_price + selectedOrder.gst).toFixed(\r\n                        2\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n\r\n                  {/* Close Button */}\r\n                  <button\r\n                    onClick={() => setSelectedOrder(null)}\r\n                    className=\"mt-6 bg-blue-500 text-white px-4 py-2 rounded\"\r\n                  >\r\n                    Close\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </section>\r\n        )}\r\n\r\n        {selectedTab === \"Queries\" && (\r\n          <section>\r\n            <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\r\n              Messages\r\n            </h2>\r\n\r\n            {/* Reviews Table */}\r\n            <table className=\"table-auto w-full text-left border-collapse\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"px-4 py-2 border\">Username</th>\r\n                  <th className=\"px-4 py-2 border\">Stars</th>\r\n                  <th className=\"px-4 py-2 border\">Review</th>\r\n                  <th className=\"px-4 py-2 border\">Responded</th>\r\n                  <th className=\"px-4 py-2 border\">Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {reviews.length > 0 ? (\r\n                  reviews.map((review, index) => (\r\n                    <tr key={index}>\r\n                      <td className=\"px-4 py-2 border\">{review.username}</td>\r\n                      <td className=\"px-4 py-2 border\">{review.rating}</td>\r\n                      <td className=\"px-4 py-2 border\">{review.review}</td>\r\n                      <td className=\"px-4 py-2 border\">\r\n                        {review.responded === \"pending\"\r\n                          ? \"Pending\"\r\n                          : \"Responded\"}\r\n                      </td>\r\n                      <td className=\"px-4 py-2 border\">\r\n                        <button\r\n                          onClick={() => handleResponseClick(review.id)}\r\n                          className=\"bg-blue-500 text-white px-4 py-2 rounded\"\r\n                        >\r\n                          {review.responded === \"pending\"\r\n                            ? \"Respond\"\r\n                            : \"Update Response\"}\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n                ) : (\r\n                  <tr>\r\n                    <td colSpan=\"5\" className=\"px-4 py-2 border text-center\">\r\n                      No reviews found\r\n                    </td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </section>\r\n        )}\r\n\r\n        {/* Dialog for responding to a review */}\r\n        {selectedReview && (\r\n          <div className=\"fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center\">\r\n            <div className=\"bg-white p-8 rounded shadow-lg w-1/2 max-w-lg\">\r\n              <h2 className=\"text-2xl font-bold mb-4\">Respond to Review</h2>\r\n\r\n              <p>\r\n                <strong>Username:</strong> {selectedReview.username}\r\n              </p>\r\n              <p>\r\n                <strong>Review:</strong> {selectedReview.review}\r\n              </p>\r\n\r\n              {/* Textbox to edit or add response */}\r\n              <textarea\r\n                value={responseMessage}\r\n                onChange={(e) => setResponseMessage(e.target.value)}\r\n                placeholder=\"Write your response here\"\r\n                className=\"w-full p-2 border mt-4\"\r\n                rows=\"4\"\r\n              />\r\n\r\n              <div className=\"mt-4 flex justify-end\">\r\n                <button\r\n                  onClick={handleResponseSubmit}\r\n                  className=\"bg-blue-500 text-white px-6 py-2 rounded\"\r\n                >\r\n                  Submit Response\r\n                </button>\r\n                <button\r\n                  onClick={() => setSelectedReview(null)}\r\n                  className=\"ml-2 bg-gray-500 text-white px-6 py-2 rounded\"\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {selectedTab === \"Products\" && (\r\n          <div>\r\n            {/* Products Table */}\r\n            <section>\r\n              <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\r\n                Products\r\n              </h2>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search by product name\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                className=\"border px-4 py-2 mb-4\"\r\n              />\r\n\r\n              <table className=\"table-auto w-full text-left border-collapse\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"px-4 py-2 border\">Title</th>\r\n                    <th className=\"px-4 py-2 border\">Expiry Date</th>\r\n                    <th className=\"px-4 py-2 border\">Price</th>\r\n                    <th className=\"px-4 py-2 border\">Quantity</th>\r\n                    <th className=\"px-4 py-2 border\">MFG Date</th>\r\n                    <th className=\"px-4 py-2 border\">Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {products\r\n                    .filter((product) =>\r\n                      product.title\r\n                        .toLowerCase()\r\n                        .includes(searchQuery.toLowerCase())\r\n                    )\r\n                    .map((product) => (\r\n                      <tr key={product.id}>\r\n                        <td className=\"px-4 py-2 border\">{product.title}</td>\r\n                        <td className=\"px-4 py-2 border\">\r\n                          {product.expiry_date}\r\n                        </td>\r\n                        <td className=\"px-4 py-2 border\">{product.price}</td>\r\n                        <td className=\"px-4 py-2 border\">{product.quantity}</td>\r\n                        <td className=\"px-4 py-2 border\">{product.mfg_date}</td>\r\n                        <td className=\"px-4 py-2 border\">\r\n                          <button\r\n                            onClick={() => openEditDialog(product)}\r\n                            className=\"bg-blue-500 text-white px-4 py-2 rounded\"\r\n                          >\r\n                            Update\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </table>\r\n            </section>\r\n\r\n            {/* Update Product Dialog */}\r\n            {selectedProduct && (\r\n              <div className=\"fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center\">\r\n                <div className=\"bg-white p-8 rounded shadow-lg w-1/2 max-w-lg\">\r\n                  <h2 className=\"text-2xl font-bold mb-4\">\r\n                    Update Product Details\r\n                  </h2>\r\n\r\n                  {/* Form Fields */}\r\n                  <div className=\"mb-4\">\r\n                    <label className=\"block font-semibold mb-2\">Title</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={formValues.title}\r\n                      onChange={(e) =>\r\n                        setFormValues({ ...formValues, title: e.target.value })\r\n                      }\r\n                      className=\"w-full px-4 py-2 border rounded\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"mb-4\">\r\n                    <label className=\"block font-semibold mb-2\">\r\n                      Description\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={formValues.description}\r\n                      onChange={(e) =>\r\n                        setFormValues({\r\n                          ...formValues,\r\n                          description: e.target.value,\r\n                        })\r\n                      }\r\n                      className=\"w-full px-4 py-2 border rounded\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"mb-4\">\r\n                    <label className=\"block font-semibold mb-2\">Price</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={formValues.price}\r\n                      onChange={(e) =>\r\n                        setFormValues({ ...formValues, price: e.target.value })\r\n                      }\r\n                      className=\"w-full px-4 py-2 border rounded\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"mb-4\">\r\n                    <label className=\"block font-semibold mb-2\">\r\n                      Expiry Date\r\n                    </label>\r\n                    <input\r\n                      type=\"date\"\r\n                      value={formValues.expiry_date}\r\n                      onChange={(e) =>\r\n                        setFormValues({\r\n                          ...formValues,\r\n                          expiry_date: e.target.value,\r\n                        })\r\n                      }\r\n                      className=\"w-full px-4 py-2 border rounded\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"mb-4\">\r\n                    <label className=\"block font-semibold mb-2\">Quantity</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={formValues.quantity}\r\n                      onChange={(e) =>\r\n                        setFormValues({\r\n                          ...formValues,\r\n                          quantity: e.target.value,\r\n                        })\r\n                      }\r\n                      className=\"w-full px-4 py-2 border rounded\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"mb-4\">\r\n                    <label className=\"block font-semibold mb-2\">Type</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={formValues.type}\r\n                      onChange={(e) =>\r\n                        setFormValues({ ...formValues, type: e.target.value })\r\n                      }\r\n                      className=\"w-full px-4 py-2 border rounded\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"mb-4\">\r\n                    <label className=\"block font-semibold mb-2\">\r\n                      Manufacturing Date\r\n                    </label>\r\n                    <input\r\n                      type=\"date\"\r\n                      value={formValues.mfg_date}\r\n                      onChange={(e) =>\r\n                        setFormValues({\r\n                          ...formValues,\r\n                          mfg_date: e.target.value,\r\n                        })\r\n                      }\r\n                      className=\"w-full px-4 py-2 border rounded\"\r\n                    />\r\n                  </div>\r\n\r\n                  {/* Submit Button */}\r\n                  <button\r\n                    onClick={handleUpdateSubmit}\r\n                    className=\"mt-6 bg-blue-500 text-white px-4 py-2 rounded\"\r\n                  >\r\n                    Submit\r\n                  </button>\r\n\r\n                  {/* Close Button */}\r\n                  <button\r\n                    onClick={() => setSelectedProduct(null)}\r\n                    className=\"mt-4 bg-gray-400 text-white px-4 py-2 rounded\"\r\n                  >\r\n                    Close\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n        {selectedTab === \"Expiring Soon\" && (\r\n        <section className=\"mb-12\">\r\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\r\n          Expiring Soon\r\n        </h2>\r\n        <table className=\"table-auto w-full text-left border-collapse\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"px-4 py-2 border\">Medicine</th>\r\n              <th className=\"px-4 py-2 border\">Expiration Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {medicines.map((med) => (\r\n              <tr key={med.id}>\r\n                <td className=\"px-4 py-2 border\">{med.title}</td>\r\n                <td className=\"px-4 py-2 border\">{med.expiry_date}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n        )}\r\n        {selectedTab === \"Contact\" && (\r\n          <div className=\"p-6\">\r\n          <h2 className=\"text-3xl font-bold text-center text-gray-700 mb-6\">Contact Messages</h2>\r\n          <table className=\"min-w-full bg-white border border-gray-300 shadow-md rounded-lg\">\r\n              <thead>\r\n                  <tr className=\"bg-gray-100\">\r\n                      <th className=\"py-2 px-4 border-b\">Full Name</th>\r\n                      <th className=\"py-2 px-4 border-b\">Email</th>\r\n                      <th className=\"py-2 px-4 border-b\">Phone Number</th>\r\n                      <th className=\"py-2 px-4 border-b\">Message</th>\r\n                      <th className=\"py-2 px-4 border-b\">Date Submitted</th>\r\n                  </tr>\r\n              </thead>\r\n              <tbody>\r\n                  {contactData.length === 0 ? (\r\n                      <tr>\r\n                          <td colSpan=\"5\" className=\"text-center py-4\">No contact messages available</td>\r\n                      </tr>\r\n                  ) : (\r\n                      contactData.map((contact) => (\r\n                          <tr key={contact.id}>\r\n                              <td className=\"py-2 px-4 border-b\">{contact.fullName}</td>\r\n                              <td className=\"py-2 px-4 border-b\">{contact.email}</td>\r\n                              <td className=\"py-2 px-4 border-b\">{contact.phoneNumber}</td>\r\n                              <td className=\"py-2 px-4 border-b\">{contact.message}</td>\r\n                              <td className=\"py-2 px-4 border-b\">\r\n                                  {/* Convert the timestamp to a readable format */}\r\n                                  {new Date(contact.createdAt.seconds * 1000).toLocaleDateString('en-US')}\r\n                              </td>\r\n                          </tr>\r\n                      ))\r\n                  )}\r\n              </tbody>\r\n          </table>\r\n      </div>\r\n        )}\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","E:\\Pr\\Web D\\MedSync\\src\\screens\\OrdersPage.js",["204","205","206","207","208","209","210","211","212","213","214","215"],"import React, { useState, useEffect } from \"react\";\r\nimport useFirebase from \"../hooks/useFirebase\";\r\nimport \"./admin.css\";\r\nimport Navbar from '../components/Navbar/Navbar'\r\n\r\nconst formatTimestamp = (timestamp) => {\r\n  const date = new Date(timestamp.seconds * 1000); // Convert seconds to milliseconds\r\n  return date.toLocaleDateString(\"en-US\", {\r\n    year: \"numeric\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n  });\r\n};\r\n\r\nconst OrdersPage = () => {\r\n  const {\r\n    user,\r\n    isLoading,\r\n    getMedicines,\r\n    getOrders,\r\n    getSuppliers,\r\n    getSales,\r\n    getMessages,\r\n  } = useFirebase();\r\n  const [medicines, setMedicines] = useState([]);\r\n  const [orders, setOrders] = useState([]);\r\n  const [suppliers, setSuppliers] = useState([]);\r\n  const [sales, setSales] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [selectedTab, setSelectedTab] = useState(\"Order Status\");\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchOrders();\r\n    }\r\n  }, [user]);\r\n\r\n  const fetchOrders = async () => {\r\n    const allOrders = await getOrders();\r\n    // Filter orders to show only those belonging to the current user\r\n    const userOrders = allOrders.filter((order) => order.user_id === user.uid);\r\n    setOrders(userOrders);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    setMedicines(await getMedicines());\r\n    setOrders(await getOrders());\r\n    setSuppliers(await getSuppliers());\r\n    setSales(await getSales());\r\n    setMessages(await getMessages()); // Fetch messages for the new tab\r\n  };\r\n\r\n  const handleOrderStatusUpdate = (orderId, newStatus) => {\r\n    console.log(`Updating order ${orderId} to ${newStatus}`);\r\n  };\r\n\r\n  const handleQuantityUpdate = (id, newQuantity) => {\r\n    console.log(`Updating medicine ${id} to quantity ${newQuantity}`);\r\n  };\r\n\r\n  const handleResponseSubmit = (messageId, response) => {\r\n    console.log(`Response to message ${messageId}: ${response}`);\r\n    // You can add further code here to send this response to the backend\r\n  };\r\n\r\n  console.log(\"Orders :- \", orders);\r\n\r\n  return (\r\n    <>\r\n    <Navbar />\r\n    <section className=\"admin-section px-8 py-12\">\r\n            <h1 className=\"text-3xl font-bold text-gray-700 mb-8 mt-10\">Your Orders</h1>\r\n            \r\n            <table className=\"table-auto w-full text-left border-collapse\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"px-4 py-2 border\">Order ID</th>\r\n                        <th className=\"px-4 py-2 border\">Date and Time</th>\r\n                        <th className=\"px-4 py-2 border\">Bill</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {orders.map(order => (\r\n                        <tr key={order.id}>\r\n                            <td className=\"px-4 py-2 border\">\r\n                                <button \r\n                                    onClick={() => setSelectedOrder(order)} \r\n                                    className=\"text-blue-500 underline\">\r\n                                    {order.id}\r\n                                </button>\r\n                            </td>\r\n                            \r\n                            <td className=\"px-4 py-2 border\">{formatTimestamp(order.timestamp)}</td>\r\n                            <td className=\"px-4 py-2 border\">Rs. {order.total_price.toFixed(2)}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* Order Details Dialog */}\r\n            {selectedOrder && (\r\n                <div className=\"fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center\">\r\n                    <div className=\"bg-white p-8 rounded shadow-lg w-1/2 max-w-lg\">\r\n                        <h2 className=\"text-2xl font-bold mb-4\">Order Details</h2>\r\n                        <p><strong>Date and Time:</strong> {formatTimestamp(selectedOrder.timestamp)}</p>\r\n                        <p><strong>Order ID:</strong> {selectedOrder.id}</p>\r\n                        <p><strong>Current Status:</strong> {selectedOrder.status}</p>\r\n                        <p><strong>Delivery Type:</strong> {selectedOrder.delivery_timing}</p>\r\n                        <p><strong>Delivery Timing:</strong> {selectedOrder.delivery_time_range}</p>\r\n                        <p><strong>Payment Type:</strong> {selectedOrder.payment_type}</p>\r\n                        <p><strong>Recurring Option:</strong> {selectedOrder.recurring_option}</p>\r\n\r\n                        {/* Items Table */}\r\n                        <h3 className=\"text-xl font-semibold mt-6 mb-2\">Items Ordered</h3>\r\n                        <table className=\"table-auto w-full text-left border-collapse mb-4\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"px-4 py-2 border\">Item Name</th>\r\n                                    <th className=\"px-4 py-2 border\">Quantity</th>\r\n                                    <th className=\"px-4 py-2 border\">Price</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {selectedOrder.items.map((item, index) => (\r\n                                    <tr key={index}>\r\n                                        <td className=\"px-4 py-2 border\">{item.name}</td>\r\n                                        <td className=\"px-4 py-2 border\">{item.quantity}</td>\r\n                                        <td className=\"px-4 py-2 border\">${item.total_price.toFixed(2)}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        {/* Bill Summary */}\r\n                        <div className=\"mt-4\">\r\n                            <p><strong>Subtotal:</strong> Rs. {selectedOrder.total_price.toFixed(2)}</p>\r\n                            <p><strong>GST:</strong> Rs. {selectedOrder.gst.toFixed(2)}</p>\r\n                            <p className=\"text-lg font-semibold\"><strong>Total Bill:</strong> Rs. {(selectedOrder.total_price + selectedOrder.gst).toFixed(2)}</p>\r\n                        </div>\r\n\r\n                        {/* Close Button */}\r\n                        <button \r\n                            onClick={() => setSelectedOrder(null)} \r\n                            className=\"mt-6 bg-blue-500 text-white px-4 py-2 rounded\">\r\n                            Close\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </section>\r\n        </>\r\n  );\r\n};\r\n\r\nexport default OrdersPage;\r\n","E:\\Pr\\Web D\\MedSync\\src\\components\\Navbar\\Navbar.js",["216","217"],"import React, { useState, useEffect } from \"react\";\r\nimport { HiMenuAlt3 } from \"react-icons/hi\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AuthorizeUser from \"./AuthorizeUser\";\r\nimport AuthorizeUserMobile from \"./AuthorizeUserMobile\";\r\nimport NavBrand from \"./NavBrand\";\r\nimport useAuth from \"../../hooks/useAuth\";\r\n\r\nconst menu = [\r\n  { id: 1, text: \"Home\", to: \"/\" },\r\n  { id: 2, text: \"Products\", to: \"/products\" },\r\n  { id: 3, text: \"Contact\", to: \"/contact\" },\r\n  { id: 4, text: \"Orders\", to: \"/userOrders\" },\r\n];\r\n\r\nconst Navbar = () => {\r\n  const [changeHeader, setChangeHeader] = useState(false);\r\n  const [mobileNav, setMobileNav] = useState(false);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [isAuthorized, setIsAuthorized] = useState(true); // Track authorization status\r\n\r\n  const allowedEmails = [\r\n    \"b22es006@iitj.ac.in\",\r\n    \"b22cs101@iitj.ac.in\",\r\n    \"b22cs014@iitj.ac.in\",\r\n  ];\r\n\r\n  // Simulating authentication hook or user context\r\n  const { user: currentUser, isLoading } = useAuth();\r\n\r\n  useEffect(() => {\r\n    if (isLoading || !currentUser) return;\r\n    setIsAdmin(allowedEmails.includes(currentUser.email));\r\n    setIsAuthorized(allowedEmails.includes(currentUser.email));\r\n  }, [currentUser, isLoading]);\r\n\r\n  const handleClick = () => {\r\n    setMobileNav(!mobileNav);\r\n  };\r\n\r\n  const onChangeHeader = () => {\r\n    setChangeHeader(window.scrollY >= 50);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", onChangeHeader);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onChangeHeader);\r\n    };\r\n  }, []);\r\n\r\n  const showUnauthorizedDialog = () => {\r\n    alert(\"You are not authorized to access this section.\");\r\n    console.log(\"Now, the current user is :- \", currentUser);\r\n  };\r\n\r\n  return (\r\n    <header\r\n      className={\r\n        changeHeader\r\n          ? \"bg-white fixed z-50 top-0 left-0 w-full shadow-md transition duration-500\"\r\n          : \"bg-transparent fixed z-50 top-0 left-0 w-full transition duration-500\"\r\n      }\r\n      style={{ backgroundColor: \"#98F5F9\" }}\r\n    >\r\n      {/* Desktop nav */}\r\n      <nav className=\"flex items-center max-w-screen-xl mx-auto px-6 py-3\">\r\n        <div className=\"flex flex-grow\">\r\n          <NavBrand />\r\n        </div>\r\n\r\n        {/* Menu links for desktop */}\r\n        <div className=\"hidden md:flex lg:flex space-x-8\">\r\n          <ul className=\"flex items-center space-x-4\">\r\n            {menu.map((item) => (\r\n              <li key={item.id}>\r\n                <NavLink\r\n                  exact=\"true\"\r\n                  to={item.to}\r\n                  className=\"text-gray-600 text-lg poppins\"\r\n                  activeClassName=\"border-b-4 border-blue-600 text-blue-700\"\r\n                >\r\n                  {item.text}\r\n                </NavLink>\r\n              </li>\r\n            ))}\r\n            {isAdmin ? (\r\n              <li key=\"admin\">\r\n                <NavLink\r\n                  exact=\"true\"\r\n                  to=\"/admin\"\r\n                  className=\"text-gray-600 text-lg poppins\"\r\n                  activeClassName=\"border-b-4 border-blue-600 text-blue-700\"\r\n                >\r\n                  Admin\r\n                </NavLink>\r\n              </li>\r\n            ) : (\r\n              <li key=\"admin\">\r\n                <button\r\n                  onClick={showUnauthorizedDialog}\r\n                  className=\"text-gray-600 text-lg poppins\"\r\n                >\r\n                  Admin\r\n                </button>\r\n              </li>\r\n            )}\r\n          </ul>\r\n          <AuthorizeUser />\r\n        </div>\r\n\r\n        {/* Menu icon for mobile */}\r\n        <div className=\"block md:hidden lg:hidden\">\r\n          <HiMenuAlt3\r\n            className=\"w-10 h-10 ring-blue-300 text-gray-700 border border-gray-400 focus:ring-4 cursor-pointer rounded-lg p-2 transform transition duration-200 hover:scale-110\"\r\n            onClick={handleClick}\r\n          />\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Mobile nav */}\r\n      {mobileNav && (\r\n        <nav className=\"bg-white shadow-lg mx-6 mt-2 p-4 rounded-lg border border-gray-300 py-4 block md:hidden lg:hidden\">\r\n          <ul className=\"mb-2\">\r\n            {menu.map((item) => (\r\n              <li key={item.id} className=\"mb-3\">\r\n                <NavLink\r\n                  exact=\"true\"\r\n                  to={item.to}\r\n                  className=\"text-gray-600 poppins text-lg text-center py-2 px-3 w-full hover:bg-gray-200 transition duration-300 cursor-default block rounded-lg\"\r\n                  activeClassName=\"border-l-4 border-blue-700 bg-gray-200\"\r\n                >\r\n                  {item.text}\r\n                </NavLink>\r\n              </li>\r\n            ))}\r\n            {isAdmin ? (\r\n              <li key=\"admin\" className=\"mb-3\">\r\n                <NavLink\r\n                  exact=\"true\"\r\n                  to=\"/admin\"\r\n                  className=\"text-gray-600 poppins text-lg text-center py-2 px-3 w-full hover:bg-gray-200 transition duration-300 cursor-default block rounded-lg\"\r\n                  activeClassName=\"border-l-4 border-blue-700 bg-gray-200\"\r\n                >\r\n                  Admin\r\n                </NavLink>\r\n              </li>\r\n            ) : (\r\n              <li key=\"admin\" className=\"mb-3\">\r\n                <button\r\n                  onClick={showUnauthorizedDialog}\r\n                  className=\"text-gray-600 poppins text-lg text-center py-2 px-3 w-full hover:bg-gray-200 transition duration-300 cursor-default block rounded-lg\"\r\n                >\r\n                  Admin\r\n                </button>\r\n              </li>\r\n            )}\r\n          </ul>\r\n          <AuthorizeUserMobile />\r\n        </nav>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","E:\\Pr\\Web D\\MedSync\\src\\components\\Brand.js",[],"E:\\Pr\\Web D\\MedSync\\src\\hooks\\useOrder.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Form\\TextField.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Heading.js",[],"E:\\Pr\\Web D\\MedSync\\src\\hooks\\useAuth.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Form\\GoogleSignIn.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Form\\Button.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Navbar\\NavBrand.js",[],"E:\\Pr\\Web D\\MedSync\\src\\hooks\\useFetch.js",[],"E:\\Pr\\Web D\\MedSync\\src\\hooks\\useFirebase.js",["218","219","220"],"import { createUserWithEmailAndPassword, getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"firebase/auth\";\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport swal from 'sweetalert';\r\nimport initializeAuthentication from '../config/firebase';\r\nimport { db, collection, getDocs } from '../config/firebase'; \r\nimport { doc, setDoc, updateDoc, serverTimestamp, getFirestore, query, orderBy, limit } from \"firebase/firestore\"; \r\nimport {initializeApp} from 'firebase/app'; // Import the firebase namespace\r\n\r\nimport 'firebase/auth'; // If you're using authentication\r\n\r\n//initialize firebase  authentication\r\ninitializeAuthentication()\r\n\r\nconst useFirebase = () => {\r\n    const [user, setUser] = useState({});\r\n    const auth = getAuth();\r\n    const history = useHistory();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const unsubscribed = onAuthStateChanged(auth, user => {\r\n            if (user) {\r\n                setUser(user)\r\n                console.log(\"User signed in:\", user.email);\r\n            } else {\r\n                setUser({})\r\n                console.log(\"No user signed in\");\r\n            }\r\n            setIsLoading(false);\r\n        })\r\n        return () => unsubscribed;\r\n    }, [auth])\r\n    \r\n\r\n\r\nconst signUpUser = async (email, password, name) => {\r\n    setIsLoading(true);\r\n    try {\r\n        const res = await createUserWithEmailAndPassword(auth, email, password);\r\n        \r\n        // Update the user profile with the display name\r\n        await updateProfile(auth.currentUser, {\r\n            displayName: name,\r\n        });\r\n        \r\n        // Add additional user details to Firestore\r\n        const userProfileData = {\r\n            age: '',  // Empty string for age\r\n            bloodGroup: '',  // Empty string for bloodGroup\r\n            email: email,  // Set to the email the user just entered\r\n            medicalBio: '',  // Empty string for medicalBio\r\n            name: '',  // Set to the user's display name\r\n            phone: '',  // Empty string for phone\r\n            photoURL: '',  // Empty string for photoURL\r\n            rating: '',  // Empty string for rating\r\n            rollOrEmpId: '',  // Empty string for roll or emp id\r\n            serviceReview: '',  // Empty string for serviceReview\r\n            orders: []  // Empty array for orders\r\n        };\r\n\r\n        // Create a document for the user in the 'user_profile' collection\r\n        const userProfileRef = doc(db, 'user_profile', res.user.uid);  // Using the UID as the document ID\r\n        await setDoc(userProfileRef, userProfileData);  // Set the data\r\n\r\n        // Directly log the user in after signup\r\n        setUser(res.user);\r\n        \r\n        // Show success message\r\n        swal(\"Good job!\", \"Account has been created!\", \"success\");\r\n\r\n        // Redirect to home\r\n        history.push('/');\r\n\r\n        // Reload the home page\r\n        window.location.reload();\r\n\r\n        window.scrollTo(0, 100);\r\n    } catch (err) {\r\n        swal(\"Something went wrong!\", `${err.message}`, \"error\");\r\n    } finally {\r\n        setIsLoading(false);\r\n    }\r\n};\r\n\r\n    \r\n\r\n    //sign in functionality\r\n    const signInUser = async (email, password) => {\r\n        setIsLoading(true);\r\n        await signInWithEmailAndPassword(auth, email, password)\r\n            .then(res => {\r\n                setUser(res.user);\r\n                swal(\"Sign in Successful!\", \"Welcome back !\", \"info\")\r\n                history.push('/');\r\n                // Reload the home page\r\n                window.location.reload();\r\n                                    window.scrollTo(0, 100);\r\n\r\n            })\r\n            .catch(err => swal(\"Something went wrong!\", `${err.message}`, \"error\")).finally(() => setIsLoading(false));\r\n    }\r\n\r\n    //google sign in \r\n    const signInWithGoogle = async () => {\r\n        setIsLoading(true);\r\n        const googleProvider = new GoogleAuthProvider();\r\n        await signInWithPopup(auth, googleProvider)\r\n            .then(res => {\r\n                setUser(res.user);\r\n                swal(\"Good job!\", \"Account has been created!\", \"success\");\r\n                history.push('/');\r\n            }).catch(err => console.log(err.message)).finally(() => setIsLoading(false));\r\n    }\r\n\r\n\r\n    // sign out \r\n    const signOutUser = async () => {\r\n        setIsLoading(true);\r\n        await signOut(auth).then(() => {\r\n            setUser({});\r\n            swal(\"Logout Successful!\", \"You are logged out!\", \"success\");\r\n            history.push('/signin')\r\n        }).catch((err) => {\r\n            swal(\"Something went wrong!\", `${err.message}`, \"error\")\r\n        }).finally(() => setIsLoading(false));\r\n\r\n    }\r\n// Fetch medicines\r\nconst getMedicines = async () => {\r\n    const medicinesRef = collection(db, \"products\");\r\n    const q = query(medicinesRef, orderBy(\"expiry_date\", \"asc\"), limit(10));\r\n    const querySnapshot = await getDocs(q);\r\n    const medicines = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    return medicines;\r\n  };\r\n  \r\n\r\n// Fetch orders\r\nconst getOrders = async () => {\r\n    const ordersCol = collection(db, 'orders')  // Reference to the 'orders' collection\r\n    const ordersSnapshot = await getDocs(ordersCol);  // Get documents from the collection\r\n    return ordersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n};\r\n    \r\n    // Function to fetch messages\r\n    const getMessages = async () => {\r\n        try {\r\n            const messagesCollection = collection(db, 'messages'); // Replace 'messages' with your collection name\r\n            const messageSnapshot = await getDocs(messagesCollection);\r\n            const messages = messageSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            return messages;\r\n        } catch (error) {\r\n            console.error(\"Error fetching messages:\", error);\r\n            return [];\r\n        }\r\n    };\r\n    // Firestore function to update the order status\r\nconst db = getFirestore(); // Firestore\r\n\r\n// Firestore function to update the order status\r\nconst updateOrderStatusInFirestore = async (orderId, newStatus) => {\r\n  if (!orderId) {\r\n    console.error(\"Invalid orderId:\", orderId); // Check for invalid orderId\r\n    return;\r\n  }\r\n\r\n  const orderRef = doc(db, 'orders', orderId); // Corrected Firestore document reference\r\n\r\n  try {\r\n    console.log(\"Updating order with ID:\", orderId); // Log the orderId to verify it's being passed\r\n    await updateDoc(orderRef, {\r\n      status: newStatus,\r\n      timestamp: serverTimestamp(), // Optional: Update timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating order status in Firestore:\", error);\r\n  }\r\n};\r\n\r\n\r\n\r\n  \r\n\r\n    return {\r\n        user,\r\n        signInUser,\r\n        signUpUser,\r\n        signOutUser,\r\n        signInWithGoogle,\r\n        isLoading,\r\n        getMedicines,\r\n        getOrders,\r\n        getMessages,\r\n        updateOrderStatusInFirestore,\r\n        getMedicines\r\n    };\r\n}\r\n\r\nexport default useFirebase\r\n","E:\\Pr\\Web D\\MedSync\\src\\components\\Order\\OrderCard.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Header\\Banner.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Services\\Services.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\products\\Product.js",[],"E:\\Pr\\Web D\\MedSync\\src\\config\\firebase.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Navbar\\AuthorizeUserMobile.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Testimonial\\Testimonials.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Contact\\ContactForm.js",["221"],"import React, { useState, useEffect } from 'react';\r\nimport Bounce from 'react-reveal/Bounce';\r\nimport TextField from '../Form/TextField';\r\nimport { db } from '../../config/firebase'; // Adjust the path as necessary\r\nimport { collection, addDoc, query, where, onSnapshot, Timestamp, doc, setDoc } from 'firebase/firestore';\r\n\r\nconst ContactForm = () => {\r\n    const [formData, setFormData] = useState({\r\n        fullName: '',\r\n        email: '',\r\n        phoneNumber: '',\r\n        message: '',\r\n    });\r\n\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [responseMessage, setResponseMessage] = useState(null);\r\n\r\n    // Form inputs configuration\r\n    const Inputs = [\r\n        { id: 1, name: \"fullName\", type: \"text\", placeholder: \"Full Name\" },\r\n        { id: 2, name: \"email\", type: \"email\", placeholder: \"Email\" },\r\n        { id: 3, name: \"phoneNumber\", type: \"text\", placeholder: \"Phone Number\" },  // Changed to text for proper validation\r\n    ];\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    // Validate phone number (only 10 digits allowed)\r\n    const validatePhoneNumber = (phone) => {\r\n        const phoneRegex = /^[0-9]{10}$/;\r\n        return phoneRegex.test(phone);\r\n    };\r\n\r\n    // Validate email\r\n    const validateEmail = (email) => {\r\n        const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\r\n        return emailRegex.test(email);\r\n    };\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setIsSubmitting(true);\r\n        setSuccessMessage('');\r\n        setErrorMessage('');\r\n\r\n        // Validate phone number\r\n        if (!validatePhoneNumber(formData.phoneNumber)) {\r\n            setErrorMessage('Please enter a valid 10-digit phone number.');\r\n            setIsSubmitting(false);\r\n            return;\r\n        }\r\n\r\n        // Validate email\r\n        if (!validateEmail(formData.email)) {\r\n            setErrorMessage('Please enter a valid email address.');\r\n            setIsSubmitting(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Create a document in the \"contact\" collection with the email as the document ID\r\n            const contactRef = doc(db, 'contact', formData.email); // Use email as document ID\r\n            await setDoc(contactRef, {\r\n                ...formData,\r\n                response: '', // Default empty response\r\n                createdAt: Timestamp.now(),\r\n            });\r\n            setSuccessMessage('Your message has been sent successfully!');\r\n            setFormData({ fullName: '', email: '', phoneNumber: '', message: '' }); // Reset form\r\n        } catch (error) {\r\n            setErrorMessage('Failed to send message. Please try again.');\r\n            console.error(\"Error adding document: \", error);\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    // Fetch response from Firestore for the current user\r\n    useEffect(() => {\r\n        if (formData.email) {  // Only fetch if email is provided\r\n            const q = query(collection(db, 'contact'), where('email', '==', formData.email));\r\n            const unsubscribe = onSnapshot(q, (snapshot) => {\r\n                snapshot.forEach(doc => {\r\n                    const data = doc.data();\r\n                    setResponseMessage(data.response || ''); // Display response if available\r\n                });\r\n            });\r\n            return () => unsubscribe(); // Clean up listener\r\n        }\r\n    }, [formData.email]);\r\n\r\n    return (\r\n        <form className=\"p-6 flex flex-col justify-center w-full lg:w-2/4 mx-auto\" onSubmit={handleSubmit}>\r\n            <div className=\"flex flex-col space-y-6\">\r\n                <Bounce left>\r\n                    {Inputs.map(input => (\r\n                        <TextField\r\n                            key={input.id}\r\n                            name={input.name}\r\n                            type={input.type}\r\n                            placeholder={input.placeholder}\r\n                            value={formData[input.name]}\r\n                            onChange={handleChange}\r\n                        />\r\n                    ))}\r\n                </Bounce>\r\n            </div>\r\n\r\n            {/* Text area for message */}\r\n            <Bounce left>\r\n                <div className=\"mt-6\">\r\n                    <textarea\r\n                        name=\"message\"\r\n                        placeholder=\"Your Message\"\r\n                        className=\"w-full px-4 py-3 h-36 rounded-lg ring-blue-200 focus:ring-4 focus:outline-none transition duration-300 border border-gray-300 resize-none\"\r\n                        value={formData.message}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"btn-primary px-6 py-3 w-36 mt-6\" disabled={isSubmitting}>\r\n                    {isSubmitting ? 'Sending...' : 'Submit'}\r\n                </button>\r\n            </Bounce>\r\n\r\n            {successMessage && <p className=\"text-green-500 mt-4\">{successMessage}</p>}\r\n            {errorMessage && <p className=\"text-red-500 mt-4\">{errorMessage}</p>}\r\n\r\n            {/* Display admin response */}\r\n            {responseMessage && (\r\n                <div className=\"mt-8 p-4 border border-gray-300 rounded-lg bg-gray-100\">\r\n                    <h4 className=\"text-gray-700 font-semibold mb-2\">Admin Response:</h4>\r\n                    <p className=\"text-gray-600\">{responseMessage}</p>\r\n                </div>\r\n            )}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ContactForm;\r\n","E:\\Pr\\Web D\\MedSync\\src\\components\\Navbar\\AuthorizeUser.js",[],"E:\\Pr\\Web D\\MedSync\\src\\components\\Services\\Service.js",["222"],"import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Button from '../Form/Button';\r\n\r\nconst Service = (props) => {\r\n    const { title, icon, description } = props;\r\n    const history = useHistory();\r\n    return (\r\n        <div className=\"flex flex-col justify-center items-center space-y-3 bg-white border border-gray-200 hover:shadow-xl transition duration-700 ease-in-out transform hover:scale-105 p-4 box-border rounded-xl\">\r\n            <img className=\"w-24\" src={icon} alt={title} />\r\n            <h1 className=\"text-gray-600 poppins text-xl text-center\">{title}</h1>\r\n           \r\n            <Button className=\"w-36 btn-primary py-3 px-2 poppins text-sm\" text=\"Learn More\" onClick={() => history.push(`/services/${title}`)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Service\r\n","E:\\Pr\\Web D\\MedSync\\src\\components\\Testimonial\\Testimonial.js",[],{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":4,"column":8,"nodeType":"229","messageId":"230","endLine":4,"endColumn":14},{"ruleId":"227","severity":1,"message":"231","line":1,"column":32,"nodeType":"229","messageId":"230","endLine":1,"endColumn":42},{"ruleId":"227","severity":1,"message":"232","line":30,"column":15,"nodeType":"229","messageId":"230","endLine":30,"endColumn":21},{"ruleId":"227","severity":1,"message":"233","line":5,"column":10,"nodeType":"229","messageId":"230","endLine":5,"endColumn":16},{"ruleId":"227","severity":1,"message":"234","line":5,"column":66,"nodeType":"229","messageId":"230","endLine":5,"endColumn":72},{"ruleId":"227","severity":1,"message":"235","line":10,"column":19,"nodeType":"229","messageId":"230","endLine":10,"endColumn":26},{"ruleId":"236","severity":1,"message":"237","line":47,"column":37,"nodeType":"238","endLine":47,"endColumn":133},{"ruleId":"227","severity":1,"message":"239","line":5,"column":3,"nodeType":"229","messageId":"230","endLine":5,"endColumn":15},{"ruleId":"227","severity":1,"message":"240","line":15,"column":10,"nodeType":"229","messageId":"230","endLine":15,"endColumn":23},{"ruleId":"227","severity":1,"message":"241","line":48,"column":5,"nodeType":"229","messageId":"230","endLine":48,"endColumn":14},{"ruleId":"227","severity":1,"message":"242","line":51,"column":5,"nodeType":"229","messageId":"230","endLine":51,"endColumn":16},{"ruleId":"227","severity":1,"message":"243","line":55,"column":10,"nodeType":"229","messageId":"230","endLine":55,"endColumn":19},{"ruleId":"227","severity":1,"message":"244","line":55,"column":21,"nodeType":"229","messageId":"230","endLine":55,"endColumn":33},{"ruleId":"227","severity":1,"message":"245","line":56,"column":10,"nodeType":"229","messageId":"230","endLine":56,"endColumn":15},{"ruleId":"227","severity":1,"message":"246","line":56,"column":17,"nodeType":"229","messageId":"230","endLine":56,"endColumn":25},{"ruleId":"227","severity":1,"message":"247","line":57,"column":10,"nodeType":"229","messageId":"230","endLine":57,"endColumn":18},{"ruleId":"227","severity":1,"message":"248","line":61,"column":10,"nodeType":"229","messageId":"230","endLine":61,"endColumn":20},{"ruleId":"227","severity":1,"message":"249","line":62,"column":10,"nodeType":"229","messageId":"230","endLine":62,"endColumn":18},{"ruleId":"227","severity":1,"message":"250","line":63,"column":10,"nodeType":"229","messageId":"230","endLine":63,"endColumn":25},{"ruleId":"227","severity":1,"message":"251","line":76,"column":10,"nodeType":"229","messageId":"230","endLine":76,"endColumn":17},{"ruleId":"252","severity":1,"message":"253","line":186,"column":6,"nodeType":"254","endLine":186,"endColumn":12,"suggestions":"255"},{"ruleId":"227","severity":1,"message":"256","line":207,"column":9,"nodeType":"229","messageId":"230","endLine":207,"endColumn":27},{"ruleId":"227","severity":1,"message":"257","line":213,"column":9,"nodeType":"229","messageId":"230","endLine":213,"endColumn":20},{"ruleId":"227","severity":1,"message":"241","line":20,"column":5,"nodeType":"229","messageId":"230","endLine":20,"endColumn":14},{"ruleId":"227","severity":1,"message":"258","line":27,"column":10,"nodeType":"229","messageId":"230","endLine":27,"endColumn":19},{"ruleId":"227","severity":1,"message":"243","line":29,"column":10,"nodeType":"229","messageId":"230","endLine":29,"endColumn":19},{"ruleId":"227","severity":1,"message":"245","line":30,"column":10,"nodeType":"229","messageId":"230","endLine":30,"endColumn":15},{"ruleId":"227","severity":1,"message":"247","line":31,"column":10,"nodeType":"229","messageId":"230","endLine":31,"endColumn":18},{"ruleId":"227","severity":1,"message":"259","line":32,"column":10,"nodeType":"229","messageId":"230","endLine":32,"endColumn":21},{"ruleId":"227","severity":1,"message":"260","line":32,"column":23,"nodeType":"229","messageId":"230","endLine":32,"endColumn":37},{"ruleId":"252","severity":1,"message":"261","line":39,"column":6,"nodeType":"254","endLine":39,"endColumn":12,"suggestions":"262"},{"ruleId":"227","severity":1,"message":"263","line":48,"column":9,"nodeType":"229","messageId":"230","endLine":48,"endColumn":18},{"ruleId":"227","severity":1,"message":"264","line":56,"column":9,"nodeType":"229","messageId":"230","endLine":56,"endColumn":32},{"ruleId":"227","severity":1,"message":"265","line":60,"column":9,"nodeType":"229","messageId":"230","endLine":60,"endColumn":29},{"ruleId":"227","severity":1,"message":"266","line":64,"column":9,"nodeType":"229","messageId":"230","endLine":64,"endColumn":29},{"ruleId":"227","severity":1,"message":"267","line":20,"column":10,"nodeType":"229","messageId":"230","endLine":20,"endColumn":22},{"ruleId":"252","severity":1,"message":"268","line":35,"column":6,"nodeType":"254","endLine":35,"endColumn":30,"suggestions":"269"},{"ruleId":"227","severity":1,"message":"270","line":6,"column":10,"nodeType":"229","messageId":"230","endLine":6,"endColumn":12},{"ruleId":"227","severity":1,"message":"240","line":8,"column":9,"nodeType":"229","messageId":"230","endLine":8,"endColumn":22},{"ruleId":"271","severity":1,"message":"272","line":196,"column":9,"nodeType":"273","messageId":"274","endLine":196,"endColumn":21},{"ruleId":"227","severity":1,"message":"233","line":5,"column":22,"nodeType":"229","messageId":"230","endLine":5,"endColumn":28},{"ruleId":"227","severity":1,"message":"275","line":6,"column":26,"nodeType":"229","messageId":"230","endLine":6,"endColumn":37},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'result' is assigned a value but never used.","'addDoc' is defined but never used.","'getDoc' is defined but never used.","'setUser' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getFirestore' is defined but never used.","'initializeApp' is defined but never used.","'isLoading' is assigned a value but never used.","'getMessages' is assigned a value but never used.","'suppliers' is assigned a value but never used.","'setSuppliers' is assigned a value but never used.","'sales' is assigned a value but never used.","'setSales' is assigned a value but never used.","'messages' is assigned a value but never used.","'showDialog' is assigned a value but never used.","'response' is assigned a value but never used.","'selectedMessage' is assigned a value but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["278"],"'openResponseDialog' is assigned a value but never used.","'closeDialog' is assigned a value but never used.","'medicines' is assigned a value but never used.","'selectedTab' is assigned a value but never used.","'setSelectedTab' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.",["279"],"'fetchData' is assigned a value but never used.","'handleOrderStatusUpdate' is assigned a value but never used.","'handleQuantityUpdate' is assigned a value but never used.","'handleResponseSubmit' is assigned a value but never used.","'isAuthorized' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'allowedEmails'. Either include it or remove the dependency array.",["280"],"'db' is defined but never used.","no-dupe-keys","Duplicate key 'getMedicines'.","ObjectExpression","unexpected","'description' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},"Update the dependencies array to be: [fetchData, user]",{"range":"287","text":"288"},"Update the dependencies array to be: [fetchOrders, user]",{"range":"289","text":"290"},"Update the dependencies array to be: [allowedEmails, currentUser, isLoading]",{"range":"291","text":"292"},[5915,5921],"[fetchData, user]",[1090,1096],"[fetchOrders, user]",[1237,1261],"[allowedEmails, currentUser, isLoading]"]