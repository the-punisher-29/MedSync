[{"/Users/arman_gupta/Documents/GitHub/MedSync/src/index.js":"1","/Users/arman_gupta/Documents/GitHub/MedSync/src/App.js":"2","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ContactScreen.js":"3","/Users/arman_gupta/Documents/GitHub/MedSync/src/contexts/OrderProvider.js":"4","/Users/arman_gupta/Documents/GitHub/MedSync/src/routes/PublicRoute.js":"5","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/OrderScreen.js":"6","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ProductsScreen.js":"7","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ServicesDetailScreen.js":"8","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ProductDetailScreen.js":"9","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/SignInScreen.js":"10","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ErrorScreen.js":"11","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/HomeScreen.js":"12","/Users/arman_gupta/Documents/GitHub/MedSync/src/contexts/AuthProvider.js":"13","/Users/arman_gupta/Documents/GitHub/MedSync/src/routes/PrivateRoute.js":"14","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/SignUpScreen.js":"15","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/profilepage.js":"16","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/adminpage.js":"17","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/Navbar.js":"18","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Footer/Footer.js":"19","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Heading.js":"20","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Brand.js":"21","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useOrder.js":"22","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/AuthorizeUser.js":"23","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Contact/ContactForm.js":"24","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useAuth.js":"25","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useFirebase.js":"26","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/NavBrand.js":"27","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Order/OrderCard.js":"28","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/AuthorizeUserMobile.js":"29","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/TextField.js":"30","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/GoogleSignIn.js":"31","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/Button.js":"32","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/products/Product.js":"33","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useFetch.js":"34","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Services/Services.js":"35","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Header/Banner.js":"36","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Testimonial/Testimonials.js":"37","/Users/arman_gupta/Documents/GitHub/MedSync/src/config/firebase.js":"38","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Services/Service.js":"39","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Testimonial/Testimonial.js":"40","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/OrdersPage.js":"41"},{"size":259,"mtime":1731230402215,"results":"42","hashOfConfig":"43"},{"size":2250,"mtime":1731456657278,"results":"44","hashOfConfig":"43"},{"size":1074,"mtime":1731258621360,"results":"45","hashOfConfig":"43"},{"size":1389,"mtime":1731230402214,"results":"46","hashOfConfig":"43"},{"size":1076,"mtime":1731257078629,"results":"47","hashOfConfig":"43"},{"size":10063,"mtime":1731457291513,"results":"48","hashOfConfig":"43"},{"size":6051,"mtime":1731457140078,"results":"49","hashOfConfig":"43"},{"size":1631,"mtime":1731230402218,"results":"50","hashOfConfig":"43"},{"size":4648,"mtime":1731258754070,"results":"51","hashOfConfig":"43"},{"size":5793,"mtime":1731230402218,"results":"52","hashOfConfig":"43"},{"size":692,"mtime":1731230402217,"results":"53","hashOfConfig":"43"},{"size":484,"mtime":1731258532637,"results":"54","hashOfConfig":"43"},{"size":394,"mtime":1731230402214,"results":"55","hashOfConfig":"43"},{"size":1394,"mtime":1731249732875,"results":"56","hashOfConfig":"43"},{"size":3053,"mtime":1731230402218,"results":"57","hashOfConfig":"43"},{"size":9195,"mtime":1731258781991,"results":"58","hashOfConfig":"43"},{"size":43949,"mtime":1731462263548,"results":"59","hashOfConfig":"43"},{"size":5567,"mtime":1731455441334,"results":"60","hashOfConfig":"43"},{"size":3204,"mtime":1731230402208,"results":"61","hashOfConfig":"43"},{"size":534,"mtime":1731230402210,"results":"62","hashOfConfig":"43"},{"size":354,"mtime":1731230402207,"results":"63","hashOfConfig":"43"},{"size":185,"mtime":1731230402215,"results":"64","hashOfConfig":"43"},{"size":2962,"mtime":1731233688064,"results":"65","hashOfConfig":"43"},{"size":5525,"mtime":1731230402207,"results":"66","hashOfConfig":"43"},{"size":176,"mtime":1731455281372,"results":"67","hashOfConfig":"43"},{"size":6890,"mtime":1731265003364,"results":"68","hashOfConfig":"43"},{"size":365,"mtime":1731230402211,"results":"69","hashOfConfig":"43"},{"size":3023,"mtime":1731230402212,"results":"70","hashOfConfig":"43"},{"size":2039,"mtime":1731230402211,"results":"71","hashOfConfig":"43"},{"size":254,"mtime":1731230402208,"results":"72","hashOfConfig":"43"},{"size":776,"mtime":1731230402208,"results":"73","hashOfConfig":"43"},{"size":186,"mtime":1731230402208,"results":"74","hashOfConfig":"43"},{"size":2787,"mtime":1731230402213,"results":"75","hashOfConfig":"43"},{"size":1772,"mtime":1731235103292,"results":"76","hashOfConfig":"43"},{"size":1785,"mtime":1731230402212,"results":"77","hashOfConfig":"43"},{"size":2874,"mtime":1731230402209,"results":"78","hashOfConfig":"43"},{"size":2231,"mtime":1731235446496,"results":"79","hashOfConfig":"43"},{"size":982,"mtime":1731230402214,"results":"80","hashOfConfig":"43"},{"size":799,"mtime":1731230402212,"results":"81","hashOfConfig":"43"},{"size":1626,"mtime":1731235280272,"results":"82","hashOfConfig":"43"},{"size":6632,"mtime":1731258703759,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"upz90o",{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"86"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"86"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"86"},"/Users/arman_gupta/Documents/GitHub/MedSync/src/index.js",[],["178","179"],"/Users/arman_gupta/Documents/GitHub/MedSync/src/App.js",["180"],"import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Footer from './components/Footer/Footer';\nimport Navbar from './components/Navbar/Navbar';\nimport AuthProvider from './contexts/AuthProvider'; // Import AuthProvider\nimport OrderProvider from './contexts/OrderProvider';\nimport PrivateRoute from './routes/PrivateRoute';\nimport PublicRoute from './routes/PublicRoute';\nimport ContactScreen from './screens/ContactScreen';\nimport ErrorScreen from './screens/ErrorScreen';\nimport HomeScreen from './screens/HomeScreen';\nimport OrderScreen from './screens/OrderScreen';\nimport ProductDetailScreen from './screens/ProductDetailScreen';\nimport ProductsScreen from './screens/ProductsScreen';\nimport ServicesDetailScreen from './screens/ServicesDetailScreen';\nimport SignInScreen from './screens/SignInScreen';\nimport SignUpScreen from './screens/SignUpScreen';\nimport ProfilePage from './screens/profilepage';\nimport AdminPage from './screens/adminpage'; // Import AdminPage\nimport OrdersPage from './screens/OrdersPage';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <AuthProvider>  {/* Wrap the app with AuthProvider */}\n        <OrderProvider>\n          \n          <Switch>\n            <Route exact path=\"/\"><HomeScreen /></Route>\n            <Route exact path=\"/contact\"><ContactScreen /></Route>\n            <PublicRoute path=\"/signup\"><SignUpScreen /></PublicRoute>\n            <PublicRoute path=\"/signin\"><SignInScreen /></PublicRoute>\n            <PrivateRoute exact path=\"/services/:title\"><ServicesDetailScreen /></PrivateRoute>\n            <Route exact path=\"/products/\"><ProductsScreen /></Route>\n            <PrivateRoute exact path=\"/products/:title\"><ProductDetailScreen /></PrivateRoute>\n            <PrivateRoute exact path=\"/orders\"><OrderScreen /></PrivateRoute>\n            <PrivateRoute exact path=\"/profile\"><ProfilePage /></PrivateRoute>\n            <PrivateRoute exact path=\"/admin\"><AdminPage /></PrivateRoute>\n            <Route exact path=\"/userOrders\"> <OrdersPage /> </Route>\n            <Route path=\"*\"><ErrorScreen /></Route>\n          </Switch>\n          <Footer />\n        </OrderProvider>\n      </AuthProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ContactScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/contexts/OrderProvider.js",["181"],"import React, { createContext, useContext, useState } from 'react';\n\nexport const OrderContext = createContext();\n\nexport const OrderProvider = ({ children }) => {\n    const [orders, setOrders] = useState([]);\n\n    // Function to add product to the cart\n    const handleCart = (product) => {\n        const existingProduct = orders.find((item) => item.id === product.id);\n        if (existingProduct) {\n            // Increment quantity if product already in cart\n            updateProductQuantity(product.id, existingProduct.quantity + 1);\n        } else {\n            // Add product with quantity 1 if not in cart\n            setOrders([...orders, { ...product, quantity: 1 }]);\n        }\n    };\n\n    // Function to update product quantity\n    const updateProductQuantity = (productId, newQuantity) => {\n        setOrders((prevOrders) =>\n            prevOrders.map((item) =>\n                item.id === productId ? { ...item, quantity: newQuantity } : item\n            )\n        );\n    };\n\n    // Function to remove a product from the cart\n    const removeProduct = (productId) => {\n        setOrders((prevOrders) => prevOrders.filter((item) => item.id !== productId));\n    };\n\n    return (\n        <OrderContext.Provider value={{ orders, handleCart, updateProductQuantity, removeProduct }}>\n            {children}\n        </OrderContext.Provider>\n    );\n};\n\nexport default OrderProvider\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/routes/PublicRoute.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/OrderScreen.js",["182","183"],"import React, { useState, useEffect } from 'react';\nimport Bounce from 'react-reveal/Bounce';\nimport OrderCard from '../components/Order/OrderCard';\nimport useOrder from '../hooks/useOrder';\nimport { addDoc, collection, doc, updateDoc, arrayUnion, setDoc, getDoc, getDocs, query, where } from 'firebase/firestore';\nimport  useAuth from '../hooks/useAuth';\nimport { getFirestore } from 'firebase/firestore';\nimport { useHistory } from 'react-router-dom'; // Import for redirection\nimport swal from 'sweetalert'; \nimport Navbar from '../components/Navbar/Navbar'\n\nconst OrderScreen = () => {\n    const { orders } = useOrder();\n    const [deliveryTiming, setDeliveryTiming] = useState('one-time');\n    const [deliveryTimeRange, setDeliveryTimeRange] = useState('None');\n    const [recurringOption, setRecurringOption] = useState('None');\n    const [paymentType, setPaymentType] = useState('cash');\n    const [totalPrice, setTotalPrice] = useState(0); // State for total price\n    const gstRate = 0.05; // 5% GST\n    const { user } = useAuth(); // Get the current user from AuthContext\n    const db = getFirestore();\n    const history = useHistory();\n\n    // Calculate total price based on orders and their quantities\n    useEffect(() => {\n        const price = orders.reduce((acc, order) => {\n            return acc + (order.price * order.quantity); // Use quantity from order\n        }, 0);\n        setTotalPrice(price + price * gstRate); // Total price including GST\n    }, [orders]);\n\n    // Function to handle form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n    \n        const orderDetails = {\n            user_id: user?.uid || 'unknown',\n            items: orders.map(item => ({\n                product_id: String(item.id),\n                name: item.title,\n                quantity: item.quantity,\n                price_per_unit: item.price,\n                total_price: item.price * item.quantity\n            })),\n            total_price: totalPrice || 0,\n            gst: totalPrice * gstRate || 0,\n            delivery_timing: deliveryTiming || 'None',\n            delivery_time_range: deliveryTimeRange || 'None',\n            recurring_option: recurringOption || 'None',\n            payment_type: paymentType || 'None',\n            timestamp: new Date(),\n            status: 'pending'\n        };\n    \n        console.log(\"Order Details:\", orderDetails);\n    \n        try {\n            const order_id = `order_${new Date().getTime()}`;\n            const orderRef = doc(db, 'orders', order_id);\n        \n            for (const item of orders) {\n                // Query to find the document with the matching 'id' field\n                const productQuery = query(\n                    collection(db, 'products'),\n                    where('id', '==', item.id) // Filter documents by 'id' field matching item.id\n                );\n        \n                const productSnapshot = await getDocs(productQuery);\n        \n                if (!productSnapshot.empty) {\n                    // There should only be one document matching the `id` field\n                    const productDoc = productSnapshot.docs[0];\n                    const currentQuantity = productDoc.data().quantity;\n                    const newQuantity = currentQuantity - item.quantity;\n        \n                    // Update the quantity in the matched document\n                    await updateDoc(productDoc.ref, {\n                        quantity: newQuantity >= 0 ? newQuantity : 0\n                    });\n                } else {\n                    console.warn(`Product with ID ${item.id} does not exist.`);\n                }\n            }\n        \n            // Set order document in 'orders' collection\n            await setDoc(orderRef, orderDetails);\n        \n            // Update user's order history\n            const userRef = doc(db, 'user_profile', String(user.uid));\n            await updateDoc(userRef, {\n                orders: arrayUnion(order_id)\n            });\n        \n            swal(\"Order Placed!\", \"Your order has been placed successfully!\", \"success\");\n            history.push('/');\n        } catch (error) {\n            console.error(\"Error placing order:\", error);\n        }\n        \n    };\n    \n    \n\n    // Check if the form is complete (i.e., \"Place Order\" button should be enabled)\n    const isFormValid = deliveryTiming !== 'None' && deliveryTimeRange !== 'None' && paymentType !== 'None';\n\n    return (\n        <>\n        <Navbar />\n        <section className=\"max-w-screen-xl py-24 mx-auto px-6\">\n            {orders.length === 0 ? (\n                <div className=\"h-screen\">\n                    <h1 className=\"text-3xl poppins text-center text-blue-600\">Cart is Empty!</h1>\n                </div>\n            ) : (\n                <>\n                    {/* Heading */}\n                    <Bounce left>\n                        <div className=\"flex flex-col items-center space-x-2 pb-8\">\n                            <h1 className=\"text-gray-700 poppins text-3xl\">All <span className=\"text-blue-600 font-semibold select-none\">Orders</span></h1>\n                            <div className=\"bg-blue-600 flex items-center justify-center w-16 h-1 mt-2 rounded-full\"></div>\n                        </div>\n                    </Bounce>\n                    <div className=\"flex justify-center\">\n                        <div className=\"flex flex-col space-y-4\">\n                            {orders.map(item => (\n                                <OrderCard key={item.id} {...item} />\n                            ))}\n                        </div>\n                    </div>\n\n                    {/* Form for Delivery Details */}\n                    <div className=\"mt-12\">\n                        <h2 className=\"text-2xl font-semibold mb-4\">Delivery Details</h2>\n                        <form onSubmit={handleSubmit} className=\"flex flex-col space-y-4\">\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700\">Delivery Timing</label>\n                                <select \n                                    value={deliveryTiming}\n                                    onChange={(e) => setDeliveryTiming(e.target.value)}\n                                    className=\"mt-1 block w-full border-gray-300 rounded-md\"\n                                >\n                                    <option value=\"None\">Select Timing</option>\n                                    <option value=\"one-time\">One Time</option>\n                                    <option value=\"recurring\">Recurring</option>\n                                </select>\n                            </div>\n\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700\">Delivery Time Range</label>\n                                <select \n                                    value={deliveryTimeRange}\n                                    onChange={(e) => setDeliveryTimeRange(e.target.value)}\n                                    className=\"mt-1 block w-full border-gray-300 rounded-md\"\n                                >\n                                    <option value=\"None\">Select Time Range</option>\n                                    <option value=\"morning\">Morning</option>\n                                    <option value=\"afternoon\">Afternoon</option>\n                                    <option value=\"evening\">Evening</option>\n                                </select>\n                            </div>\n\n                            {deliveryTiming === 'recurring' && (\n                                <div>\n                                    <label className=\"block text-sm font-medium text-gray-700\">Repeat This Order</label>\n                                    <select \n                                        value={recurringOption}\n                                        onChange={(e) => setRecurringOption(e.target.value)}\n                                        className=\"mt-1 block w-full border-gray-300 rounded-md\"\n                                    >\n                                        <option value=\"None\">Select Option</option>\n                                        <option value=\"monthly\">Every Month</option>\n                                        <option value=\"bi-monthly\">Every Two Months</option>\n                                    </select>\n                                </div>\n                            )}\n\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700\">Payment Type</label>\n                                <select \n                                    value={paymentType}\n                                    onChange={(e) => setPaymentType(e.target.value)}\n                                    className=\"mt-1 block w-full border-gray-300 rounded-md\"\n                                >\n                                    <option value=\"None\">Select Payment</option>\n                                    <option value=\"cash\">Cash</option>\n                                    <option value=\"upi\">UPI</option>\n                                </select>\n                            </div>\n\n                            <div className=\"mt-4\">\n                                <h3 className=\"text-lg font-semibold\">Total Price (including GST): ₹{totalPrice.toFixed(2)}</h3>\n                            </div>\n\n                            <button \n                                type=\"submit\"\n                                className={`mt-4 bg-blue-600 text-white py-2 px-4 rounded-md ${!isFormValid ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                disabled={!isFormValid}  // Disable button if form is not valid\n                            >\n                                Place Order\n                            </button>\n                        </form>\n                    </div>\n                </>\n            )}\n        </section>\n        </>\n    );\n};\n\nexport default OrderScreen;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ProductsScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ServicesDetailScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ProductDetailScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/SignInScreen.js",["184"],"import React, { useState } from 'react';\nimport Bounce from 'react-reveal/Bounce';\nimport { Link, useHistory } from 'react-router-dom';\nimport Brand from '../components/Brand';\nimport Button from '../components/Form/Button';\nimport GoogleSignIn from '../components/Form/GoogleSignIn';\nimport TextField from '../components/Form/TextField';\nimport useAuth from '../hooks/useAuth';\n\nconst SignInScreen = () => {\n    const [userInput, setUserInput] = useState({\n        email: '',\n        password: '',\n    });\n    const [isAdmin, setIsAdmin] = useState(false); // Toggle for user/admin tab\n    const { signInUser, signInWithGoogle } = useAuth();\n    const history = useHistory();\n\n    const allowedAdminEmails = ['b22es006@iitj.ac.in', 'b22cs101@iitj.ac.in', 'b22cs014@iitj.ac.in'];\n\n    // Handle form input changes\n    const handleChange = (e) => {\n        const { value, name } = e.target;\n        setUserInput((prev) => ({ ...prev, [name]: value }));\n    };\n\n    // Handle regular user form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const result = await signInUser(userInput.email, userInput.password);\n\n        // Redirect based on user type\n        if (allowedAdminEmails.includes(userInput.email)) {\n            history.replace('/admin'); // Use replace to avoid back navigation to root\n        } else {\n            history.push('/'); // Redirect regular user to dashboard\n        }\n    };\n\n// Handle Google Sign-In with immediate admin check\nconst handleGoogleSignIn = async () => {\n    try {\n        const result = await signInWithGoogle();  // Assuming this returns a result object\n        const user = result.user;\n\n        console.log(\"Signed in user:\", user); // Log user info for debugging\n\n        // Check if user is an admin and navigate accordingly\n        if (allowedAdminEmails.includes(user.email)) {\n            history.replace('/admin'); // Directly redirect to admin page if email is allowed\n        } else {\n            history.push('/'); // Redirect to user dashboard if not admin\n        }\n    } catch (error) {\n        console.error(\"Google sign-in failed:\", error);\n    }\n};\n\n    // Form inputs configuration\n    const Inputs = [\n        { id: 1, type: \"email\", placeholder: \"Email\", value: userInput.email, name: 'email' },\n        { id: 2, type: \"password\", placeholder: \"Password\", value: userInput.password, name: 'password' },\n    ];\n\n    return (\n        <main className=\"h-screen w-full banner\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10\">\n                {/* Image Section */}\n                <Bounce left>\n                    <div className=\"hidden md:flex lg:flex flex-col justify-center items-center w-full h-screen\">\n                        <img className=\"w-4/4 mx-auto\" src=\"../../assets/signin.png\" alt=\"signin\" />\n                    </div>\n                </Bounce>\n\n                {/* Form Section */}\n                <Bounce right>\n                    <div className=\"flex flex-col justify-center items-center h-screen\">\n                        {/* Logo */}\n                        <Brand />\n\n                        {/* Tabs for User and Admin Login */}\n                        <div className=\"flex space-x-6 mt-4\">\n                            <button \n                                onClick={() => setIsAdmin(false)} \n                                className={`px-4 py-2 ${!isAdmin ? \"bg-blue-500 text-white\" : \"text-blue-500\"}`}>\n                                User Login\n                            </button>\n                            <button \n                                onClick={() => setIsAdmin(true)} \n                                className={`px-4 py-2 ${isAdmin ? \"bg-blue-500 text-white\" : \"text-blue-500\"}`}>\n                                Admin Login\n                            </button>\n                        </div>\n\n                        {/* Form */}\n                        <form className=\"bg-white w-3/5 mt-6 p-4 rounded-lg shadow-lg\" onSubmit={handleSubmit}>\n                            {!isAdmin ? (\n                                // Regular User Login Form\n                                <div className=\"flex flex-col space-y-6\">\n                                    {Inputs.map((input) => (\n                                        <TextField\n                                            key={input.id}\n                                            type={input.type}\n                                            placeholder={input.placeholder}\n                                            value={input.value}\n                                            name={input.name}\n                                            onChange={handleChange}\n                                        />\n                                    ))}\n                                </div>\n                            ) : (\n                                // Admin Login with Google only\n                                <p className=\"text-gray-600 text-center mt-4\">Use Sign In with Google for Admin Access</p>\n                            )}\n                            {!isAdmin && <Button text=\"Sign In\" />}\n                            <Link to=\"/signup\">\n                                <p className=\"text-base text-primary text-center my-6 hover:underline\">\n                                    First Time? Create Account Here.\n                                </p>\n                            </Link>\n\n                            {/* Google Sign-In Button */}\n                            <GoogleSignIn text={isAdmin ? \"Sign In as Admin\" : \"Sign In With Google\"} onClick={handleGoogleSignIn} />\n                        </form>\n                    </div>\n                </Bounce>\n            </div>\n        </main>\n    );\n};\n\nexport default SignInScreen;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/ErrorScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/HomeScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/contexts/AuthProvider.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/routes/PrivateRoute.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/SignUpScreen.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/profilepage.js",["185"],"import React, { useState, useEffect } from 'react';\nimport { getFirestore, doc, addDoc, setDoc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n\nimport { getAuth, updateProfile } from 'firebase/auth';\nimport useAuth from '../hooks/useAuth';\nimport Navbar from '../components/Navbar/Navbar';\n\nconst ProfilePage = () => {\n    const { user, setUser } = useAuth();\n    const db = getFirestore();\n    const storage = getStorage();\n    const auth = getAuth();\n    \n    const [profileData, setProfileData] = useState({\n        phone: '',\n        bloodGroup: '',\n        rollOrEmpId: '',\n        age: '',\n        medicalBio: '',\n        serviceReview: '',  // Review text\n        rating: 1,  // Rating value (1 to 5 stars)\n    });\n    const [profilePic, setProfilePic] = useState(user.photoURL || \"https://cdn-icons-png.flaticon.com/512/236/236832.png\");\n    const [imageFile, setImageFile] = useState(null);\n\n    useEffect(() => {\n        const fetchProfileData = async () => {\n            if (user) {\n                const userDoc = doc(db, \"user_profile\", user.uid);\n                const docSnap = await getDoc(userDoc);\n                if (docSnap.exists()) {\n                    setProfileData(docSnap.data());\n                }\n            }\n        };\n        fetchProfileData();\n    }, [user, db]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setProfileData(prev => ({ ...prev, [name]: value }));\n    };\n\n    const handleImageChange = (e) => {\n        if (e.target.files[0]) {\n            setImageFile(e.target.files[0]);\n        }\n    };\n\n    const handleSave = async (e) => {\n        e.preventDefault();\n        if (user) {\n            let imageUrl = profilePic;\n    \n            // Upload the image to Firebase Storage if a new image is selected\n            if (imageFile) {\n                const storageRef = ref(storage, `profile_pictures/${user.uid}`);\n                await uploadBytes(storageRef, imageFile);\n                imageUrl = await getDownloadURL(storageRef);\n    \n                // Update the profile picture in Firebase Auth\n                await updateProfile(auth.currentUser, { photoURL: imageUrl });\n                setProfilePic(imageUrl); // Update local profile picture display\n            }\n    \n            // Save profile data to Firestore\n            const userDoc = doc(db, \"user_profile\", user.uid);\n            await setDoc(userDoc, {\n                name: user.displayName,\n                email: user.email,\n                photoURL: imageUrl,\n                ...profileData // Including the service review and rating\n            });\n    \n            // Check if a review document exists for the user\n            const reviewsQuery = query(collection(db, \"reviews\"), where(\"username\", \"==\", user.displayName));\n            const querySnapshot = await getDocs(reviewsQuery);\n\n            if (!querySnapshot.empty) {\n                // If a review exists, overwrite it using setDoc\n                const reviewDoc = doc(db, \"reviews\", querySnapshot.docs[0].id); // Get the first document (user's review)\n                await setDoc(reviewDoc, {\n                    username: user.displayName,\n                    image: imageUrl,\n                    review: profileData.serviceReview,\n                    rating: profileData.rating,\n                });\n            } else {\n                // If no review exists, create a new one\n                const reviewsRef = collection(db, \"reviews\");\n                await addDoc(reviewsRef, {\n                    username: user.displayName,\n                    image: imageUrl,\n                    review: profileData.serviceReview,\n                    rating: profileData.rating,\n                });\n            }\n\n            alert(\"Profile updated and review submitted successfully\");\n        }\n    };\n\n    return (\n        <>\n        <Navbar />\n        <div className=\"profile-page container mx-auto p-4 mt-20\">\n            <header className=\"flex justify-between items-start mb-6\">\n                <h1 className=\"text-3xl font-bold\">Profile</h1>\n                <div>\n                    <img\n                        src={profilePic}\n                        alt=\"Profile\"\n                        className=\"w-40 h-40 rounded-full border mb-2\"\n                    />\n                </div>\n            </header>\n            \n            <form onSubmit={handleSave} className=\"bg-white p-6 rounded-lg shadow-lg\">\n                <div className=\"grid grid-cols-1 gap-4 mb-6\">\n                    <div>\n                        <label className=\"font-semibold\">Name:</label>\n                        <p>{user.displayName}</p>\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Email:</label>\n                        <p>{user.email}</p>\n                    </div>\n                    {/* Profile Picture Upload Box - Moved below Email */}\n                    <div>\n                        <label className=\"font-semibold\">Upload Profile Picture:</label>\n                        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} className=\"w-full p-2 border rounded mt-2\" />\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Phone Number:</label>\n                        <input \n                            type=\"tel\"\n                            name=\"phone\"\n                            value={profileData.phone}\n                            onChange={handleChange}\n                            maxLength=\"10\"\n                            pattern=\"\\d*\" // Ensures only digits are allowed\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n\n                    <div>\n                        <label className=\"font-semibold\">Blood Group:</label>\n                        <input \n                            type=\"text\"\n                            name=\"bloodGroup\"\n                            value={profileData.bloodGroup}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Roll No/Emp ID:</label>\n                        <input \n                            type=\"text\"\n                            name=\"rollOrEmpId\"\n                            value={profileData.rollOrEmpId}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Age:</label>\n                        <input \n                            type=\"number\"\n                            name=\"age\"\n                            value={profileData.age}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n                    <div>\n                        <label className=\"font-semibold\">Medical Bio:</label>\n                        <textarea \n                            name=\"medicalBio\"\n                            value={profileData.medicalBio}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n\n                    {/* Service Review Section */}\n                    <div>\n                        <label className=\"font-semibold\">Service Review:</label>\n                        <textarea \n                            name=\"serviceReview\"\n                            value={profileData.serviceReview}\n                            onChange={handleChange}\n                            placeholder=\"Write your review here...\"\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n\n                    {/* Rating Section */}\n                    <div>\n                        <label className=\"font-semibold\">Rating (1-5):</label>\n                        <input\n                            type=\"number\"\n                            name=\"rating\"\n                            min=\"1\"\n                            max=\"5\"\n                            value={profileData.rating}\n                            onChange={handleChange}\n                            className=\"w-full p-2 border rounded\"\n                        />\n                    </div>\n                </div>\n                \n                <div className=\"text-center\">\n                    <button \n                        type=\"submit\"\n                        className=\"bg-blue-500 text-white py-2 px-6 rounded-lg font-semibold hover:bg-blue-600\"\n                    >\n                        Update Profile\n                    </button>\n                </div>\n            </form>\n        </div>\n        </>\n    );\n};\n\nexport default ProfilePage;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/adminpage.js",["186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202"],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/Navbar.js",["203","204"],"import React, { useState, useEffect } from \"react\";\nimport { HiMenuAlt3 } from \"react-icons/hi\";\nimport { NavLink } from \"react-router-dom\";\nimport AuthorizeUser from \"./AuthorizeUser\";\nimport AuthorizeUserMobile from \"./AuthorizeUserMobile\";\nimport NavBrand from \"./NavBrand\";\nimport useAuth from \"../../hooks/useAuth\";\n\nconst menu = [\n  { id: 1, text: \"Home\", to: \"/\" },\n  { id: 2, text: \"Products\", to: \"/products\" },\n  { id: 3, text: \"Contact\", to: \"/contact\" },\n  { id: 4, text: \"Orders\", to: \"/userOrders\" },\n];\n\nconst Navbar = () => {\n  const [changeHeader, setChangeHeader] = useState(false);\n  const [mobileNav, setMobileNav] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isAuthorized, setIsAuthorized] = useState(true); // Track authorization status\n\n  const allowedEmails = [\n    \"b22es006@iitj.ac.in\",\n    \"b22cs101@iitj.ac.in\",\n    \"b22cs014@iitj.ac.in\",\n  ];\n\n  // Simulating authentication hook or user context\n  const { user: currentUser, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (isLoading || !currentUser) return;\n    setIsAdmin(allowedEmails.includes(currentUser.email));\n    setIsAuthorized(allowedEmails.includes(currentUser.email));\n  }, [currentUser, isLoading]);\n\n  const handleClick = () => {\n    setMobileNav(!mobileNav);\n  };\n\n  const onChangeHeader = () => {\n    setChangeHeader(window.scrollY >= 50);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", onChangeHeader);\n    return () => {\n      window.removeEventListener(\"scroll\", onChangeHeader);\n    };\n  }, []);\n\n  const showUnauthorizedDialog = () => {\n    alert(\"You are not authorized to access this section.\");\n    console.log(\"Now, the current user is :- \", currentUser);\n  };\n\n  return (\n    <header\n      className={\n        changeHeader\n          ? \"bg-white fixed z-50 top-0 left-0 w-full shadow-md transition duration-500\"\n          : \"bg-transparent fixed z-50 top-0 left-0 w-full transition duration-500\"\n      }\n      style={{ backgroundColor: \"#98F5F9\" }}\n    >\n      {/* Desktop nav */}\n      <nav className=\"flex items-center max-w-screen-xl mx-auto px-6 py-3\">\n        <div className=\"flex flex-grow\">\n          <NavBrand />\n        </div>\n\n        {/* Menu links for desktop */}\n        <div className=\"hidden md:flex lg:flex space-x-8\">\n          <ul className=\"flex items-center space-x-4\">\n            {menu.map((item) => (\n              <li key={item.id}>\n                <NavLink\n                  exact=\"true\"\n                  to={item.to}\n                  className=\"text-gray-600 text-lg poppins\"\n                  activeClassName=\"border-b-4 border-blue-600 text-blue-700\"\n                >\n                  {item.text}\n                </NavLink>\n              </li>\n            ))}\n            {isAdmin ? (\n              <li key=\"admin\">\n                <NavLink\n                  exact=\"true\"\n                  to=\"/admin\"\n                  className=\"text-gray-600 text-lg poppins\"\n                  activeClassName=\"border-b-4 border-blue-600 text-blue-700\"\n                >\n                  Admin\n                </NavLink>\n              </li>\n            ) : (\n              <li key=\"admin\">\n                <button\n                  onClick={showUnauthorizedDialog}\n                  className=\"text-gray-600 text-lg poppins\"\n                >\n                  Admin\n                </button>\n              </li>\n            )}\n          </ul>\n          <AuthorizeUser />\n        </div>\n\n        {/* Menu icon for mobile */}\n        <div className=\"block md:hidden lg:hidden\">\n          <HiMenuAlt3\n            className=\"w-10 h-10 ring-blue-300 text-gray-700 border border-gray-400 focus:ring-4 cursor-pointer rounded-lg p-2 transform transition duration-200 hover:scale-110\"\n            onClick={handleClick}\n          />\n        </div>\n      </nav>\n\n      {/* Mobile nav */}\n      {mobileNav && (\n        <nav className=\"bg-white shadow-lg mx-6 mt-2 p-4 rounded-lg border border-gray-300 py-4 block md:hidden lg:hidden\">\n          <ul className=\"mb-2\">\n            {menu.map((item) => (\n              <li key={item.id} className=\"mb-3\">\n                <NavLink\n                  exact=\"true\"\n                  to={item.to}\n                  className=\"text-gray-600 poppins text-lg text-center py-2 px-3 w-full hover:bg-gray-200 transition duration-300 cursor-default block rounded-lg\"\n                  activeClassName=\"border-l-4 border-blue-700 bg-gray-200\"\n                >\n                  {item.text}\n                </NavLink>\n              </li>\n            ))}\n            {isAdmin ? (\n              <li key=\"admin\" className=\"mb-3\">\n                <NavLink\n                  exact=\"true\"\n                  to=\"/admin\"\n                  className=\"text-gray-600 poppins text-lg text-center py-2 px-3 w-full hover:bg-gray-200 transition duration-300 cursor-default block rounded-lg\"\n                  activeClassName=\"border-l-4 border-blue-700 bg-gray-200\"\n                >\n                  Admin\n                </NavLink>\n              </li>\n            ) : (\n              <li key=\"admin\" className=\"mb-3\">\n                <button\n                  onClick={showUnauthorizedDialog}\n                  className=\"text-gray-600 poppins text-lg text-center py-2 px-3 w-full hover:bg-gray-200 transition duration-300 cursor-default block rounded-lg\"\n                >\n                  Admin\n                </button>\n              </li>\n            )}\n          </ul>\n          <AuthorizeUserMobile />\n        </nav>\n      )}\n    </header>\n  );\n};\n\nexport default Navbar;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Footer/Footer.js",["205"],"import React from 'react';\nimport Fade from 'react-reveal/Fade';\nimport NavBrand from '../Navbar/NavBrand';\n\nconst Footer = () => {\n\n    const footerLink = [\n        { id: 1, text: 'Monday to Sunday' },\n        { id: 2, text: 'Open 24 hours' },\n        { id: 3, text: 'IITJ Medical Centre' },\n        { id: 4, text: 'IIT Jodhpur,Karwar' },\n        { id: 5, text: 'Pharmacy Help Line' },\n        { id: 6, text: 'Prescribing Tools' },\n        { id: 7, text: 'Speciality Medications' },\n        { id: 8, text: 'Pharmacy Claims' },\n        { id: 9, text: 'Email - phc@iitj.ac.in' },\n        { id: 11, text: 'Call - 0291-280-(1184)' }\n    ]\n    return (\n        <Fade left>\n        <footer className=\"text-gray-600 poppins\" style={{ backgroundColor: '#98F5F9' }}>\n            <div className=\"max-w-screen-xl px-5 py-24 mx-auto flex md:items-center lg:items-start md:flex-row md:flex-nowrap flex-wrap flex-col\">\n                <div className=\"w-64 flex-shrink-0 md:mx-0 mx-auto text-center md:text-left\">\n                    <NavBrand />\n                </div>\n                <div className=\"flex-grow flex justify-end flex-wrap md:pl-20 -mb-10 md:mt-0 mt-10 md:text-left text-center\">\n                    <div className=\"lg:w-1/4 md:w-1/2 w-full px-4\">\n                        <h2 className=\"poppins text-gray-900 text-base mb-3 font-semibold\">Working Hours</h2>\n                        <nav className=\"list-none mb-10 flex flex-col space-y-2\">\n                            {/* list  */}\n                            {\n                                footerLink.slice(0, 4).map(item => (\n                                    <span key={item.id} className=\"text-sm\">\n    {item.text}\n</span>\n\n                                ))\n                            }\n                        </nav>\n                    </div>\n                    <div className=\"lg:w-1/4 md:w-1/2 w-full px-4\">\n                        <h2 className=\"poppins text-gray-900 text-base mb-3 font-semibold\">Services</h2>\n                        <nav className=\"list-none mb-10 flex flex-col space-y-2\">\n                            {/* list  */}\n                            {\n                                footerLink.slice(4, 8).map(item => (\n                                    <a  target=\"_blank\" rel=\"noopener noreferrer\" key={item.id} className=\"text-sm hover:underline\">{item.text}</a>\n                                ))\n                            }\n                        </nav>\n                    </div>\n                    <div className=\"lg:w-1/4 md:w-1/2 w-full px-4\">\n                        <h2 className=\"poppins text-gray-900 text-base mb-3 font-semibold\">Contact</h2>\n                        <nav className=\"list-none mb-10 flex flex-col space-y-2\">\n                            {/* list  */}\n                            {\n                                footerLink.slice(8, 12).map(item => (\n                                    <span key={item.id} className=\"text-sm\">\n    {item.text}\n</span>\n\n                                ))\n                            }\n                        </nav>\n                    </div>\n\n                </div>\n            </div>\n        </footer>\n        </Fade>\n    )\n}\n\nexport default Footer\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Heading.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Brand.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useOrder.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/AuthorizeUser.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Contact/ContactForm.js",["206"],"import React, { useState, useEffect } from 'react';\nimport Bounce from 'react-reveal/Bounce';\nimport TextField from '../Form/TextField';\nimport { db } from '../../config/firebase'; // Adjust the path as necessary\nimport { collection, addDoc, query, where, onSnapshot, Timestamp } from 'firebase/firestore';\n\nconst ContactForm = () => {\n    const [formData, setFormData] = useState({\n        fullName: '',\n        email: '',\n        phoneNumber: '',\n        message: '',\n    });\n\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [successMessage, setSuccessMessage] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const [responseMessage, setResponseMessage] = useState(null);\n\n    // Form inputs configuration\n    const Inputs = [\n        { id: 1, name: \"fullName\", type: \"text\", placeholder: \"Full Name\" },\n        { id: 2, name: \"email\", type: \"email\", placeholder: \"Email\" },\n        { id: 3, name: \"phoneNumber\", type: \"text\", placeholder: \"Phone Number\" },  // Changed to text for proper validation\n    ];\n\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    };\n\n    // Validate phone number (only 10 digits allowed)\n    const validatePhoneNumber = (phone) => {\n        const phoneRegex = /^[0-9]{10}$/;\n        return phoneRegex.test(phone);\n    };\n\n    // Validate email\n    const validateEmail = (email) => {\n        const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n        return emailRegex.test(email);\n    };\n\n    // Handle form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsSubmitting(true);\n        setSuccessMessage('');\n        setErrorMessage('');\n\n        // Validate phone number\n        if (!validatePhoneNumber(formData.phoneNumber)) {\n            setErrorMessage('Please enter a valid 10-digit phone number.');\n            setIsSubmitting(false);\n            return;\n        }\n\n        // Validate email\n        if (!validateEmail(formData.email)) {\n            setErrorMessage('Please enter a valid email address.');\n            setIsSubmitting(false);\n            return;\n        }\n\n        try {\n            // Add data to Firestore\n            const docRef = await addDoc(collection(db, 'customer_queries'), {\n                ...formData,\n                response: '', // Default empty response\n                createdAt: Timestamp.now(),\n            });\n            setSuccessMessage('Your message has been sent successfully!');\n            setFormData({ fullName: '', email: '', phoneNumber: '', message: '' }); // Reset form\n        } catch (error) {\n            setErrorMessage('Failed to send message. Please try again.');\n            console.error(\"Error adding document: \", error);\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    // Fetch response from Firestore for the current user\n    useEffect(() => {\n        if (formData.email) {  // Only fetch if email is provided\n            const q = query(collection(db, 'customer_queries'), where('email', '==', formData.email));\n            const unsubscribe = onSnapshot(q, (snapshot) => {\n                snapshot.forEach(doc => {\n                    const data = doc.data();\n                    setResponseMessage(data.response || ''); // Display response if available\n                });\n            });\n            return () => unsubscribe(); // Clean up listener\n        }\n    }, [formData.email]);\n\n    return (\n        <form className=\"p-6 flex flex-col justify-center w-full lg:w-2/4 mx-auto\" onSubmit={handleSubmit}>\n            <div className=\"flex flex-col space-y-6\">\n                <Bounce left>\n                    {Inputs.map(input => (\n                        <TextField\n                            key={input.id}\n                            name={input.name}\n                            type={input.type}\n                            placeholder={input.placeholder}\n                            value={formData[input.name]}\n                            onChange={handleChange}\n                        />\n                    ))}\n                </Bounce>\n            </div>\n\n            {/* Text area for message */}\n            <Bounce left>\n                <div className=\"mt-6\">\n                    <textarea\n                        name=\"message\"\n                        placeholder=\"Your Message\"\n                        className=\"w-full px-4 py-3 h-36 rounded-lg ring-blue-200 focus:ring-4 focus:outline-none transition duration-300 border border-gray-300 resize-none\"\n                        value={formData.message}\n                        onChange={handleChange}\n                    />\n                </div>\n\n                <button type=\"submit\" className=\"btn-primary px-6 py-3 w-36 mt-6\" disabled={isSubmitting}>\n                    {isSubmitting ? 'Sending...' : 'Submit'}\n                </button>\n            </Bounce>\n\n            {successMessage && <p className=\"text-green-500 mt-4\">{successMessage}</p>}\n            {errorMessage && <p className=\"text-red-500 mt-4\">{errorMessage}</p>}\n\n            {/* Display admin response */}\n            {responseMessage && (\n                <div className=\"mt-8 p-4 border border-gray-300 rounded-lg bg-gray-100\">\n                    <h4 className=\"text-gray-700 font-semibold mb-2\">Admin Response:</h4>\n                    <p className=\"text-gray-600\">{responseMessage}</p>\n                </div>\n            )}\n        </form>\n    );\n};\n\nexport default ContactForm;\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useAuth.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useFirebase.js",["207","208","209"],"import { createUserWithEmailAndPassword, getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"firebase/auth\";\nimport { useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport swal from 'sweetalert';\nimport initializeAuthentication from '../config/firebase';\nimport { db, collection, getDocs } from '../config/firebase'; \nimport { doc, setDoc, updateDoc, serverTimestamp, getFirestore, query, orderBy, limit } from \"firebase/firestore\"; \nimport {initializeApp} from 'firebase/app'; // Import the firebase namespace\n\nimport 'firebase/auth'; // If you're using authentication\n\n//initialize firebase  authentication\ninitializeAuthentication()\n\nconst useFirebase = () => {\n    const [user, setUser] = useState({});\n    const auth = getAuth();\n    const history = useHistory();\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const unsubscribed = onAuthStateChanged(auth, user => {\n            if (user) {\n                setUser(user)\n                console.log(\"User signed in:\", user.email);\n            } else {\n                setUser({})\n                console.log(\"No user signed in\");\n            }\n            setIsLoading(false);\n        })\n        return () => unsubscribed;\n    }, [auth])\n    \n\n\nconst signUpUser = async (email, password, name) => {\n    setIsLoading(true);\n    try {\n        const res = await createUserWithEmailAndPassword(auth, email, password);\n        \n        // Update the user profile with the display name\n        await updateProfile(auth.currentUser, {\n            displayName: name,\n        });\n        \n        // Add additional user details to Firestore\n        const userProfileData = {\n            age: '',  // Empty string for age\n            bloodGroup: '',  // Empty string for bloodGroup\n            email: email,  // Set to the email the user just entered\n            medicalBio: '',  // Empty string for medicalBio\n            name: '',  // Set to the user's display name\n            phone: '',  // Empty string for phone\n            photoURL: '',  // Empty string for photoURL\n            rating: '',  // Empty string for rating\n            rollOrEmpId: '',  // Empty string for roll or emp id\n            serviceReview: '',  // Empty string for serviceReview\n            orders: []  // Empty array for orders\n        };\n\n        // Create a document for the user in the 'user_profile' collection\n        const userProfileRef = doc(db, 'user_profile', res.user.uid);  // Using the UID as the document ID\n        await setDoc(userProfileRef, userProfileData);  // Set the data\n\n        // Directly log the user in after signup\n        setUser(res.user);\n        \n        // Show success message\n        swal(\"Good job!\", \"Account has been created!\", \"success\");\n\n        // Redirect to home\n        history.push('/');\n\n        // Reload the home page\n        window.location.reload();\n\n        window.scrollTo(0, 100);\n    } catch (err) {\n        swal(\"Something went wrong!\", `${err.message}`, \"error\");\n    } finally {\n        setIsLoading(false);\n    }\n};\n\n    \n\n    //sign in functionality\n    const signInUser = async (email, password) => {\n        setIsLoading(true);\n        await signInWithEmailAndPassword(auth, email, password)\n            .then(res => {\n                setUser(res.user);\n                swal(\"Sign in Successful!\", \"Welcome back !\", \"info\")\n                history.push('/');\n                // Reload the home page\n                window.location.reload();\n                                    window.scrollTo(0, 100);\n\n            })\n            .catch(err => swal(\"Something went wrong!\", `${err.message}`, \"error\")).finally(() => setIsLoading(false));\n    }\n\n    //google sign in \n    const signInWithGoogle = async () => {\n        setIsLoading(true);\n        const googleProvider = new GoogleAuthProvider();\n        await signInWithPopup(auth, googleProvider)\n            .then(res => {\n                setUser(res.user);\n                swal(\"Good job!\", \"Account has been created!\", \"success\");\n                history.push('/');\n            }).catch(err => console.log(err.message)).finally(() => setIsLoading(false));\n    }\n\n\n    // sign out \n    const signOutUser = async () => {\n        setIsLoading(true);\n        await signOut(auth).then(() => {\n            setUser({});\n            swal(\"Logout Successful!\", \"You are logged out!\", \"success\");\n            history.push('/signin')\n        }).catch((err) => {\n            swal(\"Something went wrong!\", `${err.message}`, \"error\")\n        }).finally(() => setIsLoading(false));\n\n    }\n// Fetch medicines\nconst getMedicines = async () => {\n    const medicinesRef = collection(db, \"products\");\n    const q = query(medicinesRef, orderBy(\"expiry_date\", \"asc\"), limit(10));\n    const querySnapshot = await getDocs(q);\n    const medicines = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n    return medicines;\n  };\n  \n\n// Fetch orders\nconst getOrders = async () => {\n    const ordersCol = collection(db, 'orders')  // Reference to the 'orders' collection\n    const ordersSnapshot = await getDocs(ordersCol);  // Get documents from the collection\n    return ordersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n};\n    \n    // Function to fetch messages\n    const getMessages = async () => {\n        try {\n            const messagesCollection = collection(db, 'messages'); // Replace 'messages' with your collection name\n            const messageSnapshot = await getDocs(messagesCollection);\n            const messages = messageSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n            return messages;\n        } catch (error) {\n            console.error(\"Error fetching messages:\", error);\n            return [];\n        }\n    };\n    // Firestore function to update the order status\nconst db = getFirestore(); // Firestore\n\n// Firestore function to update the order status\nconst updateOrderStatusInFirestore = async (orderId, newStatus) => {\n  if (!orderId) {\n    console.error(\"Invalid orderId:\", orderId); // Check for invalid orderId\n    return;\n  }\n\n  const orderRef = doc(db, 'orders', orderId); // Corrected Firestore document reference\n\n  try {\n    console.log(\"Updating order with ID:\", orderId); // Log the orderId to verify it's being passed\n    await updateDoc(orderRef, {\n      status: newStatus,\n      timestamp: serverTimestamp(), // Optional: Update timestamp\n    });\n  } catch (error) {\n    console.error(\"Error updating order status in Firestore:\", error);\n  }\n};\n\n\n\n  \n\n    return {\n        user,\n        signInUser,\n        signUpUser,\n        signOutUser,\n        signInWithGoogle,\n        isLoading,\n        getMedicines,\n        getOrders,\n        getMessages,\n        updateOrderStatusInFirestore,\n        getMedicines\n    };\n}\n\nexport default useFirebase\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/NavBrand.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Order/OrderCard.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Navbar/AuthorizeUserMobile.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/TextField.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/GoogleSignIn.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Form/Button.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/products/Product.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useFetch.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Services/Services.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Header/Banner.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Testimonial/Testimonials.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/config/firebase.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Services/Service.js",["210"],"import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Button from '../Form/Button';\n\nconst Service = (props) => {\n    const { title, icon, description } = props;\n    const history = useHistory();\n    return (\n        <div className=\"flex flex-col justify-center items-center space-y-3 bg-white border border-gray-200 hover:shadow-xl transition duration-700 ease-in-out transform hover:scale-105 p-4 box-border rounded-xl\">\n            <img className=\"w-24\" src={icon} alt={title} />\n            <h1 className=\"text-gray-600 poppins text-xl text-center\">{title}</h1>\n           \n            <Button className=\"w-36 btn-primary py-3 px-2 poppins text-sm\" text=\"Learn More\" onClick={() => history.push(`/services/${title}`)} />\n        </div>\n    )\n}\n\nexport default Service\n","/Users/arman_gupta/Documents/GitHub/MedSync/src/components/Testimonial/Testimonial.js",[],"/Users/arman_gupta/Documents/GitHub/MedSync/src/screens/OrdersPage.js",["211","212","213","214","215","216","217","218","219","220","221","222"],"import React, { useState, useEffect } from \"react\";\nimport useFirebase from \"../hooks/useFirebase\";\nimport \"./admin.css\";\nimport Navbar from '../components/Navbar/Navbar'\n\nconst formatTimestamp = (timestamp) => {\n  const date = new Date(timestamp.seconds * 1000); // Convert seconds to milliseconds\n  return date.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n};\n\nconst OrdersPage = () => {\n  const {\n    user,\n    isLoading,\n    getMedicines,\n    getOrders,\n    getSuppliers,\n    getSales,\n    getMessages,\n  } = useFirebase();\n  const [medicines, setMedicines] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [suppliers, setSuppliers] = useState([]);\n  const [sales, setSales] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [selectedTab, setSelectedTab] = useState(\"Order Status\");\n  const [selectedOrder, setSelectedOrder] = useState(null);\n\n  useEffect(() => {\n    if (user) {\n      fetchOrders();\n    }\n  }, [user]);\n\n  const fetchOrders = async () => {\n    const allOrders = await getOrders();\n    // Filter orders to show only those belonging to the current user\n    const userOrders = allOrders.filter((order) => order.user_id === user.uid);\n    setOrders(userOrders);\n  };\n\n  const fetchData = async () => {\n    setMedicines(await getMedicines());\n    setOrders(await getOrders());\n    setSuppliers(await getSuppliers());\n    setSales(await getSales());\n    setMessages(await getMessages()); // Fetch messages for the new tab\n  };\n\n  const handleOrderStatusUpdate = (orderId, newStatus) => {\n    console.log(`Updating order ${orderId} to ${newStatus}`);\n  };\n\n  const handleQuantityUpdate = (id, newQuantity) => {\n    console.log(`Updating medicine ${id} to quantity ${newQuantity}`);\n  };\n\n  const handleResponseSubmit = (messageId, response) => {\n    console.log(`Response to message ${messageId}: ${response}`);\n    // You can add further code here to send this response to the backend\n  };\n\n  console.log(\"Orders :- \", orders);\n\n  return (\n    <>\n    <Navbar />\n    <section className=\"admin-section px-8 py-12\">\n            <h1 className=\"text-3xl font-bold text-gray-700 mb-8 mt-10\">Your Orders</h1>\n            \n            <table className=\"table-auto w-full text-left border-collapse\">\n                <thead>\n                    <tr>\n                        <th className=\"px-4 py-2 border\">Order ID</th>\n                        <th className=\"px-4 py-2 border\">Date and Time</th>\n                        <th className=\"px-4 py-2 border\">Bill</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {orders.map(order => (\n                        <tr key={order.id}>\n                            <td className=\"px-4 py-2 border\">\n                                <button \n                                    onClick={() => setSelectedOrder(order)} \n                                    className=\"text-blue-500 underline\">\n                                    {order.id}\n                                </button>\n                            </td>\n                            \n                            <td className=\"px-4 py-2 border\">{formatTimestamp(order.timestamp)}</td>\n                            <td className=\"px-4 py-2 border\">Rs. {order.total_price.toFixed(2)}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n\n            {/* Order Details Dialog */}\n            {selectedOrder && (\n                <div className=\"fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center\">\n                    <div className=\"bg-white p-8 rounded shadow-lg w-1/2 max-w-lg\">\n                        <h2 className=\"text-2xl font-bold mb-4\">Order Details</h2>\n                        <p><strong>Date and Time:</strong> {formatTimestamp(selectedOrder.timestamp)}</p>\n                        <p><strong>Order ID:</strong> {selectedOrder.id}</p>\n                        <p><strong>Current Status:</strong> {selectedOrder.status}</p>\n                        <p><strong>Delivery Type:</strong> {selectedOrder.delivery_timing}</p>\n                        <p><strong>Delivery Timing:</strong> {selectedOrder.delivery_time_range}</p>\n                        <p><strong>Payment Type:</strong> {selectedOrder.payment_type}</p>\n                        <p><strong>Recurring Option:</strong> {selectedOrder.recurring_option}</p>\n\n                        {/* Items Table */}\n                        <h3 className=\"text-xl font-semibold mt-6 mb-2\">Items Ordered</h3>\n                        <table className=\"table-auto w-full text-left border-collapse mb-4\">\n                            <thead>\n                                <tr>\n                                    <th className=\"px-4 py-2 border\">Item Name</th>\n                                    <th className=\"px-4 py-2 border\">Quantity</th>\n                                    <th className=\"px-4 py-2 border\">Price</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {selectedOrder.items.map((item, index) => (\n                                    <tr key={index}>\n                                        <td className=\"px-4 py-2 border\">{item.name}</td>\n                                        <td className=\"px-4 py-2 border\">{item.quantity}</td>\n                                        <td className=\"px-4 py-2 border\">${item.total_price.toFixed(2)}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n\n                        {/* Bill Summary */}\n                        <div className=\"mt-4\">\n                            <p><strong>Subtotal:</strong> Rs. {selectedOrder.total_price.toFixed(2)}</p>\n                            <p><strong>GST:</strong> Rs. {selectedOrder.gst.toFixed(2)}</p>\n                            <p className=\"text-lg font-semibold\"><strong>Total Bill:</strong> Rs. {(selectedOrder.total_price + selectedOrder.gst).toFixed(2)}</p>\n                        </div>\n\n                        {/* Close Button */}\n                        <button \n                            onClick={() => setSelectedOrder(null)} \n                            className=\"mt-6 bg-blue-500 text-white px-4 py-2 rounded\">\n                            Close\n                        </button>\n                    </div>\n                </div>\n            )}\n        </section>\n        </>\n  );\n};\n\nexport default OrdersPage;\n",{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":4,"column":8,"nodeType":"229","messageId":"230","endLine":4,"endColumn":14},{"ruleId":"227","severity":1,"message":"231","line":1,"column":32,"nodeType":"229","messageId":"230","endLine":1,"endColumn":42},{"ruleId":"227","severity":1,"message":"232","line":5,"column":10,"nodeType":"229","messageId":"230","endLine":5,"endColumn":16},{"ruleId":"227","severity":1,"message":"233","line":5,"column":66,"nodeType":"229","messageId":"230","endLine":5,"endColumn":72},{"ruleId":"227","severity":1,"message":"234","line":30,"column":15,"nodeType":"229","messageId":"230","endLine":30,"endColumn":21},{"ruleId":"227","severity":1,"message":"235","line":10,"column":19,"nodeType":"229","messageId":"230","endLine":10,"endColumn":26},{"ruleId":"227","severity":1,"message":"236","line":5,"column":3,"nodeType":"229","messageId":"230","endLine":5,"endColumn":15},{"ruleId":"227","severity":1,"message":"237","line":13,"column":10,"nodeType":"229","messageId":"230","endLine":13,"endColumn":23},{"ruleId":"227","severity":1,"message":"238","line":30,"column":5,"nodeType":"229","messageId":"230","endLine":30,"endColumn":14},{"ruleId":"227","severity":1,"message":"239","line":33,"column":5,"nodeType":"229","messageId":"230","endLine":33,"endColumn":16},{"ruleId":"227","severity":1,"message":"240","line":37,"column":10,"nodeType":"229","messageId":"230","endLine":37,"endColumn":19},{"ruleId":"227","severity":1,"message":"241","line":37,"column":21,"nodeType":"229","messageId":"230","endLine":37,"endColumn":33},{"ruleId":"227","severity":1,"message":"242","line":38,"column":10,"nodeType":"229","messageId":"230","endLine":38,"endColumn":15},{"ruleId":"227","severity":1,"message":"243","line":38,"column":17,"nodeType":"229","messageId":"230","endLine":38,"endColumn":25},{"ruleId":"227","severity":1,"message":"244","line":39,"column":10,"nodeType":"229","messageId":"230","endLine":39,"endColumn":18},{"ruleId":"227","severity":1,"message":"245","line":43,"column":10,"nodeType":"229","messageId":"230","endLine":43,"endColumn":20},{"ruleId":"227","severity":1,"message":"246","line":44,"column":10,"nodeType":"229","messageId":"230","endLine":44,"endColumn":18},{"ruleId":"227","severity":1,"message":"247","line":45,"column":10,"nodeType":"229","messageId":"230","endLine":45,"endColumn":25},{"ruleId":"227","severity":1,"message":"248","line":58,"column":10,"nodeType":"229","messageId":"230","endLine":58,"endColumn":17},{"ruleId":"227","severity":1,"message":"249","line":65,"column":10,"nodeType":"229","messageId":"230","endLine":65,"endColumn":19},{"ruleId":"250","severity":1,"message":"251","line":176,"column":6,"nodeType":"252","endLine":176,"endColumn":12,"suggestions":"253"},{"ruleId":"227","severity":1,"message":"254","line":197,"column":9,"nodeType":"229","messageId":"230","endLine":197,"endColumn":27},{"ruleId":"227","severity":1,"message":"255","line":203,"column":9,"nodeType":"229","messageId":"230","endLine":203,"endColumn":20},{"ruleId":"227","severity":1,"message":"256","line":20,"column":10,"nodeType":"229","messageId":"230","endLine":20,"endColumn":22},{"ruleId":"250","severity":1,"message":"257","line":35,"column":6,"nodeType":"252","endLine":35,"endColumn":30,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":47,"column":37,"nodeType":"261","endLine":47,"endColumn":133},{"ruleId":"227","severity":1,"message":"262","line":66,"column":19,"nodeType":"229","messageId":"230","endLine":66,"endColumn":25},{"ruleId":"227","severity":1,"message":"263","line":6,"column":10,"nodeType":"229","messageId":"230","endLine":6,"endColumn":12},{"ruleId":"227","severity":1,"message":"237","line":8,"column":9,"nodeType":"229","messageId":"230","endLine":8,"endColumn":22},{"ruleId":"264","severity":1,"message":"265","line":196,"column":9,"nodeType":"266","messageId":"267","endLine":196,"endColumn":21},{"ruleId":"227","severity":1,"message":"268","line":6,"column":26,"nodeType":"229","messageId":"230","endLine":6,"endColumn":37},{"ruleId":"227","severity":1,"message":"238","line":20,"column":5,"nodeType":"229","messageId":"230","endLine":20,"endColumn":14},{"ruleId":"227","severity":1,"message":"269","line":27,"column":10,"nodeType":"229","messageId":"230","endLine":27,"endColumn":19},{"ruleId":"227","severity":1,"message":"240","line":29,"column":10,"nodeType":"229","messageId":"230","endLine":29,"endColumn":19},{"ruleId":"227","severity":1,"message":"242","line":30,"column":10,"nodeType":"229","messageId":"230","endLine":30,"endColumn":15},{"ruleId":"227","severity":1,"message":"244","line":31,"column":10,"nodeType":"229","messageId":"230","endLine":31,"endColumn":18},{"ruleId":"227","severity":1,"message":"270","line":32,"column":10,"nodeType":"229","messageId":"230","endLine":32,"endColumn":21},{"ruleId":"227","severity":1,"message":"271","line":32,"column":23,"nodeType":"229","messageId":"230","endLine":32,"endColumn":37},{"ruleId":"250","severity":1,"message":"272","line":39,"column":6,"nodeType":"252","endLine":39,"endColumn":12,"suggestions":"273"},{"ruleId":"227","severity":1,"message":"274","line":48,"column":9,"nodeType":"229","messageId":"230","endLine":48,"endColumn":18},{"ruleId":"227","severity":1,"message":"275","line":56,"column":9,"nodeType":"229","messageId":"230","endLine":56,"endColumn":32},{"ruleId":"227","severity":1,"message":"276","line":60,"column":9,"nodeType":"229","messageId":"230","endLine":60,"endColumn":29},{"ruleId":"227","severity":1,"message":"277","line":64,"column":9,"nodeType":"229","messageId":"230","endLine":64,"endColumn":29},"no-native-reassign",["278"],"no-negated-in-lhs",["279"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'addDoc' is defined but never used.","'getDoc' is defined but never used.","'result' is assigned a value but never used.","'setUser' is assigned a value but never used.","'getFirestore' is defined but never used.","'initializeApp' is defined but never used.","'isLoading' is assigned a value but never used.","'getMessages' is assigned a value but never used.","'suppliers' is assigned a value but never used.","'setSuppliers' is assigned a value but never used.","'sales' is assigned a value but never used.","'setSales' is assigned a value but never used.","'messages' is assigned a value but never used.","'showDialog' is assigned a value but never used.","'response' is assigned a value but never used.","'selectedMessage' is assigned a value but never used.","'loading' is assigned a value but never used.","'salesData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["280"],"'openResponseDialog' is assigned a value but never used.","'closeDialog' is assigned a value but never used.","'isAuthorized' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'allowedEmails'. Either include it or remove the dependency array.",["281"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'docRef' is assigned a value but never used.","'db' is defined but never used.","no-dupe-keys","Duplicate key 'getMedicines'.","ObjectExpression","unexpected","'description' is assigned a value but never used.","'medicines' is assigned a value but never used.","'selectedTab' is assigned a value but never used.","'setSelectedTab' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.",["282"],"'fetchData' is assigned a value but never used.","'handleOrderStatusUpdate' is assigned a value but never used.","'handleQuantityUpdate' is assigned a value but never used.","'handleResponseSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},"Update the dependencies array to be: [fetchData, user]",{"range":"289","text":"290"},"Update the dependencies array to be: [allowedEmails, currentUser, isLoading]",{"range":"291","text":"292"},"Update the dependencies array to be: [fetchOrders, user]",{"range":"293","text":"294"},[5243,5249],"[fetchData, user]",[1203,1227],"[allowedEmails, currentUser, isLoading]",[1052,1058],"[fetchOrders, user]"]