{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAll, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroupContext } from \"./checkbox-group\";\nimport { CheckboxIcon } from \"./checkbox-icon\";\nimport { useCheckbox } from \"./use-checkbox\";\nvar CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0\n  }\n});\nvar Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\"\n    }\n  }\n});\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport var Checkbox = /*#__PURE__*/forwardRef((props, ref) => {\n  var group = useCheckboxGroupContext();\n  var mergedProps = _extends({}, group, props);\n  var styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  var ownProps = omitThemingProps(props);\n  var {\n      spacing = \"0.5rem\",\n      className,\n      children,\n      iconColor,\n      iconSize,\n      icon = /*#__PURE__*/React.createElement(CheckboxIcon, null),\n      isChecked: isCheckedProp,\n      isDisabled = group == null ? void 0 : group.isDisabled,\n      onChange: onChangeProp\n    } = ownProps,\n    rest = _objectWithoutPropertiesLoose(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"isDisabled\", \"onChange\"]);\n  var isChecked = isCheckedProp;\n  if (group != null && group.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  var onChange = onChangeProp;\n  if (group != null && group.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n  var {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps\n  } = useCheckbox(_extends({}, rest, {\n    isDisabled,\n    isChecked,\n    onChange\n  }));\n  var iconStyles = React.useMemo(() => _extends({\n    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n    transform: state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n    fontSize: iconSize,\n    color: iconColor\n  }, styles.icon), [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon]);\n  var clonedIcon = /*#__PURE__*/React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /*#__PURE__*/React.createElement(Label, _extends({\n    __css: styles.container,\n    className: cx(\"chakra-checkbox\", className)\n  }, getRootProps()), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-checkbox__input\"\n  }, getInputProps({}, ref))), /*#__PURE__*/React.createElement(CheckboxControl, _extends({\n    __css: styles.control,\n    className: \"chakra-checkbox__control\"\n  }, getCheckboxProps()), clonedIcon), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-checkbox__label\"\n  }, getLabelProps(), {\n    __css: _extends({\n      marginStart: spacing\n    }, styles.label)\n  }), children));\n});\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\";\n}","map":{"version":3,"sources":["../../src/checkbox.tsx"],"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAll","cx","__DEV__","React","useCheckboxGroupContext","CheckboxIcon","useCheckbox","CheckboxControl","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","Label","cursor","position","_disabled","Checkbox","props","ref","group","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","isChecked","isCheckedProp","isDisabled","onChange","onChangeProp","rest","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","iconStyles","useMemo","opacity","isIndeterminate","transform","fontSize","color","clonedIcon","cloneElement","__css","container","control","marginStart","label","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const iconStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform:\n        state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <Label\n      __css={styles.container}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input className=\"chakra-checkbox__input\" {...getInputProps({}, ref)} />\n      <CheckboxControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </CheckboxControl>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </Label>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"]},"metadata":{},"sourceType":"module"}