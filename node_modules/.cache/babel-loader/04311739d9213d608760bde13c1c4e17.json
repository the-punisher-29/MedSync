{"ast":null,"code":"var FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/;\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\n\nexport function isFloatingPointNumericCharacter(character) {\n  return FLOATING_POINT_REGEX.test(character);\n}\n/**\n * Determine if the event is a valid numeric keyboard event.\n * We use this so we can prevent non-number characters in the input\n */\n\nexport function isValidNumericKeyboardEvent(event) {\n  if (event.key == null) return true;\n  var isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n  if (isModifierKey) {\n    return true;\n  }\n  var isSingleCharacterKey = event.key.length === 1;\n  if (!isSingleCharacterKey) {\n    return true;\n  }\n  return isFloatingPointNumericCharacter(event.key);\n}","map":{"version":3,"sources":["../../src/utils.ts"],"names":["FLOATING_POINT_REGEX","isFloatingPointNumericCharacter","character","test","isValidNumericKeyboardEvent","event","key","isModifierKey","ctrlKey","altKey","metaKey","isSingleCharacterKey","length"],"mappings":"AAAA,IAAMA,oBAAoB,GAAG,eAA7B;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,+BAAT,CAAyCC,SAAzC,EAA4D;EACjE,OAAOF,oBAAoB,CAACG,IAArBH,CAA0BE,SAA1BF,CAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASI,2BAAT,CAAqCC,KAArC,EAAiE;EACtE,IAAIA,KAAK,CAACC,GAAND,IAAa,IAAjB,EAAuB,OAAO,IAAP;EAEvB,IAAME,aAAa,GAAGF,KAAK,CAACG,OAANH,IAAiBA,KAAK,CAACI,MAAvBJ,IAAiCA,KAAK,CAACK,OAA7D;EAEA,IAAIH,aAAJ,EAAmB;IACjB,OAAO,IAAP;EACD;EAED,IAAMI,oBAAoB,GAAGN,KAAK,CAACC,GAAND,CAAUO,MAAVP,KAAqB,CAAlD;EAEA,IAAI,CAACM,oBAAL,EAA2B;IACzB,OAAO,IAAP;EACD;EAED,OAAOV,+BAA+B,CAACI,KAAK,CAACC,GAAP,CAAtC;AACD","sourcesContent":["const FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/\n\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\nexport function isFloatingPointNumericCharacter(character: string) {\n  return FLOATING_POINT_REGEX.test(character)\n}\n\n/**\n * Determine if the event is a valid numeric keyboard event.\n * We use this so we can prevent non-number characters in the input\n */\nexport function isValidNumericKeyboardEvent(event: React.KeyboardEvent) {\n  if (event.key == null) return true\n\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey\n\n  if (isModifierKey) {\n    return true\n  }\n\n  const isSingleCharacterKey = event.key.length === 1\n\n  if (!isSingleCharacterKey) {\n    return true\n  }\n\n  return isFloatingPointNumericCharacter(event.key)\n}\n"]},"metadata":{},"sourceType":"module"}