{"ast":null,"code":"var _jsxFileName = \"E:\\\\Pr\\\\Web D\\\\MedSync\\\\src\\\\contexts\\\\OrderProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OrderContext = /*#__PURE__*/createContext();\nexport const OrderProvider = ({\n  children\n}) => {\n  _s();\n\n  const [orders, setOrders] = useState([]); // Function to add product to the cart\n\n  const handleCart = product => {\n    const existingProduct = orders.find(item => item.id === product.id);\n\n    if (existingProduct) {\n      // Increment quantity if product already in cart\n      updateProductQuantity(product.id, existingProduct.quantity + 1);\n    } else {\n      // Add product with quantity 1 if not in cart\n      setOrders([...orders, { ...product,\n        quantity: 1\n      }]);\n    }\n  }; // Function to update product quantity\n\n\n  const updateProductQuantity = (productId, newQuantity) => {\n    setOrders(prevOrders => prevOrders.map(item => item.id === productId ? { ...item,\n      quantity: newQuantity\n    } : item));\n  }; // Function to remove a product from the cart\n\n\n  const removeProduct = productId => {\n    setOrders(prevOrders => prevOrders.filter(item => item.id !== productId));\n  };\n\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: {\n      orders,\n      handleCart,\n      updateProductQuantity,\n      removeProduct\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(OrderProvider, \"fJydDDvPVS5YoOOIxPLx2ckW3UY=\");\n\n_c = OrderProvider;\nexport default OrderProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderProvider\");","map":{"version":3,"sources":["E:/Pr/Web D/MedSync/src/contexts/OrderProvider.js"],"names":["React","createContext","useContext","useState","OrderContext","OrderProvider","children","orders","setOrders","handleCart","product","existingProduct","find","item","id","updateProductQuantity","quantity","productId","newQuantity","prevOrders","map","removeProduct","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;;AAEA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,EAAlC;AAEP,OAAO,MAAMI,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC3C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC,CAD2C,CAG3C;;AACA,QAAMM,UAAU,GAAIC,OAAD,IAAa;AAC5B,UAAMC,eAAe,GAAGJ,MAAM,CAACK,IAAP,CAAaC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA1C,CAAxB;;AACA,QAAIH,eAAJ,EAAqB;AACjB;AACAI,MAAAA,qBAAqB,CAACL,OAAO,CAACI,EAAT,EAAaH,eAAe,CAACK,QAAhB,GAA2B,CAAxC,CAArB;AACH,KAHD,MAGO;AACH;AACAR,MAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAY,EAAE,GAAGG,OAAL;AAAcM,QAAAA,QAAQ,EAAE;AAAxB,OAAZ,CAAD,CAAT;AACH;AACJ,GATD,CAJ2C,CAe3C;;;AACA,QAAMD,qBAAqB,GAAG,CAACE,SAAD,EAAYC,WAAZ,KAA4B;AACtDV,IAAAA,SAAS,CAAEW,UAAD,IACNA,UAAU,CAACC,GAAX,CAAgBP,IAAD,IACXA,IAAI,CAACC,EAAL,KAAYG,SAAZ,GAAwB,EAAE,GAAGJ,IAAL;AAAWG,MAAAA,QAAQ,EAAEE;AAArB,KAAxB,GAA6DL,IADjE,CADK,CAAT;AAKH,GAND,CAhB2C,CAwB3C;;;AACA,QAAMQ,aAAa,GAAIJ,SAAD,IAAe;AACjCT,IAAAA,SAAS,CAAEW,UAAD,IAAgBA,UAAU,CAACG,MAAX,CAAmBT,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYG,SAAxC,CAAjB,CAAT;AACH,GAFD;;AAIA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEV,MAAAA,MAAF;AAAUE,MAAAA,UAAV;AAAsBM,MAAAA,qBAAtB;AAA6CM,MAAAA;AAA7C,KAA9B;AAAA,cACKf;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAlCM;;GAAMD,a;;KAAAA,a;AAoCb,eAAeA,aAAf","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nexport const OrderContext = createContext();\r\n\r\nexport const OrderProvider = ({ children }) => {\r\n    const [orders, setOrders] = useState([]);\r\n\r\n    // Function to add product to the cart\r\n    const handleCart = (product) => {\r\n        const existingProduct = orders.find((item) => item.id === product.id);\r\n        if (existingProduct) {\r\n            // Increment quantity if product already in cart\r\n            updateProductQuantity(product.id, existingProduct.quantity + 1);\r\n        } else {\r\n            // Add product with quantity 1 if not in cart\r\n            setOrders([...orders, { ...product, quantity: 1 }]);\r\n        }\r\n    };\r\n\r\n    // Function to update product quantity\r\n    const updateProductQuantity = (productId, newQuantity) => {\r\n        setOrders((prevOrders) =>\r\n            prevOrders.map((item) =>\r\n                item.id === productId ? { ...item, quantity: newQuantity } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    // Function to remove a product from the cart\r\n    const removeProduct = (productId) => {\r\n        setOrders((prevOrders) => prevOrders.filter((item) => item.id !== productId));\r\n    };\r\n\r\n    return (\r\n        <OrderContext.Provider value={{ orders, handleCart, updateProductQuantity, removeProduct }}>\r\n            {children}\r\n        </OrderContext.Provider>\r\n    );\r\n};\r\n\r\nexport default OrderProvider\r\n"]},"metadata":{},"sourceType":"module"}