{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { objectKeys } from \"@chakra-ui/utils\";\nimport { AnimatePresence } from \"framer-motion\";\nimport * as React from \"react\";\nimport { Toast } from \"./toast\";\nimport { findToast, getToastPosition } from \"./toast.utils\";\n\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\nexport class ToastManager extends React.Component {\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n\n  /**\n   * State to track all the toast across all positions\n   */\n  constructor(props) {\n    var _this;\n    super(props);\n    _this = this;\n    _defineProperty(this, \"state\", {\n      top: [],\n      \"top-left\": [],\n      \"top-right\": [],\n      \"bottom-left\": [],\n      bottom: [],\n      \"bottom-right\": []\n    });\n    _defineProperty(this, \"notify\", (message, options) => {\n      var toast = this.createToast(message, options);\n      var {\n        position,\n        id\n      } = toast;\n      this.setState(prevToasts => {\n        var isTop = position.includes(\"top\");\n        /**\n         * - If the toast is positioned at the top edges, the\n         * recent toast stacks on top of the other toasts.\n         *\n         * - If the toast is positioned at the bottom edges, the recent\n         * toast stacks below the other toasts.\n         */\n\n        var toasts = isTop ? [toast, ...prevToasts[position]] : [...prevToasts[position], toast];\n        return _extends({}, prevToasts, {\n          [position]: toasts\n        });\n      });\n      return id;\n    });\n    _defineProperty(this, \"updateToast\", (id, options) => {\n      this.setState(prevState => {\n        var nextState = _extends({}, prevState);\n        var {\n          position,\n          index\n        } = findToast(nextState, id);\n        if (position && index !== -1) {\n          nextState[position][index] = _extends({}, nextState[position][index], options);\n        }\n        return nextState;\n      });\n    });\n    _defineProperty(this, \"closeAll\", function (_temp) {\n      var {\n        positions\n      } = _temp === void 0 ? {} : _temp;\n\n      // only one setState here for perf reasons\n      // instead of spamming this.closeToast\n      _this.setState(prev => {\n        var allPositions = [\"bottom\", \"bottom-right\", \"bottom-left\", \"top\", \"top-left\", \"top-right\"];\n        var positionsToClose = positions != null ? positions : allPositions;\n        return positionsToClose.reduce((acc, position) => {\n          acc[position] = prev[position].map(toast => _extends({}, toast, {\n            requestClose: true\n          }));\n          return acc;\n        }, {});\n      });\n    });\n    _defineProperty(this, \"createToast\", (message, options) => {\n      var _options$id, _options$position;\n      ToastManager.counter += 1;\n      var id = (_options$id = options.id) != null ? _options$id : ToastManager.counter;\n      var position = (_options$position = options.position) != null ? _options$position : \"top\";\n      return {\n        id,\n        message,\n        position,\n        duration: options.duration,\n        onCloseComplete: options.onCloseComplete,\n        onRequestRemove: () => this.removeToast(String(id), position),\n        status: options.status,\n        requestClose: false\n      };\n    });\n    _defineProperty(this, \"closeToast\", id => {\n      this.setState(prevState => {\n        var position = getToastPosition(prevState, id);\n        if (!position) return prevState;\n        return _extends({}, prevState, {\n          [position]: prevState[position].map(toast => {\n            // id may be string or number\n            // eslint-disable-next-line eqeqeq\n            if (toast.id == id) {\n              return _extends({}, toast, {\n                requestClose: true\n              });\n            }\n            return toast;\n          })\n        });\n      });\n    });\n    _defineProperty(this, \"removeToast\", (id, position) => {\n      this.setState(prevState => _extends({}, prevState, {\n        // id may be string or number\n        // eslint-disable-next-line eqeqeq\n        [position]: prevState[position].filter(toast => toast.id != id)\n      }));\n    });\n    _defineProperty(this, \"isVisible\", id => {\n      var {\n        position\n      } = findToast(this.state, id);\n      return Boolean(position);\n    });\n    _defineProperty(this, \"getStyle\", position => {\n      var isTopOrBottom = position === \"top\" || position === \"bottom\";\n      var margin = isTopOrBottom ? \"0 auto\" : undefined;\n      var top = position.includes(\"top\") ? \"env(safe-area-inset-top, 0px)\" : undefined;\n      var bottom = position.includes(\"bottom\") ? \"env(safe-area-inset-bottom, 0px)\" : undefined;\n      var right = !position.includes(\"left\") ? \"env(safe-area-inset-right, 0px)\" : undefined;\n      var left = !position.includes(\"right\") ? \"env(safe-area-inset-left, 0px)\" : undefined;\n      return {\n        position: \"fixed\",\n        zIndex: 5500,\n        pointerEvents: \"none\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        margin,\n        top,\n        bottom,\n        right,\n        left\n      };\n    });\n    var methods = {\n      notify: this.notify,\n      closeAll: this.closeAll,\n      close: this.closeToast,\n      update: this.updateToast,\n      isActive: this.isVisible\n    };\n    props.notify(methods);\n  }\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n\n  render() {\n    return objectKeys(this.state).map(position => {\n      var toasts = this.state[position];\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        key: position,\n        id: \"chakra-toast-manager-\" + position,\n        style: this.getStyle(position)\n      }, /*#__PURE__*/React.createElement(AnimatePresence, {\n        initial: false\n      }, toasts.map(toast => /*#__PURE__*/React.createElement(Toast, _extends({\n        key: toast.id\n      }, toast)))));\n    });\n  }\n}\n_defineProperty(ToastManager, \"counter\", 0);","map":{"version":3,"sources":["../../src/toast-manager.tsx"],"names":["objectKeys","AnimatePresence","React","Toast","findToast","getToastPosition","ToastManager","Component","top","bottom","constructor","props","methods","notify","closeAll","close","closeToast","update","updateToast","isActive","isVisible","message","options","toast","createToast","position","id","setState","prevToasts","isTop","includes","toasts","prevState","nextState","index","positions","prev","allPositions","positionsToClose","reduce","acc","map","requestClose","counter","duration","onCloseComplete","onRequestRemove","removeToast","String","status","filter","state","Boolean","isTopOrBottom","margin","undefined","right","left","zIndex","pointerEvents","display","flexDirection","render","getStyle"],"mappings":"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","sourcesContent":["import { objectKeys } from \"@chakra-ui/utils\"\nimport { AnimatePresence } from \"framer-motion\"\nimport * as React from \"react\"\nimport { Toast } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport type {\n  CloseAllToastsOptions,\n  ToastId,\n  ToastMessage,\n  ToastOptions,\n  ToastState,\n} from \"./toast.types\"\nimport { findToast, getToastPosition } from \"./toast.utils\"\n\nexport interface ToastMethods {\n  notify: (message: ToastMessage, options: CreateToastOptions) => ToastId\n  closeAll: (options?: CloseAllToastsOptions) => void\n  close: (id: ToastId) => void\n  update: (id: ToastId, options: CreateToastOptions) => void\n  isActive: (id: ToastId) => boolean\n}\n\ninterface Props {\n  notify: (methods: ToastMethods) => void\n}\n\ntype CreateToastOptions = Partial<\n  Pick<\n    ToastOptions,\n    \"status\" | \"duration\" | \"position\" | \"id\" | \"onCloseComplete\"\n  >\n>\n\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\nexport class ToastManager extends React.Component<Props, ToastState> {\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n  static counter = 0\n\n  /**\n   * State to track all the toast across all positions\n   */\n  state: ToastState = {\n    top: [],\n    \"top-left\": [],\n    \"top-right\": [],\n    \"bottom-left\": [],\n    bottom: [],\n    \"bottom-right\": [],\n  }\n\n  constructor(props: Props) {\n    super(props)\n\n    const methods = {\n      notify: this.notify,\n      closeAll: this.closeAll,\n      close: this.closeToast,\n      update: this.updateToast,\n      isActive: this.isVisible,\n    }\n\n    props.notify(methods)\n  }\n\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n  notify = (message: ToastMessage, options: CreateToastOptions) => {\n    const toast = this.createToast(message, options)\n    const { position, id } = toast\n\n    this.setState((prevToasts) => {\n      const isTop = position.includes(\"top\")\n\n      /**\n       * - If the toast is positioned at the top edges, the\n       * recent toast stacks on top of the other toasts.\n       *\n       * - If the toast is positioned at the bottom edges, the recent\n       * toast stacks below the other toasts.\n       */\n      const toasts = isTop\n        ? [toast, ...prevToasts[position]]\n        : [...prevToasts[position], toast]\n\n      return {\n        ...prevToasts,\n        [position]: toasts,\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Update a specific toast with new options based on the\n   * passed `id`\n   */\n  updateToast = (id: ToastId, options: CreateToastOptions) => {\n    this.setState((prevState) => {\n      const nextState = { ...prevState }\n      const { position, index } = findToast(nextState, id)\n\n      if (position && index !== -1) {\n        nextState[position][index] = {\n          ...nextState[position][index],\n          ...options,\n        }\n      }\n\n      return nextState\n    })\n  }\n\n  /**\n   * Close all toasts at once.\n   * If given positions, will only close those.\n   */\n  closeAll = ({ positions }: CloseAllToastsOptions = {}) => {\n    // only one setState here for perf reasons\n    // instead of spamming this.closeToast\n    this.setState((prev) => {\n      const allPositions: ToastPosition[] = [\n        \"bottom\",\n        \"bottom-right\",\n        \"bottom-left\",\n        \"top\",\n        \"top-left\",\n        \"top-right\",\n      ]\n\n      const positionsToClose = positions ?? allPositions\n\n      return positionsToClose.reduce((acc, position) => {\n        acc[position] = prev[position].map((toast) => ({\n          ...toast,\n          requestClose: true,\n        }))\n\n        return acc\n      }, {})\n    })\n  }\n\n  /**\n   * Create properties for a new toast\n   */\n  createToast = (message: ToastMessage, options: CreateToastOptions) => {\n    ToastManager.counter += 1\n    const id = options.id ?? ToastManager.counter\n\n    const position = options.position ?? \"top\"\n\n    return {\n      id,\n      message,\n      position,\n      duration: options.duration,\n      onCloseComplete: options.onCloseComplete,\n      onRequestRemove: () => this.removeToast(String(id), position),\n      status: options.status,\n      requestClose: false,\n    }\n  }\n\n  /**\n   * Requests to close a toast based on its id and position\n   */\n  closeToast = (id: ToastId) => {\n    this.setState((prevState) => {\n      const position = getToastPosition(prevState, id)\n\n      if (!position) return prevState\n\n      return {\n        ...prevState,\n        [position]: prevState[position].map((toast) => {\n          // id may be string or number\n          // eslint-disable-next-line eqeqeq\n          if (toast.id == id) {\n            return {\n              ...toast,\n              requestClose: true,\n            }\n          }\n\n          return toast\n        }),\n      }\n    })\n  }\n\n  /**\n   * Delete a toast record at its position\n   */\n  removeToast = (id: ToastId, position: ToastPosition) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      // id may be string or number\n      // eslint-disable-next-line eqeqeq\n      [position]: prevState[position].filter((toast) => toast.id != id),\n    }))\n  }\n\n  isVisible = (id: ToastId) => {\n    const { position } = findToast(this.state, id)\n    return Boolean(position)\n  }\n\n  /**\n   * Compute the style of a toast based on its position\n   */\n  getStyle = (position: ToastPosition): React.CSSProperties => {\n    const isTopOrBottom = position === \"top\" || position === \"bottom\"\n    const margin = isTopOrBottom ? \"0 auto\" : undefined\n\n    const top = position.includes(\"top\")\n      ? \"env(safe-area-inset-top, 0px)\"\n      : undefined\n    const bottom = position.includes(\"bottom\")\n      ? \"env(safe-area-inset-bottom, 0px)\"\n      : undefined\n    const right = !position.includes(\"left\")\n      ? \"env(safe-area-inset-right, 0px)\"\n      : undefined\n    const left = !position.includes(\"right\")\n      ? \"env(safe-area-inset-left, 0px)\"\n      : undefined\n\n    return {\n      position: \"fixed\",\n      zIndex: 5500,\n      pointerEvents: \"none\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin,\n      top,\n      bottom,\n      right,\n      left,\n    }\n  }\n\n  render() {\n    return objectKeys(this.state).map((position) => {\n      const toasts = this.state[position]\n      return (\n        <ul\n          key={position}\n          id={`chakra-toast-manager-${position}`}\n          style={this.getStyle(position)}\n        >\n          <AnimatePresence initial={false}>\n            {toasts.map((toast) => (\n              <Toast key={toast.id} {...toast} />\n            ))}\n          </AnimatePresence>\n        </ul>\n      )\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}