{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useControllableState, useFocusOnPointerDown, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { ariaAttr, callAllHandlers, contains, focus, getRelatedTarget, isEmpty, normalizeEventKey } from \"@chakra-ui/utils\";\nimport { useCallback, useRef, useState } from \"react\";\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/editable\n */\nexport function useEditable(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n      onChange: onChangeProp,\n      onCancel: onCancelProp,\n      onSubmit: onSubmitProp,\n      value: valueProp,\n      isDisabled,\n      defaultValue,\n      startWithEditView,\n      isPreviewFocusable = true,\n      submitOnBlur = true,\n      selectAllOnFocus = true,\n      placeholder,\n      onEdit: onEditProp\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"onCancel\", \"onSubmit\", \"value\", \"isDisabled\", \"defaultValue\", \"startWithEditView\", \"isPreviewFocusable\", \"submitOnBlur\", \"selectAllOnFocus\", \"placeholder\", \"onEdit\"]);\n  var defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n  var [isEditing, setIsEditing] = useState(defaultIsEditing);\n  var [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n\n  var [prevValue, setPrevValue] = useState(value);\n  /**\n   * Ref to help focus the input in edit mode\n   */\n\n  var inputRef = useRef(null);\n  var previewRef = useRef(null);\n  var editButtonRef = useRef(null);\n  var cancelButtonRef = useRef(null);\n  var submitButtonRef = useRef(null);\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef]\n  });\n  var isInteractive = !isEditing || !isDisabled;\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      focus(editButtonRef.current);\n      return;\n    }\n    focus(inputRef.current, {\n      selectTextIfInput: selectAllOnFocus\n    });\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  var onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  var onCancel = useCallback(() => {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n  }, [onCancelProp, setValue, prevValue]);\n  var onSubmit = useCallback(() => {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n  }, [value, onSubmitProp]);\n  var onChange = useCallback(event => {\n    setValue(event.target.value);\n  }, [setValue]);\n  var onKeyDown = useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Escape: onCancel,\n      Enter: event => {\n        if (!event.shiftKey && !event.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  var isValueEmpty = isEmpty(value);\n  var onBlur = useCallback(event => {\n    var relatedTarget = getRelatedTarget(event);\n    var targetIsCancel = contains(cancelButtonRef.current, relatedTarget);\n    var targetIsSubmit = contains(submitButtonRef.current, relatedTarget);\n    var isValidBlur = !targetIsCancel && !targetIsSubmit;\n    if (isValidBlur && submitOnBlur) {\n      onSubmit();\n    }\n  }, [submitOnBlur, onSubmit]);\n  var getPreviewProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    var tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined;\n    return _extends({}, props, {\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex,\n      onFocus: callAllHandlers(props.onFocus, onEdit)\n    });\n  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, placeholder, value]);\n  var getInputProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({}, props, {\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n    });\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDown, placeholder, value]);\n  var getEditButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({\n      \"aria-label\": \"Edit\"\n    }, props, {\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef)\n    });\n  }, [onEdit]);\n  var getSubmitButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({}, props, {\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit)\n    });\n  }, [onSubmit]);\n  var getCancelButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\"\n    }, props, {\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel)\n    });\n  }, [onCancel]);\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps\n  };\n}","map":{"version":3,"sources":["../../src/use-editable.ts"],"names":["useControllableState","useFocusOnPointerDown","useUpdateEffect","mergeRefs","ariaAttr","callAllHandlers","contains","focus","getRelatedTarget","isEmpty","normalizeEventKey","useCallback","useRef","useState","useEditable","props","onChange","onChangeProp","onCancel","onCancelProp","onSubmit","onSubmitProp","value","valueProp","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEdit","onEditProp","htmlProps","defaultIsEditing","Boolean","isEditing","setIsEditing","setValue","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","cancelButtonRef","submitButtonRef","ref","enabled","elements","isInteractive","current","selectTextIfInput","event","target","onKeyDown","eventKey","keyMap","Escape","Enter","shiftKey","metaKey","action","preventDefault","isValueEmpty","onBlur","relatedTarget","targetIsCancel","targetIsSubmit","isValidBlur","getPreviewProps","tabIndex","undefined","children","hidden","onFocus","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,oBADF,EAEEC,qBAFF,EAGEC,eAHF,QAIO,kBAJP;AAKA,SAAsBC,SAAtB,QAAmD,wBAAnD;AACA,SACEC,QADF,EAEEC,eAFF,EAGEC,QAHF,EAIEC,KAJF,EAKEC,gBALF,EAMEC,OANF,EAOEC,iBAPF,QAQO,kBARP;AASA,SAAgBC,WAAhB,EAA6BC,MAA7B,EAAqCC,QAArC,QAAqD,OAArD;;AA0DA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAmD;EAAA,IAA9BA,KAA8B,KAAA,KAAA,CAAA,EAAA;IAA9BA,KAA8B,GAAJ,CAAA,CAAI;EAAA;EACxD,IAAM;MACJC,QAAQ,EAAEC,YADN;MAEJC,QAAQ,EAAEC,YAFN;MAGJC,QAAQ,EAAEC,YAHN;MAIJC,KAAK,EAAEC,SAJH;MAKJC,UALI;MAMJC,YANI;MAOJC,iBAPI;MAQJC,kBAAkB,GAAG,IARjB;MASJC,YAAY,GAAG,IATX;MAUJC,gBAAgB,GAAG,IAVf;MAWJC,WAXI;MAYJC,MAAM,EAAEC;IAZJ,CAAA,GAcFjB,KAdJ;IAaKkB,SAbL,GAAA,6BAAA,CAcIlB,KAdJ,EAAA,CAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,OAAA,EAAA,YAAA,EAAA,cAAA,EAAA,mBAAA,EAAA,oBAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,QAAA,CAAA,CAAA;EAgBA,IAAMmB,gBAAgB,GAAGC,OAAO,CAACT,iBAAiB,IAAI,CAACF,UAAvB,CAAhC;EAEA,IAAM,CAACY,SAAD,EAAYC,YAAZ,CAAA,GAA4BxB,QAAQ,CAACqB,gBAAD,CAA1C;EAEA,IAAM,CAACZ,KAAD,EAAQgB,QAAR,CAAA,GAAoBtC,oBAAoB,CAAC;IAC7CyB,YAAY,EAAEA,YAAY,IAAI,EADe;IAE7CH,KAAK,EAAEC,SAFsC;IAG7CP,QAAQ,EAAEC;EAHmC,CAAD,CAA9C;EAMA;AACF;AACA;AACA;;EACE,IAAM,CAACsB,SAAD,EAAYC,YAAZ,CAAA,GAA4B3B,QAAQ,CAACS,KAAD,CAA1C;EAEA;AACF;AACA;;EACE,IAAMmB,QAAQ,GAAG7B,MAAM,CAAmB,IAAnB,CAAvB;EACA,IAAM8B,UAAU,GAAG9B,MAAM,CAAM,IAAN,CAAzB;EAEA,IAAM+B,aAAa,GAAG/B,MAAM,CAAoB,IAApB,CAA5B;EACA,IAAMgC,eAAe,GAAGhC,MAAM,CAAc,IAAd,CAA9B;EACA,IAAMiC,eAAe,GAAGjC,MAAM,CAAc,IAAd,CAA9B;EAEAX,qBAAqB,CAAC;IACpB6C,GAAG,EAAEL,QADe;IAEpBM,OAAO,EAAEX,SAFW;IAGpBY,QAAQ,EAAE,CAACJ,eAAD,EAAkBC,eAAlB;EAHU,CAAD,CAArB5C;EAMA,IAAMgD,aAAa,GAAG,CAACb,SAAD,IAAc,CAACZ,UAArC;EAEAtB,eAAe,CAAC,MAAM;IACpB,IAAI,CAACkC,SAAL,EAAgB;MACd7B,KAAK,CAACoC,aAAa,CAACO,OAAf,CAAL3C;MACA;IACD;IAEDA,KAAK,CAACkC,QAAQ,CAACS,OAAV,EAAmB;MACtBC,iBAAiB,EAAEtB;IADG,CAAnB,CAALtB;IAIAyB,UAAU,IAAA,IAAVA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAA,CAAA;EACX,CAXc,EAWZ,CAACI,SAAD,EAAYJ,UAAZ,EAAwBH,gBAAxB,CAXY,CAAf3B;EAaA,IAAM6B,MAAM,GAAGpB,WAAW,CAAC,MAAM;IAC/B,IAAIsC,aAAJ,EAAmB;MACjBZ,YAAY,CAAC,IAAD,CAAZA;IACD;EACF,CAJyB,EAIvB,CAACY,aAAD,CAJuB,CAA1B;EAMA,IAAM/B,QAAQ,GAAGP,WAAW,CAAC,MAAM;IACjC0B,YAAY,CAAC,KAAD,CAAZA;IACAC,QAAQ,CAACC,SAAD,CAARD;IACAnB,YAAY,IAAA,IAAZA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAGoB,SAAH,CAAZpB;EACD,CAJ2B,EAIzB,CAACA,YAAD,EAAemB,QAAf,EAAyBC,SAAzB,CAJyB,CAA5B;EAMA,IAAMnB,QAAQ,GAAGT,WAAW,CAAC,MAAM;IACjC0B,YAAY,CAAC,KAAD,CAAZA;IACAG,YAAY,CAAClB,KAAD,CAAZkB;IACAnB,YAAY,IAAA,IAAZA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAGC,KAAH,CAAZD;EACD,CAJ2B,EAIzB,CAACC,KAAD,EAAQD,YAAR,CAJyB,CAA5B;EAMA,IAAML,QAAQ,GAAGL,WAAW,CACzByC,KAAD,IAAgD;IAC9Cd,QAAQ,CAACc,KAAK,CAACC,MAAND,CAAa9B,KAAd,CAARgB;EACD,CAHyB,EAI1B,CAACA,QAAD,CAJ0B,CAA5B;EAOA,IAAMgB,SAAS,GAAG3C,WAAW,CAC1ByC,KAAD,IAAgC;IAC9B,IAAMG,QAAQ,GAAG7C,iBAAiB,CAAC0C,KAAD,CAAlC;IAEA,IAAMI,MAAmB,GAAG;MAC1BC,MAAM,EAAEvC,QADkB;MAE1BwC,KAAK,EAAGN,KAAD,IAAW;QAChB,IAAI,CAACA,KAAK,CAACO,QAAP,IAAmB,CAACP,KAAK,CAACQ,OAA9B,EAAuC;UACrCxC,QAAQ,CAAA,CAAA;QACT;MACF;IANyB,CAA5B;IASA,IAAMyC,MAAM,GAAGL,MAAM,CAACD,QAAD,CAArB;IAEA,IAAIM,MAAJ,EAAY;MACVT,KAAK,CAACU,cAANV,CAAAA,CAAAA;MACAS,MAAM,CAACT,KAAD,CAANS;IACD;EACF,CAnB0B,EAoB3B,CAAC3C,QAAD,EAAWE,QAAX,CApB2B,CAA7B;EAuBA,IAAM2C,YAAY,GAAGtD,OAAO,CAACa,KAAD,CAA5B;EAEA,IAAM0C,MAAM,GAAGrD,WAAW,CACvByC,KAAD,IAA6B;IAC3B,IAAMa,aAAa,GAAGzD,gBAAgB,CAAC4C,KAAD,CAAtC;IACA,IAAMc,cAAc,GAAG5D,QAAQ,CAACsC,eAAe,CAACM,OAAjB,EAA0Be,aAA1B,CAA/B;IACA,IAAME,cAAc,GAAG7D,QAAQ,CAACuC,eAAe,CAACK,OAAjB,EAA0Be,aAA1B,CAA/B;IACA,IAAMG,WAAW,GAAG,CAACF,cAAD,IAAmB,CAACC,cAAxC;IAEA,IAAIC,WAAW,IAAIxC,YAAnB,EAAiC;MAC/BR,QAAQ,CAAA,CAAA;IACT;EACF,CAVuB,EAWxB,CAACQ,YAAD,EAAeR,QAAf,CAXwB,CAA1B;EAcA,IAAMiD,eAA2B,GAAG1D,WAAW,CAC7C,UAACI,KAAD,EAAa+B,GAAb,EAA4B;IAAA,IAA3B/B,KAA2B,KAAA,KAAA,CAAA,EAAA;MAA3BA,KAA2B,GAAnB,CAAA,CAAmB;IAAA;IAAA,IAAf+B,GAAe,KAAA,KAAA,CAAA,EAAA;MAAfA,GAAe,GAAT,IAAS;IAAA;IAC1B,IAAMwB,QAAQ,GAAGrB,aAAa,IAAItB,kBAAjBsB,GAAsC,CAAtCA,GAA0CsB,SAA3D;IACA,OAAA,QAAA,CAAA,CAAA,CAAA,EACKxD,KADL,EAAA;MAEE+B,GAAG,EAAE3C,SAAS,CAAC2C,GAAD,EAAMJ,UAAN,CAFhB;MAGE8B,QAAQ,EAAET,YAAY,GAAGjC,WAAH,GAAiBR,KAHzC;MAIEmD,MAAM,EAAErC,SAJV;MAKE,eAAA,EAAiBhC,QAAQ,CAACoB,UAAD,CAL3B;MAME8C,QANF;MAOEI,OAAO,EAAErE,eAAe,CAACU,KAAK,CAAC2D,OAAP,EAAgB3C,MAAhB;IAP1B,CAAA,CAAA;EASD,CAZ4C,EAa7C,CACEP,UADF,EAEEY,SAFF,EAGEa,aAHF,EAIEtB,kBAJF,EAKEoC,YALF,EAMEhC,MANF,EAOED,WAPF,EAQER,KARF,CAb6C,CAA/C;EAyBA,IAAMqD,aAAyB,GAAGhE,WAAW,CAC3C,UAACI,KAAD,EAAa+B,GAAb,EAAA;IAAA,IAAC/B,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAS,CAAA,CAAT;IAAA;IAAA,IAAa+B,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAmB,IAAnB;IAAA;IAAA,OAAA,QAAA,CAAA,CAAA,CAAA,EACK/B,KADL,EAAA;MAEE0D,MAAM,EAAE,CAACrC,SAFX;MAGEN,WAHF;MAIEgB,GAAG,EAAE3C,SAAS,CAAC2C,GAAD,EAAML,QAAN,CAJhB;MAKEmC,QAAQ,EAAEpD,UALZ;MAME,eAAA,EAAiBpB,QAAQ,CAACoB,UAAD,CAN3B;MAOEF,KAPF;MAQE0C,MAAM,EAAE3D,eAAe,CAACU,KAAK,CAACiD,MAAP,EAAeA,MAAf,CARzB;MASEhD,QAAQ,EAAEX,eAAe,CAACU,KAAK,CAACC,QAAP,EAAiBA,QAAjB,CAT3B;MAUEsC,SAAS,EAAEjD,eAAe,CAACU,KAAK,CAACuC,SAAP,EAAkBA,SAAlB;IAV5B,CAAA,CAAA;EAAA,CAD2C,EAa3C,CAAC9B,UAAD,EAAaY,SAAb,EAAwB4B,MAAxB,EAAgChD,QAAhC,EAA0CsC,SAA1C,EAAqDxB,WAArD,EAAkER,KAAlE,CAb2C,CAA7C;EAgBA,IAAMuD,kBAA8B,GAAGlE,WAAW,CAChD,UAACI,KAAD,EAAa+B,GAAb,EAAA;IAAA,IAAC/B,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAS,CAAA,CAAT;IAAA;IAAA,IAAa+B,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAmB,IAAnB;IAAA;IAAA,OAAA,QAAA,CAAA;MACE,YAAA,EAAc;IADhB,CAAA,EAEK/B,KAFL,EAAA;MAGE+D,IAAI,EAAE,QAHR;MAIEC,OAAO,EAAE1E,eAAe,CAACU,KAAK,CAACgE,OAAP,EAAgBhD,MAAhB,CAJ1B;MAKEe,GAAG,EAAE3C,SAAS,CAAC2C,GAAD,EAAMH,aAAN;IALhB,CAAA,CAAA;EAAA,CADgD,EAQhD,CAACZ,MAAD,CARgD,CAAlD;EAWA,IAAMiD,oBAAgC,GAAGrE,WAAW,CAClD,UAACI,KAAD,EAAa+B,GAAb,EAAA;IAAA,IAAC/B,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAS,CAAA,CAAT;IAAA;IAAA,IAAa+B,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAmB,IAAnB;IAAA;IAAA,OAAA,QAAA,CAAA,CAAA,CAAA,EACK/B,KADL,EAAA;MAEE,YAAA,EAAc,QAFhB;MAGE+B,GAAG,EAAE3C,SAAS,CAAC0C,eAAD,EAAkBC,GAAlB,CAHhB;MAIEgC,IAAI,EAAE,QAJR;MAKEC,OAAO,EAAE1E,eAAe,CAACU,KAAK,CAACgE,OAAP,EAAgB3D,QAAhB;IAL1B,CAAA,CAAA;EAAA,CADkD,EAQlD,CAACA,QAAD,CARkD,CAApD;EAWA,IAAM6D,oBAAgC,GAAGtE,WAAW,CAClD,UAACI,KAAD,EAAa+B,GAAb,EAAA;IAAA,IAAC/B,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAS,CAAA,CAAT;IAAA;IAAA,IAAa+B,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAmB,IAAnB;IAAA;IAAA,OAAA,QAAA,CAAA;MACE,YAAA,EAAc,QADhB;MAEEoC,EAAE,EAAE;IAFN,CAAA,EAGKnE,KAHL,EAAA;MAIE+B,GAAG,EAAE3C,SAAS,CAACyC,eAAD,EAAkBE,GAAlB,CAJhB;MAKEgC,IAAI,EAAE,QALR;MAMEC,OAAO,EAAE1E,eAAe,CAACU,KAAK,CAACgE,OAAP,EAAgB7D,QAAhB;IAN1B,CAAA,CAAA;EAAA,CADkD,EASlD,CAACA,QAAD,CATkD,CAApD;EAYA,OAAO;IACLkB,SADK;IAELZ,UAFK;IAGLuC,YAHK;IAILzC,KAJK;IAKLS,MALK;IAMLb,QANK;IAOLE,QAPK;IAQLiD,eARK;IASLM,aATK;IAULE,kBAVK;IAWLG,oBAXK;IAYLC,oBAZK;IAaLhD;EAbK,CAAP;AAeD","sourcesContent":["import {\n  useControllableState,\n  useFocusOnPointerDown,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { EventKeyMap, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  contains,\n  focus,\n  getRelatedTarget,\n  isEmpty,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport React, { useCallback, useRef, useState } from \"react\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      focus(editButtonRef.current)\n      return\n    }\n\n    focus(inputRef.current, {\n      selectTextIfInput: selectAllOnFocus,\n    })\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const isValueEmpty = isEmpty(value)\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      const relatedTarget = getRelatedTarget(event)\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur && submitOnBlur) {\n        onSubmit()\n      }\n    },\n    [submitOnBlur, onSubmit],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [isDisabled, isEditing, onBlur, onChange, onKeyDown, placeholder, value],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n    }),\n    [onEdit],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n    }),\n    [onSubmit],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n    }),\n    [onCancel],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"]},"metadata":{},"sourceType":"module"}