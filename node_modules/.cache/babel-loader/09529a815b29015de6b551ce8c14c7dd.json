{"ast":null,"code":"import * as React from \"react\";\n/**\n * Checks if the key pressed is a printable character\n * and can be used for shortcut navigation\n */\n\nfunction isPrintableCharacter(event) {\n  var {\n    key\n  } = event;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\n\n/**\n * React hook that provides an enhanced keydown handler,\n * that's used for key navigation within menus, select dropdowns.\n */\nexport function useShortcut(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    timeout = 300,\n    preventDefault = () => true\n  } = props;\n  var [keys, setKeys] = React.useState([]);\n  var timeoutRef = React.useRef();\n  var flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n  var clearKeysAfterDelay = () => {\n    flush();\n    timeoutRef.current = setTimeout(() => {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n  React.useEffect(() => flush, []);\n  function onKeyDown(fn) {\n    return event => {\n      if (event.key === \"Backspace\") {\n        var keysCopy = [...keys];\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n      if (isPrintableCharacter(event)) {\n        var _keysCopy = keys.concat(event.key);\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        setKeys(_keysCopy);\n        fn(_keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n  return onKeyDown;\n}","map":{"version":3,"sources":["../../src/use-shortcut.ts"],"names":["React","isPrintableCharacter","event","key","length","test","useShortcut","props","timeout","preventDefault","keys","setKeys","useState","timeoutRef","useRef","flush","current","clearTimeout","clearKeysAfterDelay","setTimeout","useEffect","onKeyDown","fn","keysCopy","pop","concat","stopPropagation","join"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,CAA8BC,KAA9B,EAA0D;EACxD,IAAM;IAAEC;EAAF,CAAA,GAAUD,KAAhB;EACA,OAAOC,GAAG,CAACC,MAAJD,KAAe,CAAfA,IAAqBA,GAAG,CAACC,MAAJD,GAAa,CAAbA,IAAkB,cAAA,CAAeE,IAAf,CAAoBF,GAApB,CAA9C;AACD;;AAOD;AACA;AACA;AACA;AACA,OAAO,SAASG,WAAT,CAAqBC,KAArB,EAAmD;EAAA,IAA9BA,KAA8B,KAAA,KAAA,CAAA,EAAA;IAA9BA,KAA8B,GAAJ,CAAA,CAAI;EAAA;EACxD,IAAM;IAAEC,OAAO,GAAG,GAAZ;IAAiBC,cAAc,GAAG,CAAA,KAAM;EAAxC,CAAA,GAAiDF,KAAvD;EAEA,IAAM,CAACG,IAAD,EAAOC,OAAP,CAAA,GAAkBX,KAAK,CAACY,QAANZ,CAAyB,EAAzBA,CAAxB;EACA,IAAMa,UAAU,GAAGb,KAAK,CAACc,MAANd,CAAAA,CAAnB;EAEA,IAAMe,KAAK,GAAG,CAAA,KAAM;IAClB,IAAIF,UAAU,CAACG,OAAf,EAAwB;MACtBC,YAAY,CAACJ,UAAU,CAACG,OAAZ,CAAZC;MACAJ,UAAU,CAACG,OAAXH,GAAqB,IAArBA;IACD;EACF,CALD;EAOA,IAAMK,mBAAmB,GAAG,CAAA,KAAM;IAChCH,KAAK,CAAA,CAAA;IACLF,UAAU,CAACG,OAAXH,GAAqBM,UAAU,CAAC,MAAM;MACpCR,OAAO,CAAC,EAAD,CAAPA;MACAE,UAAU,CAACG,OAAXH,GAAqB,IAArBA;IACD,CAH8B,EAG5BL,OAH4B,CAA/BK;EAID,CAND;EAQAb,KAAK,CAACoB,SAANpB,CAAgB,MAAMe,KAAtBf,EAA6B,EAA7BA,CAAAA;EAIA,SAASqB,SAAT,CAAmBC,EAAnB,EAAiC;IAC/B,OAAQpB,KAAD,IAAgC;MACrC,IAAIA,KAAK,CAACC,GAAND,KAAc,WAAlB,EAA+B;QAC7B,IAAMqB,QAAQ,GAAG,CAAC,GAAGb,IAAJ,CAAjB;QACAa,QAAQ,CAACC,GAATD,CAAAA,CAAAA;QACAZ,OAAO,CAACY,QAAD,CAAPZ;QACA;MACD;MAED,IAAIV,oBAAoB,CAACC,KAAD,CAAxB,EAAiC;QAC/B,IAAMqB,SAAQ,GAAGb,IAAI,CAACe,MAALf,CAAYR,KAAK,CAACC,GAAlBO,CAAjB;QAEA,IAAID,cAAc,CAACP,KAAD,CAAlB,EAA2B;UACzBA,KAAK,CAACO,cAANP,CAAAA,CAAAA;UACAA,KAAK,CAACwB,eAANxB,CAAAA,CAAAA;QACD;QAEDS,OAAO,CAACY,SAAD,CAAPZ;QACAW,EAAE,CAACC,SAAQ,CAACI,IAATJ,CAAc,EAAdA,CAAD,CAAFD;QAEAJ,mBAAmB,CAAA,CAAA;MACpB;IACF,CArBD;EAsBD;EAED,OAAOG,SAAP;AACD","sourcesContent":["import * as React from \"react\"\n\n/**\n * Checks if the key pressed is a printable character\n * and can be used for shortcut navigation\n */\nfunction isPrintableCharacter(event: React.KeyboardEvent) {\n  const { key } = event\n  return key.length === 1 || (key.length > 1 && /[^a-zA-Z0-9]/.test(key))\n}\n\nexport interface UseShortcutProps {\n  timeout?: number\n  preventDefault?: (event: React.KeyboardEvent) => boolean\n}\n\n/**\n * React hook that provides an enhanced keydown handler,\n * that's used for key navigation within menus, select dropdowns.\n */\nexport function useShortcut(props: UseShortcutProps = {}) {\n  const { timeout = 300, preventDefault = () => true } = props\n\n  const [keys, setKeys] = React.useState<string[]>([])\n  const timeoutRef = React.useRef<any>()\n\n  const flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = null\n    }\n  }\n\n  const clearKeysAfterDelay = () => {\n    flush()\n    timeoutRef.current = setTimeout(() => {\n      setKeys([])\n      timeoutRef.current = null\n    }, timeout)\n  }\n\n  React.useEffect(() => flush, [])\n\n  type Callback = (keysSoFar: string) => void\n\n  function onKeyDown(fn: Callback) {\n    return (event: React.KeyboardEvent) => {\n      if (event.key === \"Backspace\") {\n        const keysCopy = [...keys]\n        keysCopy.pop()\n        setKeys(keysCopy)\n        return\n      }\n\n      if (isPrintableCharacter(event)) {\n        const keysCopy = keys.concat(event.key)\n\n        if (preventDefault(event)) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n\n        setKeys(keysCopy)\n        fn(keysCopy.join(\"\"))\n\n        clearKeysAfterDelay()\n      }\n    }\n  }\n\n  return onKeyDown\n}\n"]},"metadata":{},"sourceType":"module"}