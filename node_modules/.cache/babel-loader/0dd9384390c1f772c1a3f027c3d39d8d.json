{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nvar [ButtonGroupProvider, useButtonGroup] = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n});\nexport { useButtonGroup };\nexport var ButtonGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      size,\n      colorScheme,\n      variant,\n      className,\n      spacing = \"0.5rem\",\n      isAttached,\n      isDisabled\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"size\", \"colorScheme\", \"variant\", \"className\", \"spacing\", \"isAttached\", \"isDisabled\"]);\n  var _className = cx(\"chakra-button__group\", className);\n  var context = React.useMemo(() => ({\n    size,\n    colorScheme,\n    variant,\n    isDisabled\n  }), [size, colorScheme, variant, isDisabled]);\n  var groupStyles = {\n    display: \"inline-flex\"\n  };\n  if (isAttached) {\n    groupStyles = _extends({}, groupStyles, {\n      \"> *:first-of-type:not(:last-of-type)\": {\n        borderEndRadius: 0\n      },\n      \"> *:not(:first-of-type):not(:last-of-type)\": {\n        borderRadius: 0\n      },\n      \"> *:not(:first-of-type):last-of-type\": {\n        borderStartRadius: 0\n      }\n    });\n  } else {\n    groupStyles = _extends({}, groupStyles, {\n      \"& > *:not(style) ~ *:not(style)\": {\n        marginStart: spacing\n      }\n    });\n  }\n  return /*#__PURE__*/React.createElement(ButtonGroupProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    role: \"group\",\n    __css: groupStyles,\n    className: _className\n  }, rest)));\n});\nif (__DEV__) {\n  ButtonGroup.displayName = \"ButtonGroup\";\n}","map":{"version":3,"sources":["../../src/button-group.tsx"],"names":["chakra","forwardRef","cx","__DEV__","createContext","React","ButtonGroupProvider","useButtonGroup","strict","name","ButtonGroup","props","ref","size","colorScheme","variant","className","spacing","isAttached","isDisabled","rest","_className","context","useMemo","groupStyles","display","borderEndRadius","borderRadius","borderStartRadius","marginStart","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAOO,mBAPP;AAQA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AA0BA,IAAM,CAACC,mBAAD,EAAsBC,cAAtB,CAAA,GAAwCH,aAAa,CACzD;EACEI,MAAM,EAAE,KADV;EAEEC,IAAI,EAAE;AAFR,CADyD,CAA3D;AAOA,SAASF,cAAT;AAEA,OAAO,IAAMG,WAAW,GAAA,aAAGT,UAAU,CAA0B,CAACU,KAAD,EAAQC,GAAR,KAAgB;EAC7E,IAAM;MACJC,IADI;MAEJC,WAFI;MAGJC,OAHI;MAIJC,SAJI;MAKJC,OAAO,GAAG,QALN;MAMJC,UANI;MAOJC;IAPI,CAAA,GASFR,KATJ;IAQKS,IARL,GAAA,6BAAA,CASIT,KATJ,EAAA,CAAA,MAAA,EAAA,aAAA,EAAA,SAAA,EAAA,WAAA,EAAA,SAAA,EAAA,YAAA,EAAA,YAAA,CAAA,CAAA;EAWA,IAAMU,UAAU,GAAGnB,EAAE,CAAC,sBAAD,EAAyBc,SAAzB,CAArB;EAEA,IAAMM,OAAO,GAAG,KAAK,CAACC,OAAN,CACd,OAAO;IAAEV,IAAF;IAAQC,WAAR;IAAqBC,OAArB;IAA8BI;EAA9B,CAAP,CADc,EAEd,CAACN,IAAD,EAAOC,WAAP,EAAoBC,OAApB,EAA6BI,UAA7B,CAFc,CAAhB;EAKA,IAAIK,WAA8B,GAAG;IACnCC,OAAO,EAAE;EAD0B,CAArC;EAIA,IAAIP,UAAJ,EAAgB;IACdM,WAAW,GAAA,QAAA,CAAA,CAAA,CAAA,EACNA,WADM,EAAA;MAET,sCAAA,EAAwC;QAAEE,eAAe,EAAE;MAAnB,CAF/B;MAGT,4CAAA,EAA8C;QAAEC,YAAY,EAAE;MAAhB,CAHrC;MAIT,sCAAA,EAAwC;QAAEC,iBAAiB,EAAE;MAArB;IAJ/B,CAAA,CAAXJ;EAMD,CAPD,MAOO;IACLA,WAAW,GAAA,QAAA,CAAA,CAAA,CAAA,EACNA,WADM,EAAA;MAET,iCAAA,EAAmC;QAAEK,WAAW,EAAEZ;MAAf;IAF1B,CAAA,CAAXO;EAID;EAED,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAA;IAAqB,KAAK,EAAEF;EAA5B,CAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,GAAR,EAAA,QAAA,CAAA;IACE,GAAG,EAAEV,GADP;IAEE,IAAI,EAAC,OAFP;IAGE,KAAK,EAAEY,WAHT;IAIE,SAAS,EAAEH;EAJb,CAAA,EAKMD,IALN,CAAA,CADF,CADF;AAWD,CAhDoC,CAA9B;AAkDP,IAAIjB,OAAJ,EAAa;EACXO,WAAW,CAACoB,WAAZpB,GAA0B,aAA1BA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface ButtonGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Button\"> {\n  /**\n   * If `true`, the borderRadius of button that are direct children will be altered\n   * to look flushed together\n   */\n  isAttached?: boolean\n  /**\n   * If `true`, all wrapped button will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The spacing between the buttons\n   * @default '0.5rem'\n   * @type SystemProps[\"marginRight\"]\n   */\n  spacing?: SystemProps[\"marginRight\"]\n}\n\ninterface ButtonGroupContext extends ThemingProps<\"ButtonGroup\"> {\n  isDisabled?: boolean\n}\n\nconst [ButtonGroupProvider, useButtonGroup] = createContext<ButtonGroupContext>(\n  {\n    strict: false,\n    name: \"ButtonGroupContext\",\n  },\n)\n\nexport { useButtonGroup }\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">((props, ref) => {\n  const {\n    size,\n    colorScheme,\n    variant,\n    className,\n    spacing = \"0.5rem\",\n    isAttached,\n    isDisabled,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__group\", className)\n\n  const context = React.useMemo(\n    () => ({ size, colorScheme, variant, isDisabled }),\n    [size, colorScheme, variant, isDisabled],\n  )\n\n  let groupStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n  }\n\n  if (isAttached) {\n    groupStyles = {\n      ...groupStyles,\n      \"> *:first-of-type:not(:last-of-type)\": { borderEndRadius: 0 },\n      \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n      \"> *:not(:first-of-type):last-of-type\": { borderStartRadius: 0 },\n    }\n  } else {\n    groupStyles = {\n      ...groupStyles,\n      \"& > *:not(style) ~ *:not(style)\": { marginStart: spacing },\n    }\n  }\n\n  return (\n    <ButtonGroupProvider value={context}>\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        className={_className}\n        {...rest}\n      />\n    </ButtonGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  ButtonGroup.displayName = \"ButtonGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}