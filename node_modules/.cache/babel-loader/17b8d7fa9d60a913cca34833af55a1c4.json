{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport React from \"react\";\nimport createMediaQueries from \"./create-media-query\";\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint) {\n  var {\n    breakpoints\n  } = useTheme();\n  var env = useEnvironment();\n  var mediaQueries = React.useMemo(() => createMediaQueries(_extends({\n    base: \"0px\"\n  }, breakpoints)), [breakpoints]);\n  var [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n    var mediaQuery = mediaQueries.find(_ref => {\n      var {\n        breakpoint\n      } = _ref;\n      return breakpoint === defaultBreakpoint;\n    });\n    if (mediaQuery) {\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, [\"query\"]);\n      return breakpoint;\n    }\n    return undefined;\n  });\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React.useCallback((query, breakpoint) => {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React.useEffect(() => {\n    var listeners = new Set();\n    mediaQueries.forEach(_ref2 => {\n      var {\n          query\n        } = _ref2,\n        breakpoint = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n      var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n      var handleChange = () => {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery,\n        handleChange\n      });\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(_ref3 => {\n        var {\n          mediaQuery,\n          handleChange\n        } = _ref3;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update, env.window]);\n  return current;\n}","map":{"version":3,"sources":["../../src/use-breakpoint.ts"],"names":["useEnvironment","useTheme","React","createMediaQueries","useBreakpoint","defaultBreakpoint","breakpoints","env","mediaQueries","useMemo","base","currentBreakpoint","setCurrentBreakpoint","useState","undefined","mediaQuery","find","breakpoint","current","update","useCallback","query","matches","useEffect","listeners","Set","forEach","window","matchMedia","handleChange","addListener","add","removeListener","clear"],"mappings":"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","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n  const env = useEnvironment()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = env.window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update, env.window])\n\n  return current\n}\n"]},"metadata":{},"sourceType":"module"}