{"ast":null,"code":"import { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { Global, ThemeContext, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport * as React from \"react\";\nexport var ThemeProvider = props => {\n  var {\n    cssVarsRoot = \":host, :root\",\n    theme,\n    children\n  } = props;\n  var computedTheme = React.useMemo(() => toCSSVar(theme), [theme]);\n  return /*#__PURE__*/React.createElement(EmotionThemeProvider, {\n    theme: computedTheme\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: theme => ({\n      [cssVarsRoot]: theme.__cssVars\n    })\n  }), children);\n};\nexport function useTheme() {\n  var theme = React.useContext(ThemeContext);\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\");\n  }\n  return theme;\n}\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nexport { StylesProvider, useStyles };\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\n\nexport var GlobalStyle = () => {\n  var {\n    colorMode\n  } = useColorMode();\n  return /*#__PURE__*/React.createElement(Global, {\n    styles: theme => {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return undefined;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n};","map":{"version":3,"sources":["../../src/providers.tsx"],"names":["useColorMode","css","toCSSVar","memoizedGet","get","runIfFn","createContext","Global","ThemeContext","ThemeProvider","EmotionThemeProvider","React","props","cssVarsRoot","theme","children","computedTheme","useMemo","__cssVars","useTheme","useContext","Error","StylesProvider","useStyles","name","errorMessage","GlobalStyle","colorMode","styleObjectOrFn","globalStyles","undefined","styles"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SACEC,GADF,EAGEC,QAHF,QAKO,0BALP;AAMA,SAAeC,WAAW,IAAIC,GAA9B,EAAmCC,OAAnC,QAAkD,kBAAlD;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SACEC,MADF,EAGEC,YAHF,EAIEC,aAAa,IAAIC,oBAJnB,QAMO,gBANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAUA,OAAO,IAAMF,aAAa,GAAIG,KAAD,IAA+B;EAC1D,IAAM;IAAEC,WAAW,GAAG,cAAhB;IAAgCC,KAAhC;IAAuCC;EAAvC,CAAA,GAAoDH,KAA1D;EACA,IAAMI,aAAa,GAAGL,KAAK,CAACM,OAANN,CAAc,MAAMT,QAAQ,CAACY,KAAD,CAA5BH,EAAqC,CAACG,KAAD,CAArCH,CAAtB;EACA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAA;IAAsB,KAAK,EAAEK;EAA7B,CAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA;IAAQ,MAAM,EAAGF,KAAD,KAAiB;MAAE,CAACD,WAAD,GAAeC,KAAK,CAACI;IAAvB,CAAjB;EAAhB,CAAA,CADF,EAEGH,QAFH,CADF;AAMD,CATM;AAWP,OAAO,SAASI,QAAT,CAAA,EAA6C;EAClD,IAAML,KAAK,GAAGH,KAAK,CAACS,UAANT,CACXH,YADWG,CAAd;EAGA,IAAI,CAACG,KAAL,EAAY;IACV,MAAMO,KAAK,CACT,kHADS,CAAX;EAGD;EAED,OAAOP,KAAP;AACD;AAED,IAAM,CAACQ,cAAD,EAAiBC,SAAjB,CAAA,GAA8BjB,aAAa,CAA0B;EACzEkB,IAAI,EAAE,eADmE;EAEzEC,YAAY,EACV;AAHuE,CAA1B,CAAjD;AAKA,SAASH,cAAT,EAAyBC,SAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,WAAW,GAAG,CAAA,KAAM;EAC/B,IAAM;IAAEC;EAAF,CAAA,GAAgB3B,YAAY,CAAA,CAAlC;EACA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA;IACE,MAAM,EAAGc,KAAD,IAAgB;MACtB,IAAMc,eAAe,GAAGxB,GAAG,CAACU,KAAD,EAAQ,eAAR,CAA3B;MACA,IAAMe,YAAY,GAAGxB,OAAO,CAACuB,eAAD,EAAkB;QAAEd,KAAF;QAASa;MAAT,CAAlB,CAA5B;MACA,IAAI,CAACE,YAAL,EAAmB,OAAOC,SAAP;MACnB,IAAMC,MAAM,GAAG9B,GAAG,CAAC4B,YAAD,CAAH5B,CAAkBa,KAAlBb,CAAf;MACA,OAAO8B,MAAP;IACD;EAPH,CAAA,CADF;AAWD,CAbM","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport {\n  css,\n  SystemStyleObject,\n  toCSSVar,\n  WithCSSVar,\n} from \"@chakra-ui/styled-system\"\nimport { Dict, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeContext,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  cssVarsRoot?: string\n}\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { cssVarsRoot = \":host, :root\", theme, children } = props\n  const computedTheme = React.useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <Global styles={(theme: any) => ({ [cssVarsRoot]: theme.__cssVars })} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\",\n    )\n  }\n\n  return theme as WithCSSVar<T>\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}