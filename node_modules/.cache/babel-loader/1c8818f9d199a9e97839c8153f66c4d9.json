{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { analyzeBreakpoints } from \"@chakra-ui/utils\";\nimport { createThemeVars } from \"./create-theme-vars\";\nimport { extractTokens, omitVars } from \"./theme-tokens\";\nexport function toCSSVar(rawTheme) {\n  var _theme$config;\n\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n  var theme = omitVars(rawTheme); // omit components and breakpoints from css variable map\n\n  var tokens = extractTokens(theme);\n  var cssVarPrefix = (_theme$config = theme.config) == null ? void 0 : _theme$config.cssVarPrefix;\n  var {\n    /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */\n    cssMap,\n    /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */\n    cssVars\n  } = createThemeVars(tokens, {\n    cssVarPrefix\n  });\n  var defaultCssVars = {\n    \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-ring-offset-width\": \"0px\",\n    \"--chakra-ring-offset-color\": \"#fff\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n    \"--chakra-ring-shadow\": \"0 0 #0000\",\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\"\n  };\n  Object.assign(theme, {\n    __cssVars: _extends({}, defaultCssVars, cssVars),\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints)\n  });\n  return theme;\n}","map":{"version":3,"sources":["../../../src/create-theme-vars/to-css-var.ts"],"names":["analyzeBreakpoints","createThemeVars","extractTokens","omitVars","toCSSVar","rawTheme","theme","tokens","cssVarPrefix","config","cssMap","cssVars","defaultCssVars","Object","assign","__cssVars","__cssMap","__breakpoints","breakpoints"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,kBAAT,QAAyC,kBAAzC;AAEA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,gBAAxC;AAEA,OAAO,SAASC,QAAT,CAAkCC,QAAlC,EAA+C;EAAA,IAAA,aAAA;;EACpD;AACF;AACA;AACA;EACE,IAAMC,KAAK,GAAGH,QAAQ,CAACE,QAAD,CAAtB,CALoD,CAOpD;;EACA,IAAME,MAAM,GAAGL,aAAa,CAACI,KAAD,CAA5B;EAEA,IAAME,YAAY,GAAA,CAAA,aAAA,GAAGF,KAAK,CAACG,MAAT,KAAA,IAAA,GAAA,KAAA,CAAA,GAAGH,aAAAA,CAAcE,YAAnC;EAEA,IAAM;IACJ;AACJ;AACA;AACA;IACIE,MALI;IAMJ;AACJ;AACA;AACA;IACIC;EAVI,CAAA,GAWFV,eAAe,CAACM,MAAD,EAAS;IAAEC;EAAF,CAAT,CAXnB;EAaA,IAAMI,cAAoB,GAAG;IAC3B,qBAAA,EAAuB,iCADI;IAE3B,4BAAA,EAA8B,KAFH;IAG3B,4BAAA,EAA8B,MAHH;IAI3B,qBAAA,EAAuB,yBAJI;IAK3B,6BAAA,EAA+B,WALJ;IAM3B,sBAAA,EAAwB,WANG;IAO3B,0BAAA,EAA4B,GAPD;IAQ3B,0BAAA,EAA4B;EARD,CAA7B;EAWAC,MAAM,CAACC,MAAPD,CAAcP,KAAdO,EAAqB;IACnBE,SAAS,EAAA,QAAA,CAAA,CAAA,CAAA,EAAOH,cAAP,EAA0BD,OAA1B,CADU;IAEnBK,QAAQ,EAAEN,MAFS;IAGnBO,aAAa,EAAEjB,kBAAkB,CAACM,KAAK,CAACY,WAAP;EAHd,CAArBL,CAAAA;EAMA,OAAOP,KAAP;AACD","sourcesContent":["import { analyzeBreakpoints, Dict } from \"@chakra-ui/utils\"\nimport type { WithCSSVar } from \"../utils/types\"\nimport { createThemeVars } from \"./create-theme-vars\"\nimport { extractTokens, omitVars } from \"./theme-tokens\"\n\nexport function toCSSVar<T extends Dict>(rawTheme: T) {\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n  const theme = omitVars(rawTheme)\n\n  // omit components and breakpoints from css variable map\n  const tokens = extractTokens(theme)\n\n  const cssVarPrefix = theme.config?.cssVarPrefix\n\n  const {\n    /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */\n    cssMap,\n    /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */\n    cssVars,\n  } = createThemeVars(tokens, { cssVarPrefix })\n\n  const defaultCssVars: Dict = {\n    \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-ring-offset-width\": \"0px\",\n    \"--chakra-ring-offset-color\": \"#fff\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n    \"--chakra-ring-shadow\": \"0 0 #0000\",\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\",\n  }\n\n  Object.assign(theme, {\n    __cssVars: { ...defaultCssVars, ...cssVars },\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints),\n  })\n\n  return theme as WithCSSVar<T>\n}\n"]},"metadata":{},"sourceType":"module"}