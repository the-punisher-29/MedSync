{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { chakra, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { getProgressProps, progress, stripe } from \"./progress.utils\";\n\n/**\n * ProgressLabel is used to show the numeric value of the progress.\n * @see Docs https://chakra-ui.com/progress\n */\nexport var ProgressLabel = props => {\n  var styles = useStyles();\n  var labelStyles = _extends({\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }, styles.label);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    __css: labelStyles\n  }));\n};\nif (__DEV__) {\n  ProgressLabel.displayName = \"ProgressLabel\";\n}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nvar ProgressFilledTrack = props => {\n  var {\n      min,\n      max,\n      value,\n      isIndeterminate\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"min\", \"max\", \"value\", \"isIndeterminate\"]);\n  var progress = getProgressProps({\n    value,\n    min,\n    max,\n    isIndeterminate\n  });\n  var styles = useStyles();\n  var trackStyles = _extends({\n    height: \"100%\"\n  }, styles.filledTrack);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    style: _extends({\n      width: progress.percent + \"%\"\n    }, rest.style)\n  }, progress.bind, rest, {\n    __css: trackStyles\n  }));\n};\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nexport var Progress = props => {\n  var _styles$track;\n  var _omitThemingProps = omitThemingProps(props),\n    {\n      value,\n      min = 0,\n      max = 100,\n      hasStripe,\n      isAnimated,\n      children,\n      borderRadius: propBorderRadius,\n      isIndeterminate,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy\n    } = _omitThemingProps,\n    rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"value\", \"min\", \"max\", \"hasStripe\", \"isAnimated\", \"children\", \"borderRadius\", \"isIndeterminate\", \"aria-label\", \"aria-labelledby\"]);\n  var styles = useMultiStyleConfig(\"Progress\", props);\n  var borderRadius = propBorderRadius != null ? propBorderRadius : (_styles$track = styles.track) == null ? void 0 : _styles$track.borderRadius;\n  var stripeAnimation = {\n    animation: stripe + \" 1s linear infinite\"\n  };\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n\n  var shouldAddStripe = !isIndeterminate && hasStripe;\n  var shouldAnimateStripe = shouldAddStripe && isAnimated;\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n\n  var css = _extends({}, shouldAnimateStripe && stripeAnimation, isIndeterminate && {\n    position: \"absolute\",\n    willChange: \"left\",\n    minWidth: \"50%\",\n    animation: progress + \" 1s ease infinite normal none running\"\n  });\n  var trackStyles = _extends({\n    overflow: \"hidden\",\n    position: \"relative\"\n  }, styles.track);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    borderRadius: borderRadius,\n    __css: trackStyles\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(ProgressFilledTrack, {\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    min: min,\n    max: max,\n    value: value,\n    isIndeterminate: isIndeterminate,\n    css: css,\n    borderRadius: borderRadius\n  }), children));\n};\nif (__DEV__) {\n  Progress.displayName = \"Progress\";\n}","map":{"version":3,"sources":["../../src/progress.tsx"],"names":["chakra","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","__DEV__","React","getProgressProps","progress","stripe","ProgressLabel","props","styles","labelStyles","top","left","width","textAlign","position","transform","label","displayName","ProgressFilledTrack","min","max","value","isIndeterminate","rest","trackStyles","height","filledTrack","percent","style","bind","Progress","hasStripe","isAnimated","children","borderRadius","propBorderRadius","ariaLabel","ariaLabelledBy","track","stripeAnimation","animation","shouldAddStripe","shouldAnimateStripe","css","willChange","minWidth","overflow"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  Interpolation,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  getProgressProps,\n  GetProgressPropsOptions,\n  progress,\n  stripe,\n} from \"./progress.utils\"\n\nexport interface ProgressLabelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * ProgressLabel is used to show the numeric value of the progress.\n * @see Docs https://chakra-ui.com/progress\n */\nexport const ProgressLabel: React.FC<ProgressLabelProps> = (props) => {\n  const styles = useStyles()\n  const labelStyles: SystemStyleObject = {\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n    ...styles.label,\n  }\n  return <chakra.div {...props} __css={labelStyles} />\n}\n\nif (__DEV__) {\n  ProgressLabel.displayName = \"ProgressLabel\"\n}\n\nexport interface ProgressFilledTrackProps\n  extends HTMLChakraProps<\"div\">,\n    GetProgressPropsOptions {}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nconst ProgressFilledTrack: React.FC<ProgressFilledTrackProps> = (props) => {\n  const { min, max, value, isIndeterminate, ...rest } = props\n  const progress = getProgressProps({ value, min, max, isIndeterminate })\n\n  const styles = useStyles()\n  const trackStyles = {\n    height: \"100%\",\n    ...styles.filledTrack,\n  }\n\n  return (\n    <chakra.div\n      style={{\n        width: `${progress.percent}%`,\n        ...rest.style,\n      }}\n      {...progress.bind}\n      {...rest}\n      __css={trackStyles}\n    />\n  )\n}\n\nexport interface ProgressTrackProps extends HTMLChakraProps<\"div\"> {}\n\ninterface ProgressOptions {\n  /**\n   * The `value` of the progress indicator.\n   * If `undefined` the progress bar will be in `indeterminate` state\n   */\n  value?: number\n  /**\n   * The minimum value of the progress\n   */\n  min?: number\n  /**\n   * The maximum value of the progress\n   */\n  max?: number\n  /**\n   * If `true`, the progress bar will show stripe\n   */\n  hasStripe?: boolean\n  /**\n   * If `true`, and hasStripe is `true`, the stripes will be animated\n   */\n  isAnimated?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface ProgressProps\n  extends ProgressOptions,\n    ThemingProps<\"Progress\">,\n    HTMLChakraProps<\"div\"> {}\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nexport const Progress: React.FC<ProgressProps> = (props) => {\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius: propBorderRadius,\n    isIndeterminate,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Progress\", props)\n\n  const borderRadius =\n    propBorderRadius ??\n    (styles.track?.borderRadius as string | number | undefined)\n\n  const stripeAnimation = { animation: `${stripe} 1s linear infinite` }\n\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n  const shouldAddStripe = !isIndeterminate && hasStripe\n\n  const shouldAnimateStripe = shouldAddStripe && isAnimated\n\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n  const css: Interpolation<any> = {\n    ...(shouldAnimateStripe && stripeAnimation),\n    ...(isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`,\n    }),\n  }\n\n  const trackStyles: SystemStyleObject = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track,\n  }\n\n  return (\n    <chakra.div borderRadius={borderRadius} __css={trackStyles} {...rest}>\n      <StylesProvider value={styles}>\n        <ProgressFilledTrack\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          min={min}\n          max={max}\n          value={value}\n          isIndeterminate={isIndeterminate}\n          css={css}\n          borderRadius={borderRadius}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  Progress.displayName = \"Progress\"\n}\n"]},"metadata":{},"sourceType":"module"}