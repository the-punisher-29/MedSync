{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useEffect, useState } from 'react';\n// const useFetch = (file) => {\n//     const [data, setData] = useState([]);\n//     useEffect(() => {\n//         fetch(`/database/${file}.json`)\n//         .then(res => res.json())\n//             .then(data => setData(data))\n//     },[file])\n//     return [data]\n// }\n// export default useFetch\nimport { useEffect, useState } from 'react';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { db } from './components/config/firebase'; // Adjust the path if necessary\n\nconst useFetch = collectionName => {\n  _s();\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, collectionName));\n        const documents = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setData(documents);\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n      }\n    };\n\n    fetchData();\n  }, [collectionName]);\n  return [data];\n};\n\n_s(useFetch, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\nexport default useFetch; // In the above snippet, we have created a custom hook useFetch that fetches data from a Firestore collection. We are using the getDocs function from the Firestore SDK to get all the documents from the specified collection. We then map over the querySnapshot.docs to extract the document data and set it to the state using setData. Finally, we return the data array from the custom hook.","map":{"version":3,"sources":["E:/Pr/Web D/MedSync/src/hooks/useFetch.js"],"names":["useEffect","useState","collection","getDocs","db","useFetch","collectionName","data","setData","fetchData","querySnapshot","documents","docs","map","doc","id","error","console"],"mappings":";;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,oBAApC;AACA,SAASC,EAAT,QAAmB,8BAAnB,C,CAAmD;;AAEnD,MAAMC,QAAQ,GAAIC,cAAD,IAAoB;AAAA;;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,SAAS,GAAG,YAAY;AAC1B,UAAI;AACA,cAAMC,aAAa,GAAG,MAAMP,OAAO,CAACD,UAAU,CAACE,EAAD,EAAKE,cAAL,CAAX,CAAnC;AACA,cAAMK,SAAS,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,KAAK;AAC7CC,UAAAA,EAAE,EAAED,GAAG,CAACC,EADqC;AAE7C,aAAGD,GAAG,CAACP,IAAJ;AAF0C,SAAL,CAA1B,CAAlB;AAIAC,QAAAA,OAAO,CAACG,SAAD,CAAP;AACH,OAPD,CAOE,OAAOK,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACH;AACJ,KAXD;;AAaAP,IAAAA,SAAS;AACZ,GAfQ,EAeN,CAACH,cAAD,CAfM,CAAT;AAiBA,SAAO,CAACC,IAAD,CAAP;AACH,CArBD;;GAAMF,Q;;AAuBN,eAAeA,QAAf,C,CACA","sourcesContent":["// import { useEffect, useState } from 'react';\r\n\r\n// const useFetch = (file) => {\r\n//     const [data, setData] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         fetch(`/database/${file}.json`)\r\n//         .then(res => res.json())\r\n//             .then(data => setData(data))\r\n//     },[file])\r\n\r\n//     return [data]\r\n// }\r\n\r\n// export default useFetch\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { collection, getDocs } from 'firebase/firestore';\r\nimport { db } from './components/config/firebase'; // Adjust the path if necessary\r\n\r\nconst useFetch = (collectionName) => {\r\n    const [data, setData] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const querySnapshot = await getDocs(collection(db, collectionName));\r\n                const documents = querySnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                }));\r\n                setData(documents);\r\n            } catch (error) {\r\n                console.error(\"Error fetching data: \", error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [collectionName]);\r\n\r\n    return [data];\r\n};\r\n\r\nexport default useFetch;\r\n// In the above snippet, we have created a custom hook useFetch that fetches data from a Firestore collection. We are using the getDocs function from the Firestore SDK to get all the documents from the specified collection. We then map over the querySnapshot.docs to extract the document data and set it to the state using setData. Finally, we return the data array from the custom hook."]},"metadata":{},"sourceType":"module"}