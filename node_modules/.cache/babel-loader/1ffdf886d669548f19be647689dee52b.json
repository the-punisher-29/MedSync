{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { chakra } from \"@chakra-ui/system\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\"; // @future: only call `motion(chakra.svg)` when we drop framer-motion v3 support\n\nvar MotionSvg = \"custom\" in motion ? motion.custom(chakra.svg) : motion(chakra.svg);\nvar CheckIcon = props => /*#__PURE__*/React.createElement(MotionSvg, _extends({\n  width: \"1.2em\",\n  viewBox: \"0 0 12 10\",\n  variants: {\n    unchecked: {\n      opacity: 0,\n      strokeDashoffset: 16\n    },\n    checked: {\n      opacity: 1,\n      strokeDashoffset: 0,\n      transition: {\n        duration: 0.2\n      }\n    }\n  },\n  style: {\n    fill: \"none\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    strokeDasharray: 16\n  }\n}, props), /*#__PURE__*/React.createElement(\"polyline\", {\n  points: \"1.5 6 4.5 9 10.5 1\"\n}));\nvar IndeterminateIcon = props => /*#__PURE__*/React.createElement(MotionSvg, _extends({\n  width: \"1.2em\",\n  viewBox: \"0 0 24 24\",\n  variants: {\n    unchecked: {\n      scaleX: 0.65,\n      opacity: 0\n    },\n    checked: {\n      scaleX: 1,\n      opacity: 1,\n      transition: {\n        scaleX: {\n          duration: 0\n        },\n        opacity: {\n          duration: 0.02\n        }\n      }\n    }\n  },\n  style: {\n    stroke: \"currentColor\",\n    strokeWidth: 4\n  }\n}, props), /*#__PURE__*/React.createElement(\"line\", {\n  x1: \"21\",\n  x2: \"3\",\n  y1: \"12\",\n  y2: \"12\"\n}));\nvar CheckboxTransition = _ref => {\n  var {\n    open,\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    initial: false\n  }, open && /*#__PURE__*/React.createElement(motion.div, {\n    variants: {\n      unchecked: {\n        scale: 0.5\n      },\n      checked: {\n        scale: 1\n      }\n    },\n    initial: \"unchecked\",\n    animate: \"checked\",\n    exit: \"unchecked\",\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    }\n  }, children));\n};\n\n/**\n * CheckboxIcon is used to visually indicate the checked or indeterminate\n * state of a checkbox.\n *\n * @todo allow users pass their own icon svgs\n */\nexport var CheckboxIcon = props => {\n  var {\n      isIndeterminate,\n      isChecked\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"isIndeterminate\", \"isChecked\"]);\n  var IconEl = isIndeterminate ? IndeterminateIcon : CheckIcon;\n  return /*#__PURE__*/React.createElement(CheckboxTransition, {\n    open: isChecked || isIndeterminate\n  }, /*#__PURE__*/React.createElement(IconEl, rest));\n};","map":{"version":3,"sources":["../../src/checkbox-icon.tsx"],"names":["chakra","AnimatePresence","motion","React","MotionSvg","custom","svg","CheckIcon","props","unchecked","opacity","strokeDashoffset","checked","transition","duration","fill","strokeWidth","stroke","strokeDasharray","IndeterminateIcon","scaleX","CheckboxTransition","open","children","scale","display","alignItems","justifyContent","height","CheckboxIcon","isIndeterminate","isChecked","rest","IconEl"],"mappings":"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","sourcesContent":["import { chakra, PropsOf } from \"@chakra-ui/system\"\nimport { AnimatePresence, CustomDomComponent, motion } from \"framer-motion\"\nimport * as React from \"react\"\n\n// @future: only call `motion(chakra.svg)` when we drop framer-motion v3 support\nconst MotionSvg: CustomDomComponent<PropsOf<typeof chakra.svg>> =\n  \"custom\" in motion\n    ? (motion as any).custom(chakra.svg)\n    : (motion as any)(chakra.svg)\n\nconst CheckIcon = (props: PropsOf<typeof MotionSvg>) => (\n  <MotionSvg\n    width=\"1.2em\"\n    viewBox=\"0 0 12 10\"\n    variants={{\n      unchecked: {\n        opacity: 0,\n        strokeDashoffset: 16,\n      },\n      checked: {\n        opacity: 1,\n        strokeDashoffset: 0,\n        transition: { duration: 0.2 },\n      },\n    }}\n    style={{\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"currentColor\",\n      strokeDasharray: 16,\n    }}\n    {...props}\n  >\n    <polyline points=\"1.5 6 4.5 9 10.5 1\" />\n  </MotionSvg>\n)\n\nconst IndeterminateIcon = (props: PropsOf<typeof MotionSvg>) => (\n  <MotionSvg\n    width=\"1.2em\"\n    viewBox=\"0 0 24 24\"\n    variants={{\n      unchecked: {\n        scaleX: 0.65,\n        opacity: 0,\n      },\n      checked: {\n        scaleX: 1,\n        opacity: 1,\n        transition: {\n          scaleX: { duration: 0 },\n          opacity: { duration: 0.02 },\n        },\n      },\n    }}\n    style={{ stroke: \"currentColor\", strokeWidth: 4 }}\n    {...props}\n  >\n    <line x1=\"21\" x2=\"3\" y1=\"12\" y2=\"12\" />\n  </MotionSvg>\n)\n\nconst CheckboxTransition = ({ open, children }: any) => (\n  <AnimatePresence initial={false}>\n    {open && (\n      <motion.div\n        variants={{\n          unchecked: { scale: 0.5 },\n          checked: { scale: 1 },\n        }}\n        initial=\"unchecked\"\n        animate=\"checked\"\n        exit=\"unchecked\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100%\",\n        }}\n      >\n        {children}\n      </motion.div>\n    )}\n  </AnimatePresence>\n)\n\nexport interface CheckboxIconProps extends PropsOf<typeof MotionSvg> {\n  isIndeterminate?: boolean\n  isChecked?: boolean\n}\n\n/**\n * CheckboxIcon is used to visually indicate the checked or indeterminate\n * state of a checkbox.\n *\n * @todo allow users pass their own icon svgs\n */\nexport const CheckboxIcon: React.FC<CheckboxIconProps> = (props) => {\n  const { isIndeterminate, isChecked, ...rest } = props\n  const IconEl = isIndeterminate ? IndeterminateIcon : CheckIcon\n  return (\n    <CheckboxTransition open={isChecked || isIndeterminate}>\n      <IconEl {...rest} />\n    </CheckboxTransition>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}