{"ast":null,"code":"import { isBrowser, noop } from \"@chakra-ui/utils\";\nvar classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\n\n/**\n * SSR: Graceful fallback for the `body` element\n */\nvar mockBody = {\n  classList: {\n    add: noop,\n    remove: noop\n  }\n};\nvar getBody = () => isBrowser ? document.body : mockBody;\n/**\n * Function to add/remove class from `body` based on color mode\n */\n\nexport function syncBodyClassName(isDark) {\n  var body = getBody();\n  body.classList.add(isDark ? classNames.dark : classNames.light);\n  body.classList.remove(isDark ? classNames.light : classNames.dark);\n}\n/**\n * Check if JS media query matches the query string passed\n */\n\nfunction getMediaQuery(query) {\n  var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);\n  if (!mediaQueryList) {\n    return undefined;\n  }\n  return !!mediaQueryList.media === mediaQueryList.matches;\n}\nexport var queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\"\n};\nexport var lightQuery = queries.light;\nexport var darkQuery = queries.dark;\nexport function getColorScheme(fallback) {\n  var _getMediaQuery;\n  var isDark = (_getMediaQuery = getMediaQuery(queries.dark)) != null ? _getMediaQuery : fallback === \"dark\";\n  return isDark ? \"dark\" : \"light\";\n}\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\n\nexport function addListener(fn) {\n  if (!(\"matchMedia\" in window)) {\n    return noop;\n  }\n  var mediaQueryList = window.matchMedia(queries.dark);\n  var listener = () => {\n    fn(mediaQueryList.matches ? \"dark\" : \"light\");\n  };\n  listener();\n  mediaQueryList.addListener(listener);\n  return () => {\n    mediaQueryList.removeListener(listener);\n  };\n}\nexport var root = {\n  get: () => document.documentElement.style.getPropertyValue(\"--chakra-ui-color-mode\"),\n  set: mode => {\n    if (isBrowser) {\n      document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", mode);\n    }\n  }\n};","map":{"version":3,"sources":["../../src/color-mode.utils.ts"],"names":["isBrowser","noop","classNames","light","dark","mockBody","classList","add","remove","getBody","document","body","syncBodyClassName","isDark","getMediaQuery","query","mediaQueryList","window","matchMedia","undefined","media","matches","queries","lightQuery","darkQuery","getColorScheme","fallback","addListener","fn","listener","removeListener","root","get","documentElement","style","getPropertyValue","set","mode","setProperty"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,QAAgC,kBAAhC;AAEA,IAAMC,UAAU,GAAG;EACjBC,KAAK,EAAE,iBADU;EAEjBC,IAAI,EAAE;AAFW,CAAnB;;AAOA;AACA;AACA;AACA,IAAMC,QAAQ,GAAG;EACfC,SAAS,EAAE;IAAEC,GAAG,EAAEN,IAAP;IAAaO,MAAM,EAAEP;EAArB;AADI,CAAjB;AAIA,IAAMQ,OAAO,GAAG,CAAA,KAAOT,SAAS,GAAGU,QAAQ,CAACC,IAAZ,GAAmBN,QAAnD;AAEA;AACA;AACA;;AACA,OAAO,SAASO,iBAAT,CAA2BC,MAA3B,EAA4C;EACjD,IAAMF,IAAI,GAAGF,OAAO,CAAA,CAApB;EACAE,IAAI,CAACL,SAALK,CAAeJ,GAAfI,CAAmBE,MAAM,GAAGX,UAAU,CAACE,IAAd,GAAqBF,UAAU,CAACC,KAAzDQ,CAAAA;EACAA,IAAI,CAACL,SAALK,CAAeH,MAAfG,CAAsBE,MAAM,GAAGX,UAAU,CAACC,KAAd,GAAsBD,UAAU,CAACE,IAA7DO,CAAAA;AACD;AAED;AACA;AACA;;AACA,SAASG,aAAT,CAAuBC,KAAvB,EAAsC;EACpC,IAAMC,cAAc,GAAGC,MAAM,CAACC,UAAV,IAAA,IAAA,GAAA,KAAA,CAAA,GAAGD,MAAM,CAACC,UAAPD,CAAoBF,KAApBE,CAAvB;EACA,IAAI,CAACD,cAAL,EAAqB;IACnB,OAAOG,SAAP;EACD;EACD,OAAO,CAAC,CAACH,cAAc,CAACI,KAAjB,KAA2BJ,cAAc,CAACK,OAAjD;AACD;AAED,OAAO,IAAMC,OAAO,GAAG;EACrBnB,KAAK,EAAE,+BADc;EAErBC,IAAI,EAAE;AAFe,CAAhB;AAKP,OAAO,IAAMmB,UAAU,GAAGD,OAAO,CAACnB,KAA3B;AACP,OAAO,IAAMqB,SAAS,GAAGF,OAAO,CAAClB,IAA1B;AAEP,OAAO,SAASqB,cAAT,CAAwBC,QAAxB,EAA8C;EAAA,IAAA,cAAA;EACnD,IAAMb,MAAM,GAAA,CAAA,cAAA,GAAGC,aAAa,CAACQ,OAAO,CAAClB,IAAT,CAAhB,KAAA,IAAA,GAAA,cAAA,GAAkCsB,QAAQ,KAAK,MAA3D;EACA,OAAOb,MAAM,GAAG,MAAH,GAAY,OAAzB;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASc,WAAT,CAAqBC,EAArB,EAAmC;EACxC,IAAI,EAAE,YAAA,IAAgBX,MAAlB,CAAJ,EAA+B;IAC7B,OAAOhB,IAAP;EACD;EAED,IAAMe,cAAc,GAAGC,MAAM,CAACC,UAAPD,CAAkBK,OAAO,CAAClB,IAA1Ba,CAAvB;EAEA,IAAMY,QAAQ,GAAG,CAAA,KAAM;IACrBD,EAAE,CAACZ,cAAc,CAACK,OAAfL,GAAyB,MAAzBA,GAAkC,OAAnC,CAAFY;EACD,CAFD;EAIAC,QAAQ,CAAA,CAAA;EACRb,cAAc,CAACW,WAAfX,CAA2Ba,QAA3Bb,CAAAA;EAEA,OAAO,MAAM;IACXA,cAAc,CAACc,cAAfd,CAA8Ba,QAA9Bb,CAAAA;EACD,CAFD;AAGD;AAED,OAAO,IAAMe,IAAI,GAAG;EAClBC,GAAG,EAAE,CAAA,KACHtB,QAAQ,CAACuB,eAATvB,CAAyBwB,KAAzBxB,CAA+ByB,gBAA/BzB,CACE,wBADFA,CAFgB;EAKlB0B,GAAG,EAAGC,IAAD,IAAqB;IACxB,IAAIrC,SAAJ,EAAe;MACbU,QAAQ,CAACuB,eAATvB,CAAyBwB,KAAzBxB,CAA+B4B,WAA/B5B,CAA2C,wBAA3CA,EAAqE2B,IAArE3B,CAAAA;IACD;EACF;AATiB,CAAb","sourcesContent":["import { isBrowser, noop } from \"@chakra-ui/utils\"\n\nconst classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\",\n}\n\nexport type ColorMode = \"light\" | \"dark\"\n\n/**\n * SSR: Graceful fallback for the `body` element\n */\nconst mockBody = {\n  classList: { add: noop, remove: noop },\n}\n\nconst getBody = () => (isBrowser ? document.body : mockBody)\n\n/**\n * Function to add/remove class from `body` based on color mode\n */\nexport function syncBodyClassName(isDark: boolean) {\n  const body = getBody()\n  body.classList.add(isDark ? classNames.dark : classNames.light)\n  body.classList.remove(isDark ? classNames.light : classNames.dark)\n}\n\n/**\n * Check if JS media query matches the query string passed\n */\nfunction getMediaQuery(query: string) {\n  const mediaQueryList = window.matchMedia?.(query)\n  if (!mediaQueryList) {\n    return undefined\n  }\n  return !!mediaQueryList.media === mediaQueryList.matches\n}\n\nexport const queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\",\n}\n\nexport const lightQuery = queries.light\nexport const darkQuery = queries.dark\n\nexport function getColorScheme(fallback?: ColorMode) {\n  const isDark = getMediaQuery(queries.dark) ?? fallback === \"dark\"\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\nexport function addListener(fn: Function) {\n  if (!(\"matchMedia\" in window)) {\n    return noop\n  }\n\n  const mediaQueryList = window.matchMedia(queries.dark)\n\n  const listener = () => {\n    fn(mediaQueryList.matches ? \"dark\" : \"light\")\n  }\n\n  listener()\n  mediaQueryList.addListener(listener)\n\n  return () => {\n    mediaQueryList.removeListener(listener)\n  }\n}\n\nexport const root = {\n  get: () =>\n    document.documentElement.style.getPropertyValue(\n      \"--chakra-ui-color-mode\",\n    ) as ColorMode,\n  set: (mode: ColorMode) => {\n    if (isBrowser) {\n      document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", mode)\n    }\n  },\n}\n"]},"metadata":{},"sourceType":"module"}