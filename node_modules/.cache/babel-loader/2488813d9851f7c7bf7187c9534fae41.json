{"ast":null,"code":"import { isHTMLElement } from \"./dom\";\nimport { isFocusable, isTabbable } from \"./tabbable\";\nvar focusableElList = [\"input:not([disabled])\", \"select:not([disabled])\", \"textarea:not([disabled])\", \"embed\", \"iframe\", \"object\", \"a[href]\", \"area[href]\", \"button:not([disabled])\", \"[tabindex]\", \"audio[controls]\", \"video[controls]\", \"*[tabindex]:not([aria-disabled])\", \"*[contenteditable]\"];\nvar focusableElSelector = focusableElList.join();\nexport function getAllFocusable(container) {\n  var focusableEls = Array.from(container.querySelectorAll(focusableElSelector));\n  focusableEls.unshift(container);\n  return focusableEls.filter(isFocusable).filter(el => window.getComputedStyle(el).display !== \"none\");\n}\nexport function getFirstFocusable(container) {\n  var allFocusable = getAllFocusable(container);\n  return allFocusable.length ? allFocusable[0] : null;\n}\nexport function getAllTabbable(container, fallbackToFocusable) {\n  var allFocusable = Array.from(container.querySelectorAll(focusableElSelector));\n  var allTabbable = allFocusable.filter(isTabbable);\n  if (isTabbable(container)) {\n    allTabbable.unshift(container);\n  }\n  if (!allTabbable.length && fallbackToFocusable) {\n    return allFocusable;\n  }\n  return allTabbable;\n}\nexport function getFirstTabbableIn(container, fallbackToFocusable) {\n  var [first] = getAllTabbable(container, fallbackToFocusable);\n  return first || null;\n}\nexport function getLastTabbableIn(container, fallbackToFocusable) {\n  var allTabbable = getAllTabbable(container, fallbackToFocusable);\n  return allTabbable[allTabbable.length - 1] || null;\n}\nexport function getNextTabbable(container, fallbackToFocusable) {\n  var allFocusable = getAllFocusable(container);\n  var index = allFocusable.indexOf(document.activeElement);\n  var slice = allFocusable.slice(index + 1);\n  return slice.find(isTabbable) || allFocusable.find(isTabbable) || (fallbackToFocusable ? slice[0] : null);\n}\nexport function getPreviousTabbable(container, fallbackToFocusable) {\n  var allFocusable = getAllFocusable(container).reverse();\n  var index = allFocusable.indexOf(document.activeElement);\n  var slice = allFocusable.slice(index + 1);\n  return slice.find(isTabbable) || allFocusable.find(isTabbable) || (fallbackToFocusable ? slice[0] : null);\n}\nexport function focusNextTabbable(container, fallbackToFocusable) {\n  var nextTabbable = getNextTabbable(container, fallbackToFocusable);\n  if (nextTabbable && isHTMLElement(nextTabbable)) {\n    nextTabbable.focus();\n  }\n}\nexport function focusPreviousTabbable(container, fallbackToFocusable) {\n  var previousTabbable = getPreviousTabbable(container, fallbackToFocusable);\n  if (previousTabbable && isHTMLElement(previousTabbable)) {\n    previousTabbable.focus();\n  }\n}\nfunction matches(element, selectors) {\n  if (\"matches\" in element) return element.matches(selectors);\n  if (\"msMatchesSelector\" in element) return element.msMatchesSelector(selectors);\n  return element.webkitMatchesSelector(selectors);\n}\nexport function closest(element, selectors) {\n  if (\"closest\" in element) return element.closest(selectors);\n  do {\n    if (matches(element, selectors)) return element;\n    element = element.parentElement || element.parentNode;\n  } while (element !== null && element.nodeType === 1);\n  return null;\n}","map":{"version":3,"sources":["../../src/dom-query.ts"],"names":["isHTMLElement","isFocusable","isTabbable","focusableElList","focusableElSelector","join","getAllFocusable","container","focusableEls","Array","from","querySelectorAll","unshift","filter","el","window","getComputedStyle","display","getFirstFocusable","allFocusable","length","getAllTabbable","fallbackToFocusable","allTabbable","getFirstTabbableIn","first","getLastTabbableIn","getNextTabbable","index","indexOf","document","activeElement","slice","find","getPreviousTabbable","reverse","focusNextTabbable","nextTabbable","focus","focusPreviousTabbable","previousTabbable","matches","element","selectors","msMatchesSelector","webkitMatchesSelector","closest","parentElement","parentNode","nodeType"],"mappings":"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","sourcesContent":["import { isHTMLElement } from \"./dom\"\nimport { isFocusable, isTabbable } from \"./tabbable\"\n\nconst focusableElList = [\n  \"input:not([disabled])\",\n  \"select:not([disabled])\",\n  \"textarea:not([disabled])\",\n  \"embed\",\n  \"iframe\",\n  \"object\",\n  \"a[href]\",\n  \"area[href]\",\n  \"button:not([disabled])\",\n  \"[tabindex]\",\n  \"audio[controls]\",\n  \"video[controls]\",\n  \"*[tabindex]:not([aria-disabled])\",\n  \"*[contenteditable]\",\n]\n\nconst focusableElSelector = focusableElList.join()\n\nexport function getAllFocusable<T extends HTMLElement>(container: T) {\n  const focusableEls = Array.from(\n    container.querySelectorAll<T>(focusableElSelector),\n  )\n  focusableEls.unshift(container)\n  return focusableEls\n    .filter(isFocusable)\n    .filter((el) => window.getComputedStyle(el).display !== \"none\")\n}\n\nexport function getFirstFocusable<T extends HTMLElement>(container: T) {\n  const allFocusable = getAllFocusable(container)\n  return allFocusable.length ? allFocusable[0] : null\n}\n\nexport function getAllTabbable<T extends HTMLElement>(\n  container: T,\n  fallbackToFocusable?: boolean,\n) {\n  const allFocusable = Array.from(\n    container.querySelectorAll<T>(focusableElSelector),\n  )\n  const allTabbable = allFocusable.filter(isTabbable)\n\n  if (isTabbable(container)) {\n    allTabbable.unshift(container)\n  }\n\n  if (!allTabbable.length && fallbackToFocusable) {\n    return allFocusable\n  }\n  return allTabbable\n}\n\nexport function getFirstTabbableIn<T extends HTMLElement>(\n  container: T,\n  fallbackToFocusable?: boolean,\n): T | null {\n  const [first] = getAllTabbable(container, fallbackToFocusable)\n  return first || null\n}\n\nexport function getLastTabbableIn<T extends HTMLElement>(\n  container: T,\n  fallbackToFocusable?: boolean,\n): T | null {\n  const allTabbable = getAllTabbable(container, fallbackToFocusable)\n  return allTabbable[allTabbable.length - 1] || null\n}\n\nexport function getNextTabbable<T extends HTMLElement>(\n  container: T,\n  fallbackToFocusable?: boolean,\n): T | null {\n  const allFocusable = getAllFocusable(container)\n  const index = allFocusable.indexOf(document.activeElement as T)\n  const slice = allFocusable.slice(index + 1)\n  return (\n    slice.find(isTabbable) ||\n    allFocusable.find(isTabbable) ||\n    (fallbackToFocusable ? slice[0] : null)\n  )\n}\n\nexport function getPreviousTabbable<T extends HTMLElement>(\n  container: T,\n  fallbackToFocusable?: boolean,\n): T | null {\n  const allFocusable = getAllFocusable(container).reverse()\n  const index = allFocusable.indexOf(document.activeElement as T)\n  const slice = allFocusable.slice(index + 1)\n  return (\n    slice.find(isTabbable) ||\n    allFocusable.find(isTabbable) ||\n    (fallbackToFocusable ? slice[0] : null)\n  )\n}\n\nexport function focusNextTabbable<T extends HTMLElement>(\n  container: T,\n  fallbackToFocusable?: boolean,\n) {\n  const nextTabbable = getNextTabbable(container, fallbackToFocusable)\n  if (nextTabbable && isHTMLElement(nextTabbable)) {\n    nextTabbable.focus()\n  }\n}\n\nexport function focusPreviousTabbable<T extends HTMLElement>(\n  container: T,\n  fallbackToFocusable?: boolean,\n) {\n  const previousTabbable = getPreviousTabbable(container, fallbackToFocusable)\n  if (previousTabbable && isHTMLElement(previousTabbable)) {\n    previousTabbable.focus()\n  }\n}\n\nfunction matches(element: Element, selectors: string): boolean {\n  if (\"matches\" in element) return element.matches(selectors)\n  if (\"msMatchesSelector\" in element)\n    return (element as any).msMatchesSelector(selectors)\n  return (element as any).webkitMatchesSelector(selectors)\n}\n\nexport function closest<T extends HTMLElement>(element: T, selectors: string) {\n  if (\"closest\" in element) return element.closest(selectors)\n  do {\n    if (matches(element, selectors)) return element\n    element = (element.parentElement || element.parentNode) as any\n  } while (element !== null && element.nodeType === 1)\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}