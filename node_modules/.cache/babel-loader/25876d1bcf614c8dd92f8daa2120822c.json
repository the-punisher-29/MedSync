{"ast":null,"code":"import { getBoxShadow, toTransformOrigin, cssVars } from \"./utils\";\n/* -------------------------------------------------------------------------------------------------\n The match width modifier sets the popper width to match the reference.\n It us useful for custom selects, autocomplete, etc.\n* -----------------------------------------------------------------------------------------------*/\n\nexport var matchWidth = {\n  name: \"matchWidth\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  requires: [\"computeStyles\"],\n  fn: _ref => {\n    var {\n      state\n    } = _ref;\n    state.styles.popper.width = state.rects.reference.width + \"px\";\n  },\n  effect: _ref2 => {\n    var {\n      state\n    } = _ref2;\n    return () => {\n      var reference = state.elements.reference;\n      state.elements.popper.style.width = reference.offsetWidth + \"px\";\n    };\n  }\n};\n/* -------------------------------------------------------------------------------------------------\n  The transform origin modifier sets the css `transformOrigin` value of the popper\n  based on the dynamic placement state of the popper.\n  \n  Useful when we need to animate/transition the popper.\n* -----------------------------------------------------------------------------------------------*/\n\nexport var transformOrigin = {\n  name: \"transformOrigin\",\n  enabled: true,\n  phase: \"write\",\n  fn: _ref3 => {\n    var {\n      state\n    } = _ref3;\n    setTransformOrigin(state);\n  },\n  effect: _ref4 => {\n    var {\n      state\n    } = _ref4;\n    return () => {\n      setTransformOrigin(state);\n    };\n  }\n};\nvar setTransformOrigin = state => {\n  state.elements.popper.style.setProperty(cssVars.transformOrigin.var, toTransformOrigin(state.placement));\n};\n/* -------------------------------------------------------------------------------------------------\n  The position arrow modifier adds width, height and overrides the `top/left/right/bottom`\n  styles generated by popper.js to properly position the arrow\n* -----------------------------------------------------------------------------------------------*/\n\nexport var positionArrow = {\n  name: \"positionArrow\",\n  enabled: true,\n  phase: \"afterWrite\",\n  fn: _ref5 => {\n    var {\n      state\n    } = _ref5;\n    setArrowStyles(state);\n  }\n};\nvar setArrowStyles = state => {\n  var _state$elements;\n  if (!state.placement) return;\n  var overrides = getArrowStyle(state.placement);\n  if ((_state$elements = state.elements) != null && _state$elements.arrow && overrides) {\n    Object.assign(state.elements.arrow.style, {\n      [overrides.property]: overrides.value,\n      width: cssVars.arrowSize.varRef,\n      height: cssVars.arrowSize.varRef,\n      zIndex: -1\n    });\n    var vars = {\n      [cssVars.arrowSizeHalf.var]: \"calc(\" + cssVars.arrowSize.varRef + \" / 2)\",\n      [cssVars.arrowOffset.var]: \"calc(\" + cssVars.arrowSizeHalf.varRef + \" * -1)\"\n    };\n    for (var property in vars) {\n      state.elements.arrow.style.setProperty(property, vars[property]);\n    }\n  }\n};\nvar getArrowStyle = placement => {\n  if (placement.startsWith(\"top\")) {\n    return {\n      property: \"bottom\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n  if (placement.startsWith(\"bottom\")) {\n    return {\n      property: \"top\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n  if (placement.startsWith(\"left\")) {\n    return {\n      property: \"right\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n  if (placement.startsWith(\"right\")) {\n    return {\n      property: \"left\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n};\n/* -------------------------------------------------------------------------------------------------\n  The inner arrow modifier, sets the placement styles for the inner arrow that forms\n  the popper arrow tip.\n* -----------------------------------------------------------------------------------------------*/\n\nexport var innerArrow = {\n  name: \"innerArrow\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"arrow\"],\n  fn: _ref6 => {\n    var {\n      state\n    } = _ref6;\n    setInnerArrowStyles(state);\n  },\n  effect: _ref7 => {\n    var {\n      state\n    } = _ref7;\n    return () => {\n      setInnerArrowStyles(state);\n    };\n  }\n};\nvar setInnerArrowStyles = state => {\n  if (!state.elements.arrow) return;\n  var inner = state.elements.arrow.querySelector(\"[data-popper-arrow-inner]\");\n  if (!inner) return;\n  Object.assign(inner.style, {\n    transform: \"rotate(45deg)\",\n    background: cssVars.arrowBg.varRef,\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    zIndex: \"inherit\",\n    boxShadow: getBoxShadow(state.placement)\n  });\n};","map":{"version":3,"sources":["../../src/modifiers.ts"],"names":["getBoxShadow","toTransformOrigin","cssVars","matchWidth","name","enabled","phase","requires","fn","state","styles","popper","width","rects","reference","effect","elements","style","offsetWidth","transformOrigin","setTransformOrigin","setProperty","var","placement","positionArrow","setArrowStyles","overrides","getArrowStyle","arrow","Object","assign","property","value","arrowSize","varRef","height","zIndex","vars","arrowSizeHalf","arrowOffset","startsWith","innerArrow","setInnerArrowStyles","inner","querySelector","transform","background","arrowBg","top","left","position","boxShadow"],"mappings":"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","sourcesContent":["import { Placement, Modifier, State } from \"@popperjs/core\"\nimport { getBoxShadow, toTransformOrigin, cssVars } from \"./utils\"\n\n/* -------------------------------------------------------------------------------------------------\n The match width modifier sets the popper width to match the reference.\n It us useful for custom selects, autocomplete, etc.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const matchWidth: Modifier<\"matchWidth\", any> = {\n  name: \"matchWidth\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  requires: [\"computeStyles\"],\n  fn: ({ state }) => {\n    state.styles.popper.width = `${state.rects.reference.width}px`\n  },\n  effect: ({ state }) => () => {\n    const reference = state.elements.reference as HTMLElement\n    state.elements.popper.style.width = `${reference.offsetWidth}px`\n  },\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The transform origin modifier sets the css `transformOrigin` value of the popper\n  based on the dynamic placement state of the popper.\n  \n  Useful when we need to animate/transition the popper.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const transformOrigin: Modifier<\"transformOrigin\", any> = {\n  name: \"transformOrigin\",\n  enabled: true,\n  phase: \"write\",\n  fn: ({ state }) => {\n    setTransformOrigin(state)\n  },\n  effect: ({ state }) => () => {\n    setTransformOrigin(state)\n  },\n}\n\nconst setTransformOrigin = (state: State) => {\n  state.elements.popper.style.setProperty(\n    cssVars.transformOrigin.var,\n    toTransformOrigin(state.placement),\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The position arrow modifier adds width, height and overrides the `top/left/right/bottom`\n  styles generated by popper.js to properly position the arrow\n* -----------------------------------------------------------------------------------------------*/\n\nexport const positionArrow: Modifier<\"positionArrow\", any> = {\n  name: \"positionArrow\",\n  enabled: true,\n  phase: \"afterWrite\",\n  fn: ({ state }) => {\n    setArrowStyles(state)\n  },\n}\n\nconst setArrowStyles = (state: Partial<State>) => {\n  if (!state.placement) return\n  const overrides = getArrowStyle(state.placement)\n\n  if (state.elements?.arrow && overrides) {\n    Object.assign(state.elements.arrow.style, {\n      [overrides.property]: overrides.value,\n      width: cssVars.arrowSize.varRef,\n      height: cssVars.arrowSize.varRef,\n      zIndex: -1,\n    })\n\n    const vars = {\n      [cssVars.arrowSizeHalf.var]: `calc(${cssVars.arrowSize.varRef} / 2)`,\n      [cssVars.arrowOffset.var]: `calc(${cssVars.arrowSizeHalf.varRef} * -1)`,\n    }\n\n    for (const property in vars) {\n      state.elements.arrow.style.setProperty(property, vars[property])\n    }\n  }\n}\n\nconst getArrowStyle = (placement: Placement) => {\n  if (placement.startsWith(\"top\")) {\n    return { property: \"bottom\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"bottom\")) {\n    return { property: \"top\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"left\")) {\n    return { property: \"right\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"right\")) {\n    return { property: \"left\", value: cssVars.arrowOffset.varRef }\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The inner arrow modifier, sets the placement styles for the inner arrow that forms\n  the popper arrow tip.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const innerArrow: Modifier<\"innerArrow\", any> = {\n  name: \"innerArrow\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"arrow\"],\n  fn: ({ state }) => {\n    setInnerArrowStyles(state)\n  },\n  effect: ({ state }) => () => {\n    setInnerArrowStyles(state)\n  },\n}\n\nconst setInnerArrowStyles = (state: State) => {\n  if (!state.elements.arrow) return\n\n  const inner = state.elements.arrow.querySelector(\n    \"[data-popper-arrow-inner]\",\n  ) as HTMLElement | null\n\n  if (!inner) return\n\n  Object.assign(inner.style, {\n    transform: \"rotate(45deg)\",\n    background: cssVars.arrowBg.varRef,\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    zIndex: \"inherit\",\n    boxShadow: getBoxShadow(state.placement),\n  })\n}\n"]},"metadata":{},"sourceType":"module"}