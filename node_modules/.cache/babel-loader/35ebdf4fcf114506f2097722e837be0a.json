{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { TabsDescendantsProvider, TabsProvider, useTab, useTabIndicator, useTabList, useTabPanel, useTabPanels, useTabs } from \"./use-tabs\";\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components.\n */\nexport var Tabs = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Tabs\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    {\n      children,\n      className\n    } = _omitThemingProps,\n    rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"className\"]);\n  var _useTabs = useTabs(rest),\n    {\n      htmlProps,\n      descendants\n    } = _useTabs,\n    ctx = _objectWithoutPropertiesLoose(_useTabs, [\"htmlProps\", \"descendants\"]);\n  var context = React.useMemo(() => ctx, [ctx]);\n  var rootProps = omit(htmlProps, [\"isFitted\"]);\n  return /*#__PURE__*/React.createElement(TabsDescendantsProvider, {\n    value: descendants\n  }, /*#__PURE__*/React.createElement(TabsProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: cx(\"chakra-tabs\", className),\n    ref: ref\n  }, rootProps, {\n    __css: styles.root\n  }), children))));\n});\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\";\n}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport var Tab = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  var tabProps = useTab(_extends({}, props, {\n    ref\n  }));\n  var tabStyles = _extends({\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }, styles.tab);\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({}, tabProps, {\n    className: cx(\"chakra-tabs__tab\", props.className),\n    __css: tabStyles\n  }));\n});\nif (__DEV__) {\n  Tab.displayName = \"Tab\";\n}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport var TabList = /*#__PURE__*/forwardRef((props, ref) => {\n  var tablistProps = useTabList(_extends({}, props, {\n    ref\n  }));\n  var styles = useStyles();\n  var tablistStyles = _extends({\n    display: \"flex\"\n  }, styles.tablist);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, tablistProps, {\n    className: cx(\"chakra-tabs__tablist\", props.className),\n    __css: tablistStyles\n  }));\n});\nif (__DEV__) {\n  TabList.displayName = \"TabList\";\n}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport var TabPanel = /*#__PURE__*/forwardRef((props, ref) => {\n  var panelProps = useTabPanel(_extends({}, props, {\n    ref\n  }));\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    outline: \"0\"\n  }, panelProps, {\n    className: cx(\"chakra-tabs__tab-panel\", props.className),\n    __css: styles.tabpanel\n  }));\n});\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\";\n}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport var TabPanels = /*#__PURE__*/forwardRef((props, ref) => {\n  var panelsProps = useTabPanels(props);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, panelsProps, {\n    width: \"100%\",\n    ref: ref,\n    className: cx(\"chakra-tabs__tab-panels\", props.className),\n    __css: styles.tabpanels\n  }));\n});\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\";\n}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport var TabIndicator = /*#__PURE__*/forwardRef((props, ref) => {\n  var indicatorStyle = useTabIndicator();\n  var style = _extends({}, props.style, indicatorStyle);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-tabs__tab-indicator\", props.className),\n    style: style,\n    __css: styles.indicator\n  }));\n});\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\";\n}","map":{"version":3,"sources":["../../src/tabs.tsx"],"names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","omit","__DEV__","React","TabsDescendantsProvider","TabsProvider","useTab","useTabIndicator","useTabList","useTabPanel","useTabPanels","useTabs","Tabs","props","ref","styles","children","className","rest","htmlProps","descendants","ctx","context","useMemo","rootProps","root","displayName","Tab","tabProps","tabStyles","outline","display","alignItems","justifyContent","tab","TabList","tablistProps","tablistStyles","tablist","TabPanel","panelProps","tabpanel","TabPanels","panelsProps","tabpanels","TabIndicator","indicatorStyle","style","indicator"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  TabsDescendantsProvider,\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  UseTabListProps,\n  UseTabOptions,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  UseTabsProps,\n} from \"./use-tabs\"\n\ninterface TabsOptions {\n  /**\n   * If `true`, tabs will stretch to width of the tablist.\n   */\n  isFitted?: boolean\n  /**\n   * The alignment of the tabs\n   */\n  align?: \"start\" | \"end\" | \"center\"\n}\n\nexport interface TabsProps\n  extends UseTabsProps,\n    ThemingProps<\"Tabs\">,\n    Omit<HTMLChakraProps<\"div\">, \"onChange\">,\n    TabsOptions {\n  children: React.ReactNode\n}\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components.\n */\nexport const Tabs = forwardRef<TabsProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tabs\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const { htmlProps, descendants, ...ctx } = useTabs(rest)\n  const context = React.useMemo(() => ctx, [ctx])\n\n  const rootProps = omit(htmlProps as any, [\"isFitted\"])\n\n  return (\n    <TabsDescendantsProvider value={descendants}>\n      <TabsProvider value={context}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            className={cx(\"chakra-tabs\", className)}\n            ref={ref}\n            {...rootProps}\n            __css={styles.root}\n          >\n            {children}\n          </chakra.div>\n        </StylesProvider>\n      </TabsProvider>\n    </TabsDescendantsProvider>\n  )\n})\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\"\n}\n\nexport interface TabProps extends UseTabOptions, HTMLChakraProps<\"button\"> {}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport const Tab = forwardRef<TabProps, \"button\">((props, ref) => {\n  const styles = useStyles()\n  const tabProps = useTab({ ...props, ref })\n\n  const tabStyles: SystemStyleObject = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab,\n  }\n\n  return (\n    <chakra.button\n      {...tabProps}\n      className={cx(\"chakra-tabs__tab\", props.className)}\n      __css={tabStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\"\n}\n\nexport interface TabListProps\n  extends UseTabListProps,\n    Omit<HTMLChakraProps<\"div\">, \"onKeyDown\" | \"ref\"> {}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport const TabList = forwardRef<TabListProps, \"div\">((props, ref) => {\n  const tablistProps = useTabList({ ...props, ref })\n\n  const styles = useStyles()\n\n  const tablistStyles: SystemStyleObject = {\n    display: \"flex\",\n    ...styles.tablist,\n  }\n\n  return (\n    <chakra.div\n      {...tablistProps}\n      className={cx(\"chakra-tabs__tablist\", props.className)}\n      __css={tablistStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\"\n}\n\nexport interface TabPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport const TabPanel = forwardRef<TabPanelProps, \"div\">((props, ref) => {\n  const panelProps = useTabPanel({ ...props, ref })\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      outline=\"0\"\n      {...panelProps}\n      className={cx(\"chakra-tabs__tab-panel\", props.className)}\n      __css={styles.tabpanel}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\"\n}\n\nexport interface TabPanelsProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">((props, ref) => {\n  const panelsProps = useTabPanels(props)\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...panelsProps}\n      width=\"100%\"\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n      __css={styles.tabpanels}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\"\n}\n\nexport interface TabIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  (props, ref) => {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\"\n}\n"]},"metadata":{},"sourceType":"module"}