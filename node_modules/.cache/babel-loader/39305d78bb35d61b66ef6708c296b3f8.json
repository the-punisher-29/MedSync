{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport var Box = chakra(\"div\");\nif (__DEV__) {\n  Box.displayName = \"Box\";\n}\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\n\nexport var Square = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      size,\n      centerContent = true\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"size\", \"centerContent\"]);\n  var styles = centerContent ? {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  } : {};\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    ref: ref,\n    boxSize: size,\n    __css: _extends({}, styles, {\n      flexShrink: 0,\n      flexGrow: 0\n    })\n  }, rest));\n});\nif (__DEV__) {\n  Square.displayName = \"Square\";\n}\nexport var Circle = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      size\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"size\"]);\n  return /*#__PURE__*/React.createElement(Square, _extends({\n    size: size,\n    ref: ref,\n    borderRadius: \"9999px\"\n  }, rest));\n});\nif (__DEV__) {\n  Circle.displayName = \"Circle\";\n}","map":{"version":3,"sources":["../../src/box.tsx"],"names":["chakra","forwardRef","__DEV__","React","Box","displayName","Square","props","ref","size","centerContent","rest","styles","display","alignItems","justifyContent","flexShrink","flexGrow","Circle"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAKO,mBALP;AAMA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,GAAG,GAAGJ,MAAM,CAAC,KAAD,CAAlB;AAEP,IAAIE,OAAJ,EAAa;EACXE,GAAG,CAACC,WAAJD,GAAkB,KAAlBA;AACD;AAED;AACA;AACA;AACA;;AAcA,OAAO,IAAME,MAAM,GAAA,aAAGL,UAAU,CAAqB,CAACM,KAAD,EAAQC,GAAR,KAAgB;EACnE,IAAM;MAAEC,IAAF;MAAQC,aAAa,GAAG;IAAxB,CAAA,GAA0CH,KAAhD;IAAuCI,IAAvC,GAAA,6BAAA,CAAgDJ,KAAhD,EAAA,CAAA,MAAA,EAAA,eAAA,CAAA,CAAA;EAEA,IAAMK,MAAyB,GAAGF,aAAa,GAC3C;IAAEG,OAAO,EAAE,MAAX;IAAmBC,UAAU,EAAE,QAA/B;IAAyCC,cAAc,EAAE;EAAzD,CAD2C,GAE3C,CAAA,CAFJ;EAIA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA;IACE,GAAG,EAAEP,GADP;IAEE,OAAO,EAAEC,IAFX;IAGE,KAAK,EAAA,QAAA,CAAA,CAAA,CAAA,EACAG,MADA,EAAA;MAEHI,UAAU,EAAE,CAFT;MAGHC,QAAQ,EAAE;IAHP,CAAA;EAHP,CAAA,EAQMN,IARN,CAAA,CADF;AAYD,CAnB+B,CAAzB;AAqBP,IAAIT,OAAJ,EAAa;EACXI,MAAM,CAACD,WAAPC,GAAqB,QAArBA;AACD;AAED,OAAO,IAAMY,MAAM,GAAA,aAAGjB,UAAU,CAAqB,CAACM,KAAD,EAAQC,GAAR,KAAgB;EACnE,IAAM;MAAEC;IAAF,CAAA,GAAoBF,KAA1B;IAAiBI,IAAjB,GAAA,6BAAA,CAA0BJ,KAA1B,EAAA,CAAA,MAAA,CAAA,CAAA;EACA,OAAA,aAAO,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA,QAAA,CAAA;IAAQ,IAAI,EAAEE,IAAd;IAAoB,GAAG,EAAED,GAAzB;IAA8B,YAAY,EAAC;EAA3C,CAAA,EAAwDG,IAAxD,CAAA,CAAP;AACD,CAH+B,CAAzB;AAKP,IAAIT,OAAJ,EAAa;EACXgB,MAAM,CAACb,WAAPa,GAAqB,QAArBA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nif (__DEV__) {\n  Box.displayName = \"Box\"\n}\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  Square.displayName = \"Square\"\n}\n\nexport const Circle = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\"\n}\n"]},"metadata":{},"sourceType":"module"}