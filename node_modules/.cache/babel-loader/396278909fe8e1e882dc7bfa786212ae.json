{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n\n/**\n * React component used to cropping media (videos, images and maps)\n * to a desired aspect ratio.\n *\n * @see Docs https://chakra-ui.com/aspectratiobox\n */\nexport var AspectRatio = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      ratio = 4 / 3,\n      children,\n      className\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"ratio\", \"children\", \"className\"]); // enforce single child\n\n  var child = React.Children.only(children);\n  var _className = cx(\"chakra-aspect-ratio\", className);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    position: \"relative\",\n    className: _className,\n    _before: {\n      height: 0,\n      content: \"\\\"\\\"\",\n      display: \"block\",\n      paddingBottom: mapResponsive(ratio, r => 1 / r * 100 + \"%\")\n    },\n    __css: {\n      \"& > *:not(style)\": {\n        overflow: \"hidden\",\n        position: \"absolute\",\n        top: \"0\",\n        right: \"0\",\n        bottom: \"0\",\n        left: \"0\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        width: \"100%\",\n        height: \"100%\"\n      },\n      \"& > img, & > video\": {\n        objectFit: \"cover\"\n      }\n    }\n  }, rest), child);\n});\nif (__DEV__) {\n  AspectRatio.displayName = \"AspectRatio\";\n}","map":{"version":3,"sources":["../../src/aspect-ratio.tsx"],"names":["chakra","forwardRef","cx","mapResponsive","__DEV__","React","AspectRatio","props","ref","ratio","children","className","rest","child","Children","only","_className","height","content","display","paddingBottom","r","overflow","position","top","right","bottom","left","justifyContent","alignItems","width","objectFit","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAKO,mBALP;AAMA,SAASC,EAAT,EAAaC,aAAb,EAA4BC,OAA5B,QAA2C,kBAA3C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,WAAW,GAAA,aAAGL,UAAU,CAA0B,CAACM,KAAD,EAAQC,GAAR,KAAgB;EAC7E,IAAM;MAAEC,KAAK,GAAG,CAAA,GAAI,CAAd;MAAiBC,QAAjB;MAA2BC;IAA3B,CAAA,GAAkDJ,KAAxD;IAA+CK,IAA/C,GAAA,6BAAA,CAAwDL,KAAxD,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,WAAA,CAAA,CAAA,CAD6E,CAG7E;;EACA,IAAMM,KAAK,GAAGR,KAAK,CAACS,QAANT,CAAeU,IAAfV,CAAoBK,QAApBL,CAAd;EAEA,IAAMW,UAAU,GAAGd,EAAE,CAAC,qBAAD,EAAwBS,SAAxB,CAArB;EAEA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,GAAR,EAAA,QAAA,CAAA;IACE,GAAG,EAAEH,GADP;IAEE,QAAQ,EAAC,UAFX;IAGE,SAAS,EAAEQ,UAHb;IAIE,OAAO,EAAE;MACPC,MAAM,EAAE,CADD;MAEPC,OAAO,EAAA,MAFA;MAGPC,OAAO,EAAE,OAHF;MAIPC,aAAa,EAAEjB,aAAa,CAACM,KAAD,EAASY,CAAD,IAAW,CAAA,GAAIA,CAAL,GAAU,GAApB,GAAA,GAAR;IAJrB,CAJX;IAUE,KAAK,EAAE;MACL,kBAAA,EAAoB;QAClBC,QAAQ,EAAE,QADQ;QAElBC,QAAQ,EAAE,UAFQ;QAGlBC,GAAG,EAAE,GAHa;QAIlBC,KAAK,EAAE,GAJW;QAKlBC,MAAM,EAAE,GALU;QAMlBC,IAAI,EAAE,GANY;QAOlBR,OAAO,EAAE,MAPS;QAQlBS,cAAc,EAAE,QARE;QASlBC,UAAU,EAAE,QATM;QAUlBC,KAAK,EAAE,MAVW;QAWlBb,MAAM,EAAE;MAXU,CADf;MAcL,oBAAA,EAAsB;QACpBc,SAAS,EAAE;MADS;IAdjB;EAVT,CAAA,EA4BMnB,IA5BN,CAAA,EA8BGC,KA9BH,CADF;AAkCD,CA1CoC,CAA9B;AA4CP,IAAIT,OAAJ,EAAa;EACXE,WAAW,CAAC0B,WAAZ1B,GAA0B,aAA1BA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface AspectRatioOptions {\n  /**\n   * The aspect ratio of the Box. Common values are:\n   *\n   * `21/9`, `16/9`, `9/16`, `4/3`, `1.85/1`\n   */\n  ratio?: ResponsiveValue<number>\n}\n\nexport interface AspectRatioProps\n  extends HTMLChakraProps<\"div\">,\n    AspectRatioOptions {}\n\n/**\n * React component used to cropping media (videos, images and maps)\n * to a desired aspect ratio.\n *\n * @see Docs https://chakra-ui.com/aspectratiobox\n */\nexport const AspectRatio = forwardRef<AspectRatioProps, \"div\">((props, ref) => {\n  const { ratio = 4 / 3, children, className, ...rest } = props\n\n  // enforce single child\n  const child = React.Children.only(children)\n\n  const _className = cx(\"chakra-aspect-ratio\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      position=\"relative\"\n      className={_className}\n      _before={{\n        height: 0,\n        content: `\"\"`,\n        display: \"block\",\n        paddingBottom: mapResponsive(ratio, (r) => `${(1 / r) * 100}%`),\n      }}\n      __css={{\n        \"& > *:not(style)\": {\n          overflow: \"hidden\",\n          position: \"absolute\",\n          top: \"0\",\n          right: \"0\",\n          bottom: \"0\",\n          left: \"0\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"100%\",\n          height: \"100%\",\n        },\n        \"& > img, & > video\": {\n          objectFit: \"cover\",\n        }\n      }}\n      {...rest}\n    >\n      {child}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  AspectRatio.displayName = \"AspectRatio\"\n}\n"]},"metadata":{},"sourceType":"module"}