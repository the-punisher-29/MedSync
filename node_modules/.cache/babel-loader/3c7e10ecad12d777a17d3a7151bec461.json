{"ast":null,"code":"import { isObject } from \"@chakra-ui/utils\";\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nvar toExpr = function toExpr(operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n  return operands.map(toRef).join(\" \" + operator + \" \").replace(/calc/g, \"\");\n};\nvar _add = function add() {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n  return \"calc(\" + toExpr(\"+\", ...operands) + \")\";\n};\nvar _subtract = function subtract() {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n  return \"calc(\" + toExpr(\"-\", ...operands) + \")\";\n};\nvar _multiply = function multiply() {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n  return \"calc(\" + toExpr(\"*\", ...operands) + \")\";\n};\nvar _divide = function divide() {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n  return \"calc(\" + toExpr(\"/\", ...operands) + \")\";\n};\nvar _negate = x => {\n  var value = toRef(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\" + value;\n  }\n  return _multiply(value, -1);\n};\nexport var calc = Object.assign(x => ({\n  add: function add() {\n    for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      operands[_key6] = arguments[_key6];\n    }\n    return calc(_add(x, ...operands));\n  },\n  subtract: function subtract() {\n    for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      operands[_key7] = arguments[_key7];\n    }\n    return calc(_subtract(x, ...operands));\n  },\n  multiply: function multiply() {\n    for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      operands[_key8] = arguments[_key8];\n    }\n    return calc(_multiply(x, ...operands));\n  },\n  divide: function divide() {\n    for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      operands[_key9] = arguments[_key9];\n    }\n    return calc(_divide(x, ...operands));\n  },\n  negate: () => calc(_negate(x)),\n  toString: () => x.toString()\n}), {\n  add: _add,\n  subtract: _subtract,\n  multiply: _multiply,\n  divide: _divide,\n  negate: _negate\n});","map":{"version":3,"sources":["../../src/css-calc.ts"],"names":["isObject","toRef","operand","reference","String","toExpr","operator","operands","map","join","replace","add","subtract","multiply","divide","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","assign","toString"],"mappings":"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","sourcesContent":["import { isObject } from \"@chakra-ui/utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"]},"metadata":{},"sourceType":"module"}