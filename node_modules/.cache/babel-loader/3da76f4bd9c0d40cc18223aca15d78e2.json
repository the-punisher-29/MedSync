{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar fallbackIcon = {\n  path: /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"currentColor\",\n    strokeWidth: \"1.5\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    fill: \"none\",\n    d: \"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    strokeLinecap: \"round\",\n    d: \"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    fill: \"none\",\n    strokeMiterlimit: \"10\",\n    cx: \"12\",\n    cy: \"12\",\n    r: \"11.25\"\n  })),\n  viewBox: \"0 0 24 24\"\n};\nexport var Icon = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      as: element,\n      viewBox,\n      color = \"currentColor\",\n      focusable = false,\n      children,\n      className,\n      __css\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"as\", \"viewBox\", \"color\", \"focusable\", \"children\", \"className\", \"__css\"]);\n  var _className = cx(\"chakra-icon\", className);\n  var styles = _extends({\n    w: \"1em\",\n    h: \"1em\",\n    display: \"inline-block\",\n    lineHeight: \"1em\",\n    flexShrink: 0,\n    color\n  }, __css);\n  var shared = {\n    ref,\n    focusable,\n    className: _className,\n    __css: styles\n  };\n  var _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;\n  /**\n   * If you're using an icon library like `react-icons`.\n   * Note: anyone passing the `as` prop, should manage the `viewBox` from the external component\n   */\n\n  if (element && typeof element !== \"string\") {\n    return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n      as: element\n    }, shared, rest));\n  }\n  var _path = children != null ? children : fallbackIcon.path;\n  return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n    verticalAlign: \"middle\",\n    viewBox: _viewBox\n  }, shared, rest), _path);\n});\nif (__DEV__) {\n  Icon.displayName = \"Icon\";\n}\nexport default Icon;","map":{"version":3,"sources":["../../src/icon.tsx"],"names":["chakra","forwardRef","cx","__DEV__","React","fallbackIcon","path","viewBox","Icon","props","ref","as","element","color","focusable","children","className","__css","rest","_className","styles","w","h","display","lineHeight","flexShrink","shared","_viewBox","_path","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAGEC,UAHF,QAKO,mBALP;AAMA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,YAAY,GAAG;EACnBC,IAAI,EAAA,aACF,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;IAAG,MAAM,EAAC,cAAV;IAAyB,WAAW,EAAC;EAArC,CAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IACE,aAAa,EAAC,OADhB;IAEE,IAAI,EAAC,MAFP;IAGE,CAAC,EAAC;EAHJ,CAAA,CADF,EAAA,aAME,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IACE,IAAI,EAAC,cADP;IAEE,aAAa,EAAC,OAFhB;IAGE,CAAC,EAAC;EAHJ,CAAA,CANF,EAAA,aAWE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;IAAQ,IAAI,EAAC,MAAb;IAAoB,gBAAgB,EAAC,IAArC;IAA0C,EAAE,EAAC,IAA7C;IAAkD,EAAE,EAAC,IAArD;IAA0D,CAAC,EAAC;EAA5D,CAAA,CAXF,CAFiB;EAgBnBC,OAAO,EAAE;AAhBU,CAArB;AAuBA,OAAO,IAAMC,IAAI,GAAA,aAAGP,UAAU,CAAmB,CAACQ,KAAD,EAAQC,GAAR,KAAgB;EAC/D,IAAM;MACJC,EAAE,EAAEC,OADA;MAEJL,OAFI;MAGJM,KAAK,GAAG,cAHJ;MAIJC,SAAS,GAAG,KAJR;MAKJC,QALI;MAMJC,SANI;MAOJC;IAPI,CAAA,GASFR,KATJ;IAQKS,IARL,GAAA,6BAAA,CASIT,KATJ,EAAA,CAAA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAAA,OAAA,CAAA,CAAA;EAWA,IAAMU,UAAU,GAAGjB,EAAE,CAAC,aAAD,EAAgBc,SAAhB,CAArB;EAEA,IAAMI,MAAyB,GAAA,QAAA,CAAA;IAC7BC,CAAC,EAAE,KAD0B;IAE7BC,CAAC,EAAE,KAF0B;IAG7BC,OAAO,EAAE,cAHoB;IAI7BC,UAAU,EAAE,KAJiB;IAK7BC,UAAU,EAAE,CALiB;IAM7BZ;EAN6B,CAAA,EAO1BI,KAP0B,CAA/B;EAUA,IAAMS,MAAW,GAAG;IAClBhB,GADkB;IAElBI,SAFkB;IAGlBE,SAAS,EAAEG,UAHO;IAIlBF,KAAK,EAAEG;EAJW,CAApB;EAOA,IAAMO,QAAQ,GAAGpB,OAAH,IAAA,IAAA,GAAGA,OAAH,GAAcF,YAAY,CAACE,OAAzC;EAEA;AACF;AACA;AACA;;EACE,IAAIK,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAAlC,EAA4C;IAC1C,OAAA,aAAO,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,GAAR,EAAA,QAAA,CAAA;MAAY,EAAE,EAAEA;IAAhB,CAAA,EAA6Bc,MAA7B,EAAyCR,IAAzC,CAAA,CAAP;EACD;EAED,IAAMU,KAAK,GAAIb,QAAJ,IAAA,IAAA,GAAIA,QAAJ,GAAgBV,YAAY,CAACC,IAAxC;EAEA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,GAAR,EAAA,QAAA,CAAA;IAAY,aAAa,EAAC,QAA1B;IAAmC,OAAO,EAAEqB;EAA5C,CAAA,EAA0DD,MAA1D,EAAsER,IAAtE,CAAA,EACGU,KADH,CADF;AAKD,CAhD6B,CAAvB;AAkDP,IAAIzB,OAAJ,EAAa;EACXK,IAAI,CAACqB,WAALrB,GAAmB,MAAnBA;AACD;AAED,eAAeA,IAAf","sourcesContent":["import {\n  chakra,\n  ChakraProps,\n  forwardRef,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst fallbackIcon = {\n  path: (\n    <g stroke=\"currentColor\" strokeWidth=\"1.5\">\n      <path\n        strokeLinecap=\"round\"\n        fill=\"none\"\n        d=\"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25\"\n      />\n      <path\n        fill=\"currentColor\"\n        strokeLinecap=\"round\"\n        d=\"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0\"\n      />\n      <circle fill=\"none\" strokeMiterlimit=\"10\" cx=\"12\" cy=\"12\" r=\"11.25\" />\n    </g>\n  ),\n  viewBox: \"0 0 24 24\",\n}\n\nexport interface IconProps\n  extends Omit<React.SVGAttributes<SVGElement>, keyof ChakraProps>,\n    ChakraProps {}\n\nexport const Icon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const {\n    as: element,\n    viewBox,\n    color = \"currentColor\",\n    focusable = false,\n    children,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-icon\", className)\n\n  const styles: SystemStyleObject = {\n    w: \"1em\",\n    h: \"1em\",\n    display: \"inline-block\",\n    lineHeight: \"1em\",\n    flexShrink: 0,\n    color,\n    ...__css,\n  }\n\n  const shared: any = {\n    ref,\n    focusable,\n    className: _className,\n    __css: styles,\n  }\n\n  const _viewBox = viewBox ?? fallbackIcon.viewBox\n\n  /**\n   * If you're using an icon library like `react-icons`.\n   * Note: anyone passing the `as` prop, should manage the `viewBox` from the external component\n   */\n  if (element && typeof element !== \"string\") {\n    return <chakra.svg as={element} {...shared} {...rest} />\n  }\n\n  const _path = (children ?? fallbackIcon.path) as React.ReactNode\n\n  return (\n    <chakra.svg verticalAlign=\"middle\" viewBox={_viewBox} {...shared} {...rest}>\n      {_path}\n    </chakra.svg>\n  )\n})\n\nif (__DEV__) {\n  Icon.displayName = \"Icon\"\n}\n\nexport default Icon\n"]},"metadata":{},"sourceType":"module"}