{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { sortNodes, isElement, getNextIndex, getPrevIndex } from \"./utils\";\n\n/**\n * @internal\n *\n * Class to manage descendants and their relative indices in the DOM.\n * It uses `node.compareDocumentPosition(...)` under the hood\n */\nexport class DescendantsManager {\n  constructor() {\n    var _this = this;\n    _defineProperty(this, \"descendants\", new Map());\n    _defineProperty(this, \"register\", nodeOrOptions => {\n      if (nodeOrOptions == null) return;\n      if (isElement(nodeOrOptions)) {\n        return this.registerNode(nodeOrOptions);\n      }\n      return node => {\n        this.registerNode(node, nodeOrOptions);\n      };\n    });\n    _defineProperty(this, \"unregister\", node => {\n      this.descendants.delete(node);\n      var sorted = sortNodes(Array.from(this.descendants.keys()));\n      this.assignIndex(sorted);\n    });\n    _defineProperty(this, \"destroy\", () => {\n      this.descendants.clear();\n    });\n    _defineProperty(this, \"assignIndex\", descendants => {\n      this.descendants.forEach(descendant => {\n        var index = descendants.indexOf(descendant.node);\n        descendant.index = index;\n        descendant.node.dataset.index = descendant.index.toString();\n      });\n    });\n    _defineProperty(this, \"count\", () => this.descendants.size);\n    _defineProperty(this, \"enabledCount\", () => this.enabledValues().length);\n    _defineProperty(this, \"values\", () => {\n      var values = Array.from(this.descendants.values());\n      return values.sort((a, b) => a.index - b.index);\n    });\n    _defineProperty(this, \"enabledValues\", () => {\n      return this.values().filter(descendant => !descendant.disabled);\n    });\n    _defineProperty(this, \"item\", index => {\n      if (this.count() === 0) return undefined;\n      return this.values()[index];\n    });\n    _defineProperty(this, \"enabledItem\", index => {\n      if (this.enabledCount() === 0) return undefined;\n      return this.enabledValues()[index];\n    });\n    _defineProperty(this, \"first\", () => this.item(0));\n    _defineProperty(this, \"firstEnabled\", () => this.enabledItem(0));\n    _defineProperty(this, \"last\", () => this.item(this.descendants.size - 1));\n    _defineProperty(this, \"lastEnabled\", () => {\n      var lastIndex = this.enabledValues().length - 1;\n      return this.enabledItem(lastIndex);\n    });\n    _defineProperty(this, \"indexOf\", node => {\n      var _this$descendants$get, _this$descendants$get2;\n      if (!node) return -1;\n      return (_this$descendants$get = (_this$descendants$get2 = this.descendants.get(node)) == null ? void 0 : _this$descendants$get2.index) != null ? _this$descendants$get : -1;\n    });\n    _defineProperty(this, \"enabledIndexOf\", node => {\n      if (node == null) return -1;\n      return this.enabledValues().findIndex(i => i.node.isSameNode(node));\n    });\n    _defineProperty(this, \"next\", function (index, loop) {\n      if (loop === void 0) {\n        loop = true;\n      }\n      var next = getNextIndex(index, _this.count(), loop);\n      return _this.item(next);\n    });\n    _defineProperty(this, \"nextEnabled\", function (index, loop) {\n      if (loop === void 0) {\n        loop = true;\n      }\n      var item = _this.item(index);\n      if (!item) return;\n      var enabledIndex = _this.enabledIndexOf(item.node);\n      var nextEnabledIndex = getNextIndex(enabledIndex, _this.enabledCount(), loop);\n      return _this.enabledItem(nextEnabledIndex);\n    });\n    _defineProperty(this, \"prev\", function (index, loop) {\n      if (loop === void 0) {\n        loop = true;\n      }\n      var prev = getPrevIndex(index, _this.count() - 1, loop);\n      return _this.item(prev);\n    });\n    _defineProperty(this, \"prevEnabled\", function (index, loop) {\n      if (loop === void 0) {\n        loop = true;\n      }\n      var item = _this.item(index);\n      if (!item) return;\n      var enabledIndex = _this.enabledIndexOf(item.node);\n      var prevEnabledIndex = getPrevIndex(enabledIndex, _this.enabledCount() - 1, loop);\n      return _this.enabledItem(prevEnabledIndex);\n    });\n    _defineProperty(this, \"registerNode\", (node, options) => {\n      if (!node || this.descendants.has(node)) return;\n      var keys = Array.from(this.descendants.keys()).concat(node);\n      var sorted = sortNodes(keys);\n      if (options != null && options.disabled) {\n        options.disabled = !!options.disabled;\n      }\n      var descendant = _extends({\n        node,\n        index: -1\n      }, options);\n      this.descendants.set(node, descendant);\n      this.assignIndex(sorted);\n    });\n  }\n}","map":{"version":3,"sources":["../../src/descendant.ts"],"names":["sortNodes","isElement","getNextIndex","getPrevIndex","DescendantsManager","Map","nodeOrOptions","registerNode","node","descendants","delete","sorted","Array","from","keys","assignIndex","clear","forEach","descendant","index","indexOf","dataset","toString","size","enabledValues","length","values","sort","a","b","filter","disabled","count","undefined","enabledCount","item","enabledItem","lastIndex","get","findIndex","i","isSameNode","loop","next","enabledIndex","enabledIndexOf","nextEnabledIndex","prev","prevEnabledIndex","options","has","concat","set"],"mappings":"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","sourcesContent":["import { sortNodes, isElement, getNextIndex, getPrevIndex } from \"./utils\"\n\nexport type DescendantOptions<T = {}> = T & {\n  /**\n   * If `true`, the item will be registered in all nodes map\n   * but omitted from enabled nodes map\n   */\n  disabled?: boolean\n  /**\n   * The id of the item\n   */\n  id?: string\n}\n\nexport type Descendant<T, K> = DescendantOptions<K> & {\n  /**\n   * DOM element of the item\n   */\n  node: T\n  /**\n   * index of item in all nodes map and enabled nodes map\n   */\n  index: number\n}\n\n/**\n * @internal\n *\n * Class to manage descendants and their relative indices in the DOM.\n * It uses `node.compareDocumentPosition(...)` under the hood\n */\nexport class DescendantsManager<\n  T extends HTMLElement,\n  K extends Record<string, any> = {}\n> {\n  private descendants = new Map<T, Descendant<T, K>>()\n\n  register = (nodeOrOptions: T | null | DescendantOptions<K>) => {\n    if (nodeOrOptions == null) return\n\n    if (isElement(nodeOrOptions)) {\n      return this.registerNode(nodeOrOptions)\n    }\n\n    return (node: T | null) => {\n      this.registerNode(node, nodeOrOptions)\n    }\n  }\n\n  unregister = (node: T) => {\n    this.descendants.delete(node)\n    const sorted = sortNodes(Array.from(this.descendants.keys()))\n    this.assignIndex(sorted)\n  }\n\n  destroy = () => {\n    this.descendants.clear()\n  }\n\n  private assignIndex = (descendants: Node[]) => {\n    this.descendants.forEach((descendant) => {\n      const index = descendants.indexOf(descendant.node)\n      descendant.index = index\n      descendant.node.dataset.index = descendant.index.toString()\n    })\n  }\n\n  count = () => this.descendants.size\n\n  enabledCount = () => this.enabledValues().length\n\n  values = () => {\n    const values = Array.from(this.descendants.values())\n    return values.sort((a, b) => a.index - b.index)\n  }\n\n  enabledValues = () => {\n    return this.values().filter((descendant) => !descendant.disabled)\n  }\n\n  item = (index: number) => {\n    if (this.count() === 0) return undefined\n    return this.values()[index]\n  }\n\n  enabledItem = (index: number) => {\n    if (this.enabledCount() === 0) return undefined\n    return this.enabledValues()[index]\n  }\n\n  first = () => this.item(0)\n\n  firstEnabled = () => this.enabledItem(0)\n\n  last = () => this.item(this.descendants.size - 1)\n\n  lastEnabled = () => {\n    const lastIndex = this.enabledValues().length - 1\n    return this.enabledItem(lastIndex)\n  }\n\n  indexOf = (node: T | null) => {\n    if (!node) return -1\n    return this.descendants.get(node)?.index ?? -1\n  }\n\n  enabledIndexOf = (node: T | null) => {\n    if (node == null) return -1\n    return this.enabledValues().findIndex((i) => i.node.isSameNode(node))\n  }\n\n  next = (index: number, loop = true) => {\n    const next = getNextIndex(index, this.count(), loop)\n    return this.item(next)\n  }\n\n  nextEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const nextEnabledIndex = getNextIndex(\n      enabledIndex,\n      this.enabledCount(),\n      loop,\n    )\n    return this.enabledItem(nextEnabledIndex)\n  }\n\n  prev = (index: number, loop = true) => {\n    const prev = getPrevIndex(index, this.count() - 1, loop)\n    return this.item(prev)\n  }\n\n  prevEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const prevEnabledIndex = getPrevIndex(\n      enabledIndex,\n      this.enabledCount() - 1,\n      loop,\n    )\n    return this.enabledItem(prevEnabledIndex)\n  }\n\n  private registerNode = (node: T | null, options?: DescendantOptions<K>) => {\n    if (!node || this.descendants.has(node)) return\n\n    const keys = Array.from(this.descendants.keys()).concat(node)\n    const sorted = sortNodes(keys)\n\n    if (options?.disabled) {\n      options.disabled = !!options.disabled\n    }\n\n    const descendant = { node, index: -1, ...options }\n\n    this.descendants.set(node, descendant as Descendant<T, K>)\n\n    this.assignIndex(sorted)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}