{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useCallbackRef, useEventListener, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, minSafeInteger, normalizeEventKey } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\nvar sanitize = value => value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n      focusInputOnChange = true,\n      clampValueOnBlur = true,\n      keepWithinRange = true,\n      min = minSafeInteger,\n      max = maxSafeInteger,\n      step: stepProp = 1,\n      isReadOnly,\n      isDisabled,\n      isRequired,\n      getAriaValueText,\n      isInvalid,\n      pattern = \"[0-9]*(.[0-9]+)?\",\n      inputMode = \"decimal\",\n      allowMouseWheel,\n      id,\n      name,\n      \"aria-describedby\": ariaDescBy,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      onFocus,\n      onBlur\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"isRequired\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\", \"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"onFocus\", \"onBlur\"]);\n  var onFocusProp = useCallbackRef(onFocus);\n  var onBlurProp = useCallbackRef(onBlur);\n  var getAriaValueTextProp = useCallbackRef(getAriaValueText);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n  var counter = useCounter(props);\n  var {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var [isFocused, setFocused] = useBoolean();\n  var inputRef = React.useRef(null);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value != counter.value;\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value));\n    }\n  }, []);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = React.useCallback(event => {\n    updateFn(sanitize(event.target.value));\n  }, [updateFn]);\n  var onKeyDown = React.useCallback(event => {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n  var getStepFactor = event => {\n    var ratio = 1;\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n  var ariaValueText = React.useMemo(() => {\n    var text = getAriaValueTextProp == null ? void 0 : getAriaValueTextProp(counter.value);\n    if (!isNull(text)) {\n      return text;\n    }\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  }, [counter.value, getAriaValueTextProp]);\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n  var validateAndClamp = React.useCallback(() => {\n    var next = counter.value;\n    if (next === \"\") return;\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n    counter.cast(next);\n  }, [counter, max, min]);\n  var onInputBlur = React.useCallback(() => {\n    setFocused.off();\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, {\n        nextTick: true\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = React.useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = React.useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", event => {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current, {\n    passive: false\n  });\n  var getIncrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var getInputProps = React.useCallback(function (props, ref) {\n    var _props$readOnly, _props$readOnly2, _props$required, _props$required2;\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled\n    }, props, {\n      readOnly: (_props$readOnly = props.readOnly) != null ? _props$readOnly : isReadOnly,\n      \"aria-readonly\": (_props$readOnly2 = props.readOnly) != null ? _props$readOnly2 : isReadOnly,\n      \"aria-required\": (_props$required = props.required) != null ? _props$required : isRequired,\n      required: (_props$required2 = props.required) != null ? _props$required2 : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur)\n    });\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, onFocusProp, setFocused.on, onBlurProp, onInputBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}","map":{"version":3,"sources":["../../src/use-number-input.ts"],"names":["useCounter","useBoolean","useCallbackRef","useEventListener","useSafeLayoutEffect","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","minSafeInteger","normalizeEventKey","mergeRefs","React","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","sanitize","value","split","filter","join","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","isRequired","getAriaValueText","isInvalid","pattern","inputMode","allowMouseWheel","id","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onBlur","htmlProps","onFocusProp","onBlurProp","getAriaValueTextProp","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","inputRef","useRef","current","notInSync","setValue","isInteractive","useCallback","spinner","onChange","event","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","ariaValueText","useMemo","text","defaultText","toString","undefined","validateAndClamp","next","valueAsNumber","cast","onInputBlur","off","focusInput","nextTick","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","getInputProps","type","readOnly","required","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","on"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA4C,oBAA5C;AACA,SACEC,UADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,mBAJF,QAKO,kBALP;AAMA,SACEC,QADF,EAEEC,eAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,MALF,EAMEC,cANF,EAOEC,cAPF,EASEC,iBATF,QAUO,kBAVP;AAWA,SAASC,SAAT,QAAmD,wBAAnD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SACEC,+BADF,EAEEC,2BAFF,QAGO,SAHP;AA2EA,IAAMC,QAAQ,GAAIC,KAAD,IACfA,KAAK,CAACC,KAAND,CAAY,EAAZA,CAAAA,CAAgBE,MAAhBF,CAAuBH,+BAAvBG,CAAAA,CAAwDG,IAAxDH,CAA6D,EAA7DA,CADF;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,cAAT,CAAwBC,KAAxB,EAAyD;EAAA,IAAjCA,KAAiC,KAAA,KAAA,CAAA,EAAA;IAAjCA,KAAiC,GAAJ,CAAA,CAAI;EAAA;EAC9D,IAAM;MACJC,kBAAkB,GAAG,IADjB;MAEJC,gBAAgB,GAAG,IAFf;MAGJC,eAAe,GAAG,IAHd;MAIJC,GAAG,GAAGjB,cAJF;MAKJkB,GAAG,GAAGnB,cALF;MAMJoB,IAAI,EAAEC,QAAQ,GAAG,CANb;MAOJC,UAPI;MAQJC,UARI;MASJC,UATI;MAUJC,gBAVI;MAWJC,SAXI;MAYJC,OAAO,GAAG,kBAZN;MAaJC,SAAS,GAAG,SAbR;MAcJC,eAdI;MAeJC,EAfI;MAkBJC,IAlBI;MAmBJ,kBAAA,EAAoBC,UAnBhB;MAoBJ,YAAA,EAAcC,SApBV;MAqBJ,iBAAA,EAAmBC,cArBf;MAsBJC,OAtBI;MAuBJC;IAvBI,CAAA,GAyBFtB,KAzBJ;IAwBKuB,SAxBL,GAAA,6BAAA,CAyBIvB,KAzBJ,EAAA,CAAA,oBAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,QAAA,CAAA,CAAA;EA2BA,IAAMwB,WAAW,GAAG9C,cAAc,CAAC2C,OAAD,CAAlC;EACA,IAAMI,UAAU,GAAG/C,cAAc,CAAC4C,MAAD,CAAjC;EACA,IAAMI,oBAAoB,GAAGhD,cAAc,CAACiC,gBAAD,CAA3C;EAEA;AACF;AACA;AACA;AACA;;EACE,IAAMgB,OAAO,GAAGnD,UAAU,CAACwB,KAAD,CAA1B;EAEA,IAAM;IACJ4B,MAAM,EAAEC,QADJ;IAEJC,SAAS,EAAEC,WAFP;IAGJC,SAAS,EAAEC;EAHP,CAAA,GAIFN,OAJJ;EAMA;AACF;AACA;AACA;AACA;;EACE,IAAM,CAACO,SAAD,EAAYC,UAAZ,CAAA,GAA0B1D,UAAU,CAAA,CAA1C;EAEA,IAAM2D,QAAQ,GAAG9C,KAAK,CAAC+C,MAAN/C,CAA+B,IAA/BA,CAAjB;EAEA;AACF;AACA;;EACEV,mBAAmB,CAAC,MAAM;IACxB,IAAI,CAACwD,QAAQ,CAACE,OAAd,EAAuB;IACvB,IAAMC,SAAS,GAAGH,QAAQ,CAACE,OAATF,CAAiBzC,KAAjByC,IAA0BT,OAAO,CAAChC,KAApD;IACA,IAAI4C,SAAJ,EAAe;MACbZ,OAAO,CAACa,QAARb,CAAiBjC,QAAQ,CAAC0C,QAAQ,CAACE,OAATF,CAAiBzC,KAAlB,CAAzBgC,CAAAA;IACD;EACF,CANkB,EAMhB,EANgB,CAAnB/C;EAQA,IAAM6D,aAAa,GAAG,EAAEjC,UAAU,IAAIC,UAAhB,CAAtB;EAEA,IAAMqB,SAAS,GAAG,KAAK,CAACY,WAAN,CAChB,UAACpC,IAAD,EAAqB;IAAA,IAApBA,IAAoB,KAAA,KAAA,CAAA,EAAA;MAApBA,IAAoB,GAAbC,QAAa;IAAA;IACnB,IAAIkC,aAAJ,EAAmB;MACjBV,WAAW,CAACzB,IAAD,CAAXyB;IACD;EACF,CALe,EAMhB,CAACA,WAAD,EAAcU,aAAd,EAA6BlC,QAA7B,CANgB,CAAlB;EASA,IAAMyB,SAAS,GAAG,KAAK,CAACU,WAAN,CAChB,UAACpC,IAAD,EAAqB;IAAA,IAApBA,IAAoB,KAAA,KAAA,CAAA,EAAA;MAApBA,IAAoB,GAAbC,QAAa;IAAA;IACnB,IAAIkC,aAAJ,EAAmB;MACjBR,WAAW,CAAC3B,IAAD,CAAX2B;IACD;EACF,CALe,EAMhB,CAACA,WAAD,EAAcQ,aAAd,EAA6BlC,QAA7B,CANgB,CAAlB;EASA;AACF;AACA;AACA;AACA;AACA;;EACE,IAAMoC,OAAO,GAAGpD,UAAU,CAACuC,SAAD,EAAYE,SAAZ,CAA1B;EAEA;AACF;AACA;AACA;;EACE,IAAMY,QAAQ,GAAG,KAAK,CAACF,WAAN,CACdG,KAAD,IAAgD;IAC9ChB,QAAQ,CAACnC,QAAQ,CAACmD,KAAK,CAACC,MAAND,CAAalD,KAAd,CAAT,CAARkC;EACD,CAHc,EAIf,CAACA,QAAD,CAJe,CAAjB;EAOA,IAAMkB,SAAS,GAAG,KAAK,CAACL,WAAN,CACfG,KAAD,IAAgC;IAC9B;AACN;AACA;IACM,IAAI,CAACpD,2BAA2B,CAACoD,KAAD,CAAhC,EAAyC;MACvCA,KAAK,CAACG,cAANH,CAAAA,CAAAA;IACD;IAED;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;IACM,IAAMI,UAAU,GAAGC,aAAa,CAACL,KAAD,CAAbK,GAAuB3C,QAA1C;IAEA,IAAM4C,QAAQ,GAAG/D,iBAAiB,CAACyD,KAAD,CAAlC;IAEA,IAAMO,MAAmB,GAAG;MAC1BC,OAAO,EAAE,CAAA,KAAMvB,SAAS,CAACmB,UAAD,CADE;MAE1BK,SAAS,EAAE,CAAA,KAAMtB,SAAS,CAACiB,UAAD,CAFA;MAG1BM,IAAI,EAAE,CAAA,KAAM1B,QAAQ,CAACzB,GAAD,CAHM;MAI1BoD,GAAG,EAAE,CAAA,KAAM3B,QAAQ,CAACxB,GAAD;IAJO,CAA5B;IAOA,IAAMoD,MAAM,GAAGL,MAAM,CAACD,QAAD,CAArB;IAEA,IAAIM,MAAJ,EAAY;MACVZ,KAAK,CAACG,cAANH,CAAAA,CAAAA;MACAY,MAAM,CAACZ,KAAD,CAANY;IACD;EACF,CAlCe,EAmChB,CAAC5B,QAAD,EAAWG,SAAX,EAAsBF,SAAtB,EAAiCzB,GAAjC,EAAsCD,GAAtC,EAA2CG,QAA3C,CAnCgB,CAAlB;EAsCA,IAAM2C,aAAa,GACjBL,KADoB,IAEjB;IACH,IAAIa,KAAK,GAAG,CAAZ;IACA,IAAIb,KAAK,CAACc,OAANd,IAAiBA,KAAK,CAACe,OAA3B,EAAoC;MAClCF,KAAK,GAAG,GAARA;IACD;IACD,IAAIb,KAAK,CAACgB,QAAV,EAAoB;MAClBH,KAAK,GAAG,EAARA;IACD;IACD,OAAOA,KAAP;EACD,CAXD;EAaA;AACF;AACA;AACA;AACA;AACA;AACA;;EACE,IAAMI,aAAa,GAAG,KAAK,CAACC,OAAN,CAAc,MAAM;IACxC,IAAMC,IAAI,GAAGtC,oBAAH,IAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,oBAAoB,CAAGC,OAAO,CAAChC,KAAX,CAAjC;IACA,IAAI,CAACV,MAAM,CAAC+E,IAAD,CAAX,EAAmB;MACjB,OAAOA,IAAP;IACD;IAED,IAAMC,WAAW,GAAGtC,OAAO,CAAChC,KAARgC,CAAcuC,QAAdvC,CAAAA,CAApB,CANwC,CAOxC;;IACA,OAAO,CAACsC,WAAD,GAAeE,SAAf,GAA2BF,WAAlC;EACD,CATqB,EASnB,CAACtC,OAAO,CAAChC,KAAT,EAAgB+B,oBAAhB,CATmB,CAAtB;EAWA;AACF;AACA;;EACE,IAAM0C,gBAAgB,GAAG,KAAK,CAAC1B,WAAN,CAAkB,MAAM;IAC/C,IAAI2B,IAAI,GAAG1C,OAAO,CAAChC,KAAnB;IAEA,IAAI0E,IAAI,KAAK,EAAb,EAAiB;IAEjB,IAAI1C,OAAO,CAAC2C,aAAR3C,GAAwBvB,GAA5B,EAAiC;MAC/BiE,IAAI,GAAGjE,GAAPiE;IACD;IAED,IAAI1C,OAAO,CAAC2C,aAAR3C,GAAwBtB,GAA5B,EAAiC;MAC/BgE,IAAI,GAAGhE,GAAPgE;IACD;IAED;AACJ;AACA;AACA;AACA;AACA;;IACI1C,OAAO,CAAC4C,IAAR5C,CAAa0C,IAAb1C,CAAAA;EACD,CApBwB,EAoBtB,CAACA,OAAD,EAAUtB,GAAV,EAAeD,GAAf,CApBsB,CAAzB;EAsBA,IAAMoE,WAAW,GAAG,KAAK,CAAC9B,WAAN,CAAkB,MAAM;IAC1CP,UAAU,CAACsC,GAAXtC,CAAAA,CAAAA;IAEA,IAAIjC,gBAAJ,EAAsB;MACpBkE,gBAAgB,CAAA,CAAA;IACjB;EACF,CANmB,EAMjB,CAAClE,gBAAD,EAAmBiC,UAAnB,EAA+BiC,gBAA/B,CANiB,CAApB;EAQA,IAAMM,UAAU,GAAG,KAAK,CAAChC,WAAN,CAAkB,MAAM;IACzC,IAAIzC,kBAAJ,EAAwB;MACtBlB,KAAK,CAACqD,QAAQ,CAACE,OAAV,EAAmB;QAAEqC,QAAQ,EAAE;MAAZ,CAAnB,CAAL5F;IACD;EACF,CAJkB,EAIhB,CAACkB,kBAAD,CAJgB,CAAnB;EAMA,IAAM2E,MAAM,GAAG,KAAK,CAAClC,WAAN,CACZG,KAAD,IAAgB;IACdA,KAAK,CAACG,cAANH,CAAAA,CAAAA;IACAF,OAAO,CAACkC,EAARlC,CAAAA,CAAAA;IACA+B,UAAU,CAAA,CAAA;EACX,CALY,EAMb,CAACA,UAAD,EAAa/B,OAAb,CANa,CAAf;EASA,IAAMmC,QAAQ,GAAG,KAAK,CAACpC,WAAN,CACdG,KAAD,IAAgB;IACdA,KAAK,CAACG,cAANH,CAAAA,CAAAA;IACAF,OAAO,CAACoC,IAARpC,CAAAA,CAAAA;IACA+B,UAAU,CAAA,CAAA;EACX,CALc,EAMf,CAACA,UAAD,EAAa/B,OAAb,CANe,CAAjB;EASA,IAAMqC,WAAW,GACfhG,SAAS,IAAI,CAAC,CAACiG,QAAQ,CAACC,eAATD,CAAyBE,YAAxCnG,GACI,cADJA,GAEI,aAHN;EAKAL,gBAAgB,CACd,OADc,EAEbkE,KAAD,IAAW;IACT,IAAMuC,cAAc,GAAGH,QAAQ,CAACI,aAATJ,KAA2B7C,QAAQ,CAACE,OAA3D;IACA,IAAI,CAACvB,eAAD,IAAoB,CAACqE,cAAzB,EAAyC;IAEzCvC,KAAK,CAACG,cAANH,CAAAA,CAAAA;IAEA,IAAMI,UAAU,GAAGC,aAAa,CAACL,KAAD,CAAbK,GAA8B3C,QAAjD;IACA,IAAM+E,SAAS,GAAGC,IAAI,CAACC,IAALD,CAAU1C,KAAK,CAAC4C,MAAhBF,CAAlB;IAEA,IAAID,SAAS,KAAK,CAAC,CAAnB,EAAsB;MACpBxD,SAAS,CAACmB,UAAD,CAATnB;IACD,CAFD,MAEO,IAAIwD,SAAS,KAAK,CAAlB,EAAqB;MAC1BtD,SAAS,CAACiB,UAAD,CAATjB;IACD;EACF,CAhBa,EAiBdI,QAAQ,CAACE,OAjBK,EAkBd;IAAEoD,OAAO,EAAE;EAAX,CAlBc,CAAhB/G;EAqBA,IAAMgH,uBAAmC,GAAG,KAAK,CAACjD,WAAN,CAC1C,UAAC1C,KAAD,EAAa4F,GAAb,EAA4B;IAAA,IAA3B5F,KAA2B,KAAA,KAAA,CAAA,EAAA;MAA3BA,KAA2B,GAAnB,CAAA,CAAmB;IAAA;IAAA,IAAf4F,GAAe,KAAA,KAAA,CAAA,EAAA;MAAfA,GAAe,GAAT,IAAS;IAAA;IAC1B,IAAMC,QAAQ,GAAGpF,UAAU,IAAKN,eAAe,IAAIwB,OAAO,CAACmE,OAA3D;IACA,OAAA,QAAA,CAAA,CAAA,CAAA,EACK9F,KADL,EAAA;MAEE4F,GAFF;MAGEG,IAAI,EAAE,QAHR;MAIEC,QAAQ,EAAE,CAAC,CAJb;MAKE,CAAChB,WAAD,GAAelG,eAAe,CAACkB,KAAK,CAACgF,WAAD,CAAN,EAAqBJ,MAArB,CALhC;MAMEqB,SAAS,EAAEnH,eAAe,CAACkB,KAAK,CAACiG,SAAP,EAAkBtD,OAAO,CAACuD,IAA1B,CAN5B;MAOEC,YAAY,EAAErH,eAAe,CAACkB,KAAK,CAACiG,SAAP,EAAkBtD,OAAO,CAACuD,IAA1B,CAP/B;MAQEE,UAAU,EAAEtH,eAAe,CAACkB,KAAK,CAACoG,UAAP,EAAmBzD,OAAO,CAACuD,IAA3B,CAR7B;MASEL,QATF;MAUE,eAAA,EAAiBhH,QAAQ,CAACgH,QAAD;IAV3B,CAAA,CAAA;EAYD,CAfyC,EAgB1C,CACEb,WADF,EAEErD,OAAO,CAACmE,OAFV,EAGE3F,eAHF,EAIEyE,MAJF,EAKEjC,OAAO,CAACuD,IALV,EAMEzF,UANF,CAhB0C,CAA5C;EA0BA,IAAM4F,uBAAmC,GAAG,KAAK,CAAC3D,WAAN,CAC1C,UAAC1C,KAAD,EAAa4F,GAAb,EAA4B;IAAA,IAA3B5F,KAA2B,KAAA,KAAA,CAAA,EAAA;MAA3BA,KAA2B,GAAnB,CAAA,CAAmB;IAAA;IAAA,IAAf4F,GAAe,KAAA,KAAA,CAAA,EAAA;MAAfA,GAAe,GAAT,IAAS;IAAA;IAC1B,IAAMC,QAAQ,GAAGpF,UAAU,IAAKN,eAAe,IAAIwB,OAAO,CAAC2E,OAA3D;IACA,OAAA,QAAA,CAAA,CAAA,CAAA,EACKtG,KADL,EAAA;MAEE4F,GAFF;MAGEG,IAAI,EAAE,QAHR;MAIEC,QAAQ,EAAE,CAAC,CAJb;MAKE,CAAChB,WAAD,GAAelG,eAAe,CAACkB,KAAK,CAACgF,WAAD,CAAN,EAAqBF,QAArB,CALhC;MAMEqB,YAAY,EAAErH,eAAe,CAACkB,KAAK,CAACmG,YAAP,EAAqBxD,OAAO,CAACuD,IAA7B,CAN/B;MAOED,SAAS,EAAEnH,eAAe,CAACkB,KAAK,CAACiG,SAAP,EAAkBtD,OAAO,CAACuD,IAA1B,CAP5B;MAQEE,UAAU,EAAEtH,eAAe,CAACkB,KAAK,CAACoG,UAAP,EAAmBzD,OAAO,CAACuD,IAA3B,CAR7B;MASEL,QATF;MAUE,eAAA,EAAiBhH,QAAQ,CAACgH,QAAD;IAV3B,CAAA,CAAA;EAYD,CAfyC,EAgB1C,CACEb,WADF,EAEErD,OAAO,CAAC2E,OAFV,EAGEnG,eAHF,EAIE2E,QAJF,EAKEnC,OAAO,CAACuD,IALV,EAMEzF,UANF,CAhB0C,CAA5C;EA0BA,IAAM8F,aAML,GAAG,KAAK,CAAC7D,WAAN,CACF,UAAC1C,KAAD,EAAa4F,GAAb,EAAA;IAAA,IAAA,eAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,gBAAA;IAAA,IAAC5F,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAS,CAAA,CAAT;IAAA;IAAA,IAAa4F,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAmB,IAAnB;IAAA;IAAA,OAAA,QAAA,CAAA;MACE3E,IADF;MAEEH,SAFF;MAGE0F,IAAI,EAAE,MAHR;MAIE3F,OAJF;MAKE,iBAAA,EAAmBO,cALrB;MAME,YAAA,EAAcD,SANhB;MAOE,kBAAA,EAAoBD,UAPtB;MAQEF,EARF;MASE6E,QAAQ,EAAEpF;IATZ,CAAA,EAUKT,KAVL,EAAA;MAWEyG,QAAQ,EAAA,CAAA,eAAA,GAAEzG,KAAK,CAACyG,QAAR,KAAA,IAAA,GAAA,eAAA,GAAoBjG,UAX9B;MAYE,eAAA,EAAA,CAAA,gBAAA,GAAiBR,KAAK,CAACyG,QAAvB,KAAA,IAAA,GAAA,gBAAA,GAAmCjG,UAZrC;MAaE,eAAA,EAAA,CAAA,eAAA,GAAiBR,KAAK,CAAC0G,QAAvB,KAAA,IAAA,GAAA,eAAA,GAAmChG,UAbrC;MAcEgG,QAAQ,EAAA,CAAA,gBAAA,GAAE1G,KAAK,CAAC0G,QAAR,KAAA,IAAA,GAAA,gBAAA,GAAoBhG,UAd9B;MAeEkF,GAAG,EAAEvG,SAAS,CAAC+C,QAAD,EAAWwD,GAAX,CAfhB;MAgBEjG,KAAK,EAAEgC,OAAO,CAAChC,KAhBjB;MAiBEoG,IAAI,EAAE,YAjBR;MAkBE,eAAA,EAAiB3F,GAlBnB;MAmBE,eAAA,EAAiBC,GAnBnB;MAoBE,eAAA,EAAiBsG,MAAM,CAACC,KAAPD,CAAahF,OAAO,CAAC2C,aAArBqC,CAAAA,GACbxC,SADawC,GAEbhF,OAAO,CAAC2C,aAtBd;MAuBE,cAAA,EAAgBzF,QAAQ,CAAC+B,SAAD,IAAA,IAAA,GAACA,SAAD,GAAce,OAAO,CAACkF,YAAtB,CAvB1B;MAwBE,gBAAA,EAAkB/C,aAxBpB;MAyBEgD,YAAY,EAAE,KAzBhB;MA0BEC,WAAW,EAAE,KA1Bf;MA2BEnE,QAAQ,EAAE9D,eAAe,CAACkB,KAAK,CAAC4C,QAAP,EAAiBA,QAAjB,CA3B3B;MA4BEG,SAAS,EAAEjE,eAAe,CAACkB,KAAK,CAAC+C,SAAP,EAAkBA,SAAlB,CA5B5B;MA6BE1B,OAAO,EAAEvC,eAAe,CAACkB,KAAK,CAACqB,OAAP,EAAgBG,WAAhB,EAA6BW,UAAU,CAAC6E,EAAxC,CA7B1B;MA8BE1F,MAAM,EAAExC,eAAe,CAACkB,KAAK,CAACsB,MAAP,EAAeG,UAAf,EAA2B+C,WAA3B;IA9BzB,CAAA,CAAA;EAAA,CADE,EAiCF,CACEvD,IADF,EAEEH,SAFF,EAGED,OAHF,EAIEO,cAJF,EAKED,SALF,EAMED,UANF,EAOEF,EAPF,EAQEP,UARF,EASEC,UATF,EAUEF,UAVF,EAWEI,SAXF,EAYEe,OAAO,CAAChC,KAZV,EAaEgC,OAAO,CAAC2C,aAbV,EAcE3C,OAAO,CAACkF,YAdV,EAeEzG,GAfF,EAgBEC,GAhBF,EAiBEyD,aAjBF,EAkBElB,QAlBF,EAmBEG,SAnBF,EAoBEvB,WApBF,EAqBEW,UAAU,CAAC6E,EArBb,EAsBEvF,UAtBF,EAuBE+C,WAvBF,CAjCE,CANJ;EAkEA,OAAO;IACL7E,KAAK,EAAEgC,OAAO,CAAChC,KADV;IAEL2E,aAAa,EAAE3C,OAAO,CAAC2C,aAFlB;IAGLpC,SAHK;IAILzB,UAJK;IAKLD,UALK;IAMLmF,uBANK;IAOLU,uBAPK;IAQLE,aARK;IASLhF;EATK,CAAP;AAWD","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport {\n  useBoolean,\n  useCallbackRef,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter, EventKeyMap } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus,\n    onBlur,\n    ...htmlProps\n  } = props\n\n  const onFocusProp = useCallbackRef(onFocus)\n  const onBlurProp = useCallbackRef(onBlur)\n  const getAriaValueTextProp = useCallbackRef(getAriaValueText)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = React.useMemo(() => {\n    const text = getAriaValueTextProp?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueTextProp])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onInputBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, { nextTick: true })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getInputProps: PropGetter<\n    HTMLInputElement,\n    Pick<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"disabled\" | \"required\" | \"readOnly\"\n    >\n  > = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props,\n      readOnly: props.readOnly ?? isReadOnly,\n      \"aria-readonly\": props.readOnly ?? isReadOnly,\n      \"aria-required\": props.required ?? isRequired,\n      required: props.required ?? isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur),\n    }),\n    [\n      name,\n      inputMode,\n      pattern,\n      ariaLabelledBy,\n      ariaLabel,\n      ariaDescBy,\n      id,\n      isDisabled,\n      isRequired,\n      isReadOnly,\n      isInvalid,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      onFocusProp,\n      setFocused.on,\n      onBlurProp,\n      onInputBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"]},"metadata":{},"sourceType":"module"}