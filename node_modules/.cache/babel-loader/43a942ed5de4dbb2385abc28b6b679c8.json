{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, px } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport function useTooltip(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n      openDelay = 0,\n      closeDelay = 0,\n      closeOnClick = true,\n      closeOnMouseDown,\n      onOpen: onOpenProp,\n      onClose: onCloseProp,\n      placement,\n      id,\n      isOpen: isOpenProp,\n      defaultIsOpen,\n      arrowSize = 10,\n      arrowShadowColor,\n      arrowPadding,\n      modifiers,\n      isDisabled,\n      gutter,\n      offset,\n      direction\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"openDelay\", \"closeDelay\", \"closeOnClick\", \"closeOnMouseDown\", \"onOpen\", \"onClose\", \"placement\", \"id\", \"isOpen\", \"defaultIsOpen\", \"arrowSize\", \"arrowShadowColor\", \"arrowPadding\", \"modifiers\", \"isDisabled\", \"gutter\", \"offset\", \"direction\"]);\n  var {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  });\n  var {\n    referenceRef,\n    getPopperProps,\n    getArrowInnerProps,\n    getArrowProps\n  } = usePopper({\n    enabled: isOpen,\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n    direction\n  });\n  var tooltipId = useId(id, \"tooltip\");\n  var ref = React.useRef(null);\n  var enterTimeout = React.useRef();\n  var exitTimeout = React.useRef();\n  var openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay);\n    }\n  }, [isDisabled, onOpen, openDelay]);\n  var closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay);\n  }, [closeDelay, onClose]);\n  var onClick = React.useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay]);\n  var onMouseDown = React.useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay();\n    }\n  }, [closeOnMouseDown, closeWithDelay]);\n  var onKeyDown = event => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  };\n  useEventListener(\"keydown\", onKeyDown);\n  React.useEffect(() => () => {\n    clearTimeout(enterTimeout.current);\n    clearTimeout(exitTimeout.current);\n  }, []);\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n\n  useEventListener(\"mouseleave\", closeWithDelay, () => ref.current);\n  var getTriggerProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (_ref === void 0) {\n      _ref = null;\n    }\n    var triggerProps = _extends({}, props, {\n      ref: mergeRefs(ref, _ref, referenceRef),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : undefined\n    });\n    return triggerProps;\n  }, [openWithDelay, closeWithDelay, onMouseDown, isOpen, tooltipId, onClick, referenceRef]);\n  var getTooltipPositionerProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return getPopperProps(_extends({}, props, {\n      style: _extends({}, props.style, {\n        [popperCSSVars.arrowSize.var]: arrowSize ? px(arrowSize) : undefined,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      })\n    }), forwardedRef);\n  }, [getPopperProps, arrowSize, arrowShadowColor]);\n  var getTooltipProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (_ref === void 0) {\n      _ref = null;\n    }\n    var tooltipProps = _extends({\n      ref: _ref\n    }, htmlProps, props, {\n      id: tooltipId,\n      role: \"tooltip\",\n      style: _extends({}, props.style, {\n        position: \"relative\",\n        transformOrigin: popperCSSVars.transformOrigin.varRef\n      })\n    });\n    return tooltipProps;\n  }, [htmlProps, tooltipId]);\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps\n  };\n}","map":{"version":3,"sources":["../../src/use-tooltip.ts"],"names":["useDisclosure","useEventListener","useId","popperCSSVars","usePopper","mergeRefs","callAllHandlers","px","React","useTooltip","props","openDelay","closeDelay","closeOnClick","closeOnMouseDown","onOpen","onOpenProp","onClose","onCloseProp","placement","id","isOpen","isOpenProp","defaultIsOpen","arrowSize","arrowShadowColor","arrowPadding","modifiers","isDisabled","gutter","offset","direction","htmlProps","referenceRef","getPopperProps","getArrowInnerProps","getArrowProps","enabled","tooltipId","ref","useRef","enterTimeout","exitTimeout","openWithDelay","useCallback","current","window","setTimeout","closeWithDelay","clearTimeout","onClick","onMouseDown","onKeyDown","event","key","useEffect","getTriggerProps","_ref","triggerProps","onMouseEnter","onFocus","onBlur","undefined","getTooltipPositionerProps","forwardedRef","style","var","getTooltipProps","tooltipProps","role","position","transformOrigin","varRef","show","hide"],"mappings":"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","sourcesContent":["import { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { callAllHandlers, px } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    | \"modifiers\"\n    | \"gutter\"\n    | \"offset\"\n    | \"arrowPadding\"\n    | \"direction\"\n    | \"placement\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean\n  isDisabled?: boolean\n  arrowSize?: number\n  arrowShadowColor?: string\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    direction,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const {\n    referenceRef,\n    getPopperProps,\n    getArrowInnerProps,\n    getArrowProps,\n  } = usePopper({\n    enabled: isOpen,\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n    direction,\n  })\n\n  const tooltipId = useId(id, \"tooltip\")\n\n  const ref = React.useRef<any>(null)\n\n  const enterTimeout = React.useRef<number>()\n  const exitTimeout = React.useRef<number>()\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay)\n    }\n  }, [isDisabled, onOpen, openDelay])\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay)\n  }, [closeDelay, onClose])\n\n  const onClick = React.useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay])\n\n  const onMouseDown = React.useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay()\n    }\n  }, [closeOnMouseDown, closeWithDelay])\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay()\n    }\n  }\n\n  useEventListener(\"keydown\", onKeyDown)\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current)\n      clearTimeout(exitTimeout.current)\n    },\n    [],\n  )\n\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(\"mouseleave\", closeWithDelay, () => ref.current)\n\n  const getTriggerProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        ref: mergeRefs(ref, _ref, referenceRef),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return triggerProps\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onMouseDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      referenceRef,\n    ],\n  )\n\n  const getTooltipPositionerProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            ...props.style,\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? px(arrowSize)\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n          },\n        },\n        forwardedRef,\n      ),\n    [getPopperProps, arrowSize, arrowShadowColor],\n  )\n\n  const getTooltipProps = React.useCallback(\n    (props = {}, _ref = null) => {\n      const tooltipProps = {\n        ref: _ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n        style: {\n          ...props.style,\n          position: \"relative\",\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n      }\n\n      return tooltipProps\n    },\n    [htmlProps, tooltipId],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n"]},"metadata":{},"sourceType":"module"}