{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nexport var Input = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Input\", props);\n  var ownProps = omitThemingProps(props);\n  var input = useFormControl(ownProps);\n  var _className = cx(\"chakra-input\", props.className);\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, input, {\n    __css: styles.field,\n    ref: ref,\n    className: _className\n  }));\n});\nif (__DEV__) {\n  Input.displayName = \"Input\";\n} // This is used in `input-group.tsx`\n\nInput.id = \"Input\";","map":{"version":3,"sources":["../../src/input.tsx"],"names":["useFormControl","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","__DEV__","React","Input","props","ref","styles","ownProps","input","_className","className","field","displayName","id"],"mappings":";;;;;;;;;;;;;;AAAA,SAA6BA,cAA7B,QAAmD,yBAAnD;AACA,SACEC,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAKEC,mBALF,QAOO,mBAPP;AAQA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAiCA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,KAAK,GAAA,aAAGN,UAAU,CAAsB,CAACO,KAAD,EAAQC,GAAR,KAAgB;EACnE,IAAMC,MAAM,GAAGP,mBAAmB,CAAC,OAAD,EAAUK,KAAV,CAAlC;EACA,IAAMG,QAAQ,GAAGT,gBAAgB,CAACM,KAAD,CAAjC;EACA,IAAMI,KAAK,GAAGb,cAAc,CAAmBY,QAAnB,CAA5B;EACA,IAAME,UAAU,GAAGT,EAAE,CAAC,cAAD,EAAiBI,KAAK,CAACM,SAAvB,CAArB;EAEA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,KAAR,EAAA,QAAA,CAAA,CAAA,CAAA,EACMF,KADN,EAAA;IAEE,KAAK,EAAEF,MAAM,CAACK,KAFhB;IAGE,GAAG,EAAEN,GAHP;IAIE,SAAS,EAAEI;EAJb,CAAA,CAAA,CADF;AAQD,CAd8B,CAAxB;AAgBP,IAAIR,OAAJ,EAAa;EACXE,KAAK,CAACS,WAANT,GAAoB,OAApBA;AACD,C,CAED;;AACAA,KAAK,CAACU,EAANV,GAAW,OAAXA","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   *  please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nexport const Input = forwardRef<InputProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const ownProps = omitThemingProps(props)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nif (__DEV__) {\n  Input.displayName = \"Input\"\n}\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"]},"metadata":{},"sourceType":"module"}