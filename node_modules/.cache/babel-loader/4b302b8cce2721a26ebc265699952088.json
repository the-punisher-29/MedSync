{"ast":null,"code":"import { isFunction } from \"@chakra-ui/utils\";\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nexport function assignRef(ref, value) {\n  if (ref == null) return;\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n  try {\n    // @ts-ignore\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\" + value + \"' to ref '\" + ref + \"'\");\n  }\n}\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\n\nexport function mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return node => {\n    refs.forEach(ref => assignRef(ref, node));\n  };\n}","map":{"version":3,"sources":["../../src/refs.ts"],"names":["isFunction","assignRef","ref","value","current","error","Error","mergeRefs","refs","node","forEach"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAAT,CAA4BC,GAA5B,EAA0DC,KAA1D,EAAoE;EACzE,IAAID,GAAG,IAAI,IAAX,EAAiB;EAEjB,IAAIF,UAAU,CAACE,GAAD,CAAd,EAAqB;IACnBA,GAAG,CAACC,KAAD,CAAHD;IACA;EACD;EAED,IAAI;IACF;IACAA,GAAG,CAACE,OAAJF,GAAcC,KAAdD;EACD,CAHD,CAGE,OAAOG,KAAP,EAAc;IACd,MAAM,IAAIC,KAAJ,CAAA,uBAAA,GAAkCH,KAAlC,GAAA,YAAA,GAAoDD,GAApD,GAAA,GAAA,CAAN;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,SAAT,CAAA,EAA4D;EAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAnCC,IAAmC,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;IAAnCA,IAAmC,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA;EAAA;EACjE,OAAQC,IAAD,IAAoB;IACzBD,IAAI,CAACE,OAALF,CAAcN,GAAD,IAASD,SAAS,CAACC,GAAD,EAAMO,IAAN,CAA/BD,CAAAA;EACD,CAFD;AAGD","sourcesContent":["import { isFunction } from \"@chakra-ui/utils\"\n\ntype ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (isFunction(ref)) {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\nexport function mergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => assignRef(ref, node))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}