{"ast":null,"code":"var _jsxFileName = \"E:\\\\Pr\\\\Web D\\\\MedSync\\\\src\\\\components\\\\products\\\\Products.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import Bounce from 'react-reveal/Bounce';\n// import useFetch from '../../hooks/useFetch';\n// import Heading from '../Heading';\n// import Product from './Product';\n// const Products = () => {\n//     const [data] = useFetch('products');\n//     return (\n//         <section className=\"max-w-screen-xl mx-auto px-6 py-6 pb-24\">\n//             {/* heading  */}\n//             <Heading title=\"Products\" />\n//             {/* products  */}\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10 py-6\">\n//                 {data.slice(0,6).map(product => (\n//                     <Bounce left key={product.id}>\n//                         <Product {...product} />\n//                     </Bounce>\n//                 ))}\n//             </div>\n//         </section>\n//     )\n// }\n// export default Products\nimport React from 'react';\nimport Bounce from 'react-reveal/Bounce';\nimport useFetch from '../../hooks/useFetch';\nimport Heading from '../Heading';\nimport Product from './Product';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Products = () => {\n  _s();\n\n  const [data, loading, error] = useFetch('products'); // Adjusted useFetch to return loading and error states\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"max-w-screen-xl mx-auto px-6 py-6 pb-24\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      title: \"Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading products...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error loading products: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 23\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10 py-6\",\n      children: data.slice(0, 6).map(product => /*#__PURE__*/_jsxDEV(Bounce, {\n        left: true,\n        children: /*#__PURE__*/_jsxDEV(Product, { ...product\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this)\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Products, \"ZIWOI3cEqNnncEB8jtGS/IXVY/Q=\", false, function () {\n  return [useFetch];\n});\n\n_c = Products;\nexport default Products; // In the updated Products component, we added loading and error states to handle the loading and error scenarios when fetching data from Firestore. We display a loading message when the data is being fetched and an error message if there is an error. The products are only rendered if the loading and error states are false, indicating that the data has been successfully fetched. This helps provide a better user experience by informing the user about the status of the data fetching process   \n\nvar _c;\n\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"sources":["E:/Pr/Web D/MedSync/src/components/products/Products.js"],"names":["React","Bounce","useFetch","Heading","Product","Products","data","loading","error","message","slice","map","product","id"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,IAAyBN,QAAQ,CAAC,UAAD,CAAvC,CADmB,CACkC;;AAErD,sBACI;AAAS,IAAA,SAAS,EAAC,yCAAnB;AAAA,4BAEI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAFJ,EAKKK,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALhB,EAMKC,KAAK,iBAAI;AAAA,6CAA4BA,KAAK,CAACC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,YANd,EASK,CAACF,OAAD,IAAY,CAACC,KAAb,iBACG;AAAK,MAAA,SAAS,EAAC,4DAAf;AAAA,gBACKF,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBC,GAAjB,CAAqBC,OAAO,iBACzB,QAAC,MAAD;AAAQ,QAAA,IAAI,MAAZ;AAAA,+BACI,QAAC,OAAD,OAAaA;AAAb;AAAA;AAAA;AAAA;AAAA;AADJ,SAAkBA,OAAO,CAACC,EAA1B;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAVR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAxBD;;GAAMR,Q;UAC6BH,Q;;;KAD7BG,Q;AA0BN,eAAeA,QAAf,C,CACA","sourcesContent":["// import React from 'react';\r\n// import Bounce from 'react-reveal/Bounce';\r\n// import useFetch from '../../hooks/useFetch';\r\n// import Heading from '../Heading';\r\n// import Product from './Product';\r\n\r\n// const Products = () => {\r\n//     const [data] = useFetch('products');\r\n    \r\n//     return (\r\n//         <section className=\"max-w-screen-xl mx-auto px-6 py-6 pb-24\">\r\n//             {/* heading  */}\r\n//             <Heading title=\"Products\" />\r\n//             {/* products  */}\r\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10 py-6\">\r\n//                 {data.slice(0,6).map(product => (\r\n//                     <Bounce left key={product.id}>\r\n//                         <Product {...product} />\r\n//                     </Bounce>\r\n//                 ))}\r\n//             </div>\r\n                \r\n//         </section>\r\n//     )\r\n// }\r\n\r\n// export default Products\r\n\r\nimport React from 'react';\r\nimport Bounce from 'react-reveal/Bounce';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport Heading from '../Heading';\r\nimport Product from './Product';\r\n\r\nconst Products = () => {\r\n    const [data, loading, error] = useFetch('products'); // Adjusted useFetch to return loading and error states\r\n    \r\n    return (\r\n        <section className=\"max-w-screen-xl mx-auto px-6 py-6 pb-24\">\r\n            {/* heading */}\r\n            <Heading title=\"Products\" />\r\n            \r\n            {/* Loading and Error states */}\r\n            {loading && <p>Loading products...</p>}\r\n            {error && <p>Error loading products: {error.message}</p>}\r\n\r\n            {/* products */}\r\n            {!loading && !error && (\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10 py-6\">\r\n                    {data.slice(0, 6).map(product => (\r\n                        <Bounce left key={product.id}>\r\n                            <Product {...product} />\r\n                        </Bounce>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Products;\r\n// In the updated Products component, we added loading and error states to handle the loading and error scenarios when fetching data from Firestore. We display a loading message when the data is being fetched and an error message if there is an error. The products are only rendered if the loading and error states are false, indicating that the data has been successfully fetched. This helps provide a better user experience by informing the user about the status of the data fetching process   "]},"metadata":{},"sourceType":"module"}