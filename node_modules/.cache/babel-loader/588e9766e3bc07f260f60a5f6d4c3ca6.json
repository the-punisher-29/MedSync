{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var Switch = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Switch\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    {\n      spacing = \"0.5rem\",\n      children\n    } = _omitThemingProps,\n    ownProps = _objectWithoutPropertiesLoose(_omitThemingProps, [\"spacing\", \"children\"]);\n  var {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps\n  } = useCheckbox(ownProps);\n  var containerStyles = React.useMemo(() => _extends({\n    display: \"inline-block\",\n    verticalAlign: \"middle\",\n    lineHeight: \"normal\"\n  }, styles.container), [styles.container]);\n  var trackStyles = React.useMemo(() => _extends({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\"\n  }, styles.track), [styles.track]);\n  var labelStyles = React.useMemo(() => _extends({\n    userSelect: \"none\",\n    marginStart: spacing\n  }, styles.label), [spacing, styles.label]);\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, getRootProps(), {\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles\n  }), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-switch__input\"\n  }, getInputProps({}, ref))), /*#__PURE__*/React.createElement(chakra.span, _extends({}, getCheckboxProps(), {\n    className: \"chakra-switch__track\",\n    __css: trackStyles\n  }), /*#__PURE__*/React.createElement(chakra.span, {\n    __css: styles.thumb,\n    className: \"chakra-switch__thumb\",\n    \"data-checked\": dataAttr(state.isChecked),\n    \"data-hover\": dataAttr(state.isHovered)\n  })), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-switch__label\"\n  }, getLabelProps(), {\n    __css: labelStyles\n  }), children));\n});\nif (__DEV__) {\n  Switch.displayName = \"Switch\";\n}","map":{"version":3,"sources":["../../src/switch.tsx"],"names":["useCheckbox","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","dataAttr","__DEV__","React","Switch","props","ref","styles","spacing","children","ownProps","state","getInputProps","getCheckboxProps","getRootProps","getLabelProps","containerStyles","useMemo","display","verticalAlign","lineHeight","container","trackStyles","flexShrink","justifyContent","boxSizing","cursor","track","labelStyles","userSelect","marginStart","label","className","thumb","isChecked","isHovered","displayName"],"mappings":"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","sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@chakra-ui/checkbox\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SwitchProps\n  extends Omit<UseCheckboxProps, \"isIndeterminate\">,\n    Omit<HTMLChakraProps<\"label\">, keyof UseCheckboxProps>,\n    ThemingProps<\"Switch\"> {\n  /**\n   * The spacing between the switch and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n}\n\nexport const Switch = forwardRef<SwitchProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Switch\", props)\n\n  const { spacing = \"0.5rem\", children, ...ownProps } = omitThemingProps(props)\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps,\n  } = useCheckbox(ownProps)\n\n  const containerStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      display: \"inline-block\",\n      verticalAlign: \"middle\",\n      lineHeight: \"normal\",\n      ...styles.container,\n    }),\n    [styles.container],\n  )\n\n  const trackStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\",\n      ...styles.track,\n    }),\n    [styles.track],\n  )\n\n  const labelStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      userSelect: \"none\",\n      marginStart: spacing,\n      ...styles.label,\n    }),\n    [spacing, styles.label],\n  )\n\n  return (\n    <chakra.label\n      {...getRootProps()}\n      className={cx(\"chakra-switch\", props.className)}\n      __css={containerStyles}\n    >\n      <input className=\"chakra-switch__input\" {...getInputProps({}, ref)} />\n      <chakra.span\n        {...getCheckboxProps()}\n        className=\"chakra-switch__track\"\n        __css={trackStyles}\n      >\n        <chakra.span\n          __css={styles.thumb}\n          className=\"chakra-switch__thumb\"\n          data-checked={dataAttr(state.isChecked)}\n          data-hover={dataAttr(state.isHovered)}\n        />\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-switch__label\"\n          {...getLabelProps()}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  Switch.displayName = \"Switch\"\n}\n"]},"metadata":{},"sourceType":"module"}