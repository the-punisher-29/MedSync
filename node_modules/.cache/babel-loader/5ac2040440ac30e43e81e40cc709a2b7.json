{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { getValidChildren } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\";\nexport var StackDivider = props => /*#__PURE__*/React.createElement(chakra.div, _extends({\n  className: \"chakra-stack__divider\"\n}, props, {\n  __css: _extends({}, props[\"__css\"], {\n    borderWidth: 0,\n    alignSelf: \"stretch\",\n    borderColor: \"inherit\",\n    width: \"auto\",\n    height: \"auto\"\n  })\n}));\nexport var StackItem = props => /*#__PURE__*/React.createElement(chakra.div, _extends({\n  className: \"chakra-stack__item\"\n}, props, {\n  __css: _extends({\n    display: \"inline-block\",\n    flex: \"0 0 auto\",\n    minWidth: 0\n  }, props[\"__css\"])\n}));\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport var Stack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      isInline,\n      direction: directionProp,\n      align,\n      justify,\n      spacing = \"0.5rem\",\n      wrap,\n      children,\n      divider,\n      className,\n      shouldWrapChildren\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"isInline\", \"direction\", \"align\", \"justify\", \"spacing\", \"wrap\", \"children\", \"divider\", \"className\", \"shouldWrapChildren\"]);\n  var direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  var styles = React.useMemo(() => getStackStyles({\n    direction,\n    spacing\n  }), [direction, spacing]);\n  var dividerStyle = React.useMemo(() => getDividerStyles({\n    spacing,\n    direction\n  }), [spacing, direction]);\n  var hasDivider = !!divider;\n  var shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  var validChildren = getValidChildren(children);\n  var clones = shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n    // Prefer provided child key, fallback to index\n    var key = typeof child.key !== \"undefined\" ? child.key : index;\n    var isLast = index + 1 === validChildren.length;\n    var wrappedChild = /*#__PURE__*/React.createElement(StackItem, {\n      key: key\n    }, child);\n    var _child = shouldWrapChildren ? wrappedChild : child;\n    if (!hasDivider) return _child;\n    var clonedDivider = /*#__PURE__*/React.cloneElement(divider, {\n      __css: dividerStyle\n    });\n    var _divider = isLast ? null : clonedDivider;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: key\n    }, _child, _divider);\n  });\n  var _className = cx(\"chakra-stack\", className);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: styles.flexDirection,\n    flexWrap: wrap,\n    className: _className,\n    __css: hasDivider ? {} : {\n      [selector]: styles[selector]\n    }\n  }, rest), clones);\n});\nif (__DEV__) {\n  Stack.displayName = \"Stack\";\n}\n/**\n * A view that arranges its children in a horizontal line.\n */\n\nexport var HStack = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(Stack, _extends({\n  align: \"center\"\n}, props, {\n  direction: \"row\",\n  ref: ref\n})));\nif (__DEV__) {\n  HStack.displayName = \"HStack\";\n}\n/**\n * A view that arranges its children in a vertical line.\n */\n\nexport var VStack = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(Stack, _extends({\n  align: \"center\"\n}, props, {\n  direction: \"column\",\n  ref: ref\n})));\nif (__DEV__) {\n  VStack.displayName = \"VStack\";\n}","map":{"version":3,"sources":["../../src/stack.tsx"],"names":["chakra","forwardRef","cx","__DEV__","getValidChildren","React","getDividerStyles","getStackStyles","selector","StackDivider","props","borderWidth","alignSelf","borderColor","width","height","StackItem","display","flex","minWidth","Stack","ref","isInline","direction","directionProp","align","justify","spacing","wrap","children","divider","className","shouldWrapChildren","rest","styles","useMemo","dividerStyle","hasDivider","shouldUseChildren","validChildren","clones","map","child","index","key","isLast","length","wrappedChild","_child","clonedDivider","cloneElement","__css","_divider","_className","flexDirection","displayName","HStack","VStack"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => getStackStyles({ direction, spacing }), [\n    direction,\n    spacing,\n  ])\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        // Prefer provided child key, fallback to index\n        const key = typeof child.key !== \"undefined\" ? child.key : index\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={key}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(\n          divider as React.ReactElement<any>,\n          { __css: dividerStyle },\n        )\n\n        const _divider = isLast ? null : clonedDivider\n\n        return (\n          <React.Fragment key={key}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n"]},"metadata":{},"sourceType":"module"}