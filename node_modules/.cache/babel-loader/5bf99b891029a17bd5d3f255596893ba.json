{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { chakra, forwardRef, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { Slide } from \"@chakra-ui/transition\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Modal, ModalFocusScope, useModalContext } from \"./modal\";\nvar [DrawerContextProvider, useDrawerContext] = createContext();\nvar placementMap = {\n  start: {\n    ltr: \"left\",\n    rtl: \"right\"\n  },\n  end: {\n    ltr: \"right\",\n    rtl: \"left\"\n  }\n};\nfunction getDrawerPlacement(placement, dir) {\n  var _placementMap$placeme, _placementMap$placeme2;\n  if (!placement) return;\n  return (_placementMap$placeme = (_placementMap$placeme2 = placementMap[placement]) == null ? void 0 : _placementMap$placeme2[dir]) != null ? _placementMap$placeme : placement;\n}\nexport function Drawer(props) {\n  var _theme$components;\n  var {\n      isOpen,\n      onClose,\n      placement: placementProp = \"right\",\n      children\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"isOpen\", \"onClose\", \"placement\", \"children\"]);\n  var theme = useTheme();\n  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;\n  var placement = getDrawerPlacement(placementProp, theme.direction);\n  return /*#__PURE__*/React.createElement(DrawerContextProvider, {\n    value: {\n      placement\n    }\n  }, /*#__PURE__*/React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose,\n    styleConfig: drawerStyleConfig\n  }, rest), children));\n}\nvar StyledSlide = chakra(Slide);\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport var DrawerContent = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      className,\n      children\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n  var {\n    getDialogProps,\n    getDialogContainerProps,\n    isOpen\n  } = useModalContext();\n  var dialogProps = getDialogProps(rest, ref);\n  var containerProps = getDialogContainerProps();\n  var _className = cx(\"chakra-modal__content\", className);\n  var styles = useStyles();\n  var dialogStyles = _extends({\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0\n  }, styles.dialog);\n  var dialogContainerStyles = _extends({\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0\n  }, styles.dialogContainer);\n  var {\n    placement\n  } = useDrawerContext();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, containerProps, {\n    className: \"chakra-modal__content-container\",\n    __css: dialogContainerStyles\n  }), /*#__PURE__*/React.createElement(ModalFocusScope, null, /*#__PURE__*/React.createElement(StyledSlide, _extends({\n    direction: placement,\n    in: isOpen,\n    className: _className\n  }, dialogProps, {\n    __css: dialogStyles\n  }), children)));\n});\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\";\n}\nexport { ModalBody as DrawerBody, ModalCloseButton as DrawerCloseButton, ModalFooter as DrawerFooter, ModalHeader as DrawerHeader, ModalOverlay as DrawerOverlay } from \"./modal\";","map":{"version":3,"sources":["../../src/drawer.tsx"],"names":["createContext","chakra","forwardRef","useStyles","useTheme","Slide","cx","__DEV__","React","Modal","ModalFocusScope","useModalContext","DrawerContextProvider","useDrawerContext","placementMap","start","ltr","rtl","end","getDrawerPlacement","placement","dir","Drawer","props","isOpen","onClose","placementProp","children","rest","theme","drawerStyleConfig","components","direction","StyledSlide","DrawerContent","ref","className","getDialogProps","getDialogContainerProps","dialogProps","containerProps","_className","styles","dialogStyles","display","flexDirection","position","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","displayName","ModalBody","DrawerBody","ModalCloseButton","DrawerCloseButton","ModalFooter","DrawerFooter","ModalHeader","DrawerHeader","ModalOverlay","DrawerOverlay"],"mappings":"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","sourcesContent":["import { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n  useStyles,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { Slide, SlideOptions } from \"@chakra-ui/transition\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Modal, ModalFocusScope, ModalProps, useModalContext } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ntype LogicalPlacement = \"start\" | \"end\"\ntype LogicalPlacementMap = Record<\n  LogicalPlacement,\n  { ltr: SlideOptions[\"direction\"]; rtl: SlideOptions[\"direction\"] }\n>\ntype DrawerPlacement = SlideOptions[\"direction\"] | LogicalPlacement\n\nconst placementMap: LogicalPlacementMap = {\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" },\n}\n\nfunction getDrawerPlacement(placement: DrawerPlacement, dir: \"ltr\" | \"rtl\") {\n  if (!placement) return\n  return placementMap[placement]?.[dir] ?? placement\n}\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   */\n  placement?: DrawerPlacement\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps\n  extends DrawerOptions,\n    Omit<ModalProps, \"scrollBehavior\" | \"motionPreset\" | \"isCentered\"> {}\n\nexport function Drawer(props: DrawerProps) {\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n  const placement = getDrawerPlacement(placementProp, theme.direction)\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nconst StyledSlide = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const { className, children, ...rest } = props\n\n    const {\n      getDialogProps,\n      getDialogContainerProps,\n      isOpen,\n    } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps()\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <chakra.div\n        {...containerProps}\n        className=\"chakra-modal__content-container\"\n        __css={dialogContainerStyles}\n      >\n        <ModalFocusScope>\n          <StyledSlide\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </StyledSlide>\n        </ModalFocusScope>\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\"\n}\n\nexport {\n  ModalBody as DrawerBody,\n  ModalCloseButton as DrawerCloseButton,\n  ModalFooter as DrawerFooter,\n  ModalHeader as DrawerHeader,\n  ModalOverlay as DrawerOverlay,\n} from \"./modal\"\n"]},"metadata":{},"sourceType":"module"}