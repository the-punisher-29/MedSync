{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn } from \"@chakra-ui/utils\";\nimport { useMemo, useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useTheme } from \"./providers\";\nimport { omitThemingProps } from \"./system.utils\";\nexport function useChakra() {\n  var colorModeResult = useColorMode();\n  var theme = useTheme();\n  return _extends({}, colorModeResult, {\n    theme\n  });\n}\nexport function useToken(scale, token, fallback) {\n  var theme = useTheme();\n  if (Array.isArray(token)) {\n    var fallbackArr = [];\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback];\n    }\n    return token.map((token, index) => {\n      var _fallbackArr$index;\n      var path = scale + \".\" + token;\n      return get(theme, path, (_fallbackArr$index = fallbackArr[index]) != null ? _fallbackArr$index : token);\n    });\n  }\n  var path = scale + \".\" + token;\n  return get(theme, path, fallback != null ? fallback : token);\n}\nexport function useProps(themeKey, props) {\n  var _theme$components, _styleConfig$defaultP;\n  var {\n    theme,\n    colorMode\n  } = useChakra();\n  var styleConfig = props.styleConfig || ((_theme$components = theme.components) == null ? void 0 : _theme$components[themeKey]);\n  var defaultProps = (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {};\n  var propsWithDefault = _extends({}, defaultProps, filterUndefined(props));\n  var stylesRef = useRef({});\n  var mergedProps = mergeWith({}, propsWithDefault, {\n    theme,\n    colorMode\n  });\n  var memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes, _styleConfig$sizes2;\n      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n      var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n      var sizes = runIfFn((_styleConfig$sizes = (_styleConfig$sizes2 = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes2[mergedProps.size]) != null ? _styleConfig$sizes : {}, mergedProps);\n      var styles = mergeWith(baseStyles, sizes, variants);\n      if (styleConfig.parts) {\n        styleConfig.parts.forEach(part => {\n          var _styles$part;\n          styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n        });\n      }\n      var isStyleEqual = isEqual(stylesRef.current, styles);\n      if (!isStyleEqual) {\n        stylesRef.current = styles;\n      }\n    }\n    return stylesRef.current;\n  }, [styleConfig, mergedProps]);\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault)\n  };\n}","map":{"version":3,"sources":["../../src/hooks.ts"],"names":["useColorMode","filterUndefined","memoizedGet","get","mergeWith","runIfFn","useMemo","useRef","isEqual","useTheme","omitThemingProps","useChakra","colorModeResult","theme","useToken","scale","token","fallback","Array","isArray","fallbackArr","map","index","path","useProps","themeKey","props","colorMode","styleConfig","components","defaultProps","propsWithDefault","stylesRef","mergedProps","memoizedStyles","baseStyles","baseStyle","variants","variant","sizes","size","styles","parts","forEach","part","isStyleEqual","current"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,uBAA7B;AAEA,SAEEC,eAFF,EAGEC,WAAW,IAAIC,GAHjB,EAIEC,SAJF,EAKEC,OALF,QAOO,kBAPP;AAQA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,SAASC,gBAAT,QAAiC,gBAAjC;AAEA,OAAO,SAASC,SAAT,CAAA,EAA4C;EACjD,IAAMC,eAAe,GAAGZ,YAAY,CAAA,CAApC;EACA,IAAMa,KAAK,GAAGJ,QAAQ,CAAA,CAAtB;EACA,OAAA,QAAA,CAAA,CAAA,CAAA,EAAYG,eAAZ,EAAA;IAA6BC;EAA7B,CAAA,CAAA;AACD;AAED,OAAO,SAASC,QAAT,CACLC,KADK,EAELC,KAFK,EAGLC,QAHK,EAIL;EACA,IAAMJ,KAAK,GAAGJ,QAAQ,CAAA,CAAtB;EAEA,IAAIS,KAAK,CAACC,OAAND,CAAcF,KAAdE,CAAJ,EAA0B;IACxB,IAAIE,WAAgB,GAAG,EAAvB;IACA,IAAIH,QAAJ,EAAc;MACZG,WAAW,GAAGF,KAAK,CAACC,OAAND,CAAcD,QAAdC,CAAAA,GAA0BD,QAA1BC,GAAqC,CAACD,QAAD,CAAnDG;IACD;IAED,OAAO,KAAK,CAACC,GAAN,CAAU,CAACL,KAAD,EAAQM,KAAR,KAAkB;MAAA,IAAA,kBAAA;MACjC,IAAMC,IAAI,GAAMR,KAAN,GAAA,GAAA,GAAeC,KAAzB;MACA,OAAOb,GAAG,CAACU,KAAD,EAAQU,IAAR,EAAA,CAAA,kBAAA,GAAcH,WAAW,CAACE,KAAD,CAAzB,KAAA,IAAA,GAAA,kBAAA,GAAoCN,KAApC,CAAV;IACD,CAHM,CAAP;EAID;EAED,IAAMO,IAAI,GAAMR,KAAN,GAAA,GAAA,GAAeC,KAAzB;EACA,OAAOb,GAAG,CAACU,KAAD,EAAQU,IAAR,EAAcN,QAAd,IAAA,IAAA,GAAcA,QAAd,GAA0BD,KAA1B,CAAV;AACD;AAoBD,OAAO,SAASQ,QAAT,CAAkBC,QAAlB,EAAoCC,KAApC,EAAiD;EAAA,IAAA,iBAAA,EAAA,qBAAA;EACtD,IAAM;IAAEb,KAAF;IAASc;EAAT,CAAA,GAAuBhB,SAAS,CAAA,CAAtC;EAEA,IAAMiB,WAAW,GAAIF,KAAK,CAACE,WAANF,KAAAA,CAAAA,iBAAAA,GAAqBb,KAAK,CAACgB,UAA3BH,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAqBb,iBAAAA,CAAmBY,QAAnBZ,CAArBa,CAArB;EAIA,IAAMI,YAAY,GAAA,CAAA,qBAAA,GAAGF,WAAH,IAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,WAAW,CAAEE,YAAhB,KAAA,IAAA,GAAA,qBAAA,GAAgC,CAAA,CAAlD;EACA,IAAMC,gBAAgB,GAAA,QAAA,CAAA,CAAA,CAAA,EAAQD,YAAR,EAAyB7B,eAAe,CAACyB,KAAD,CAAxC,CAAtB;EAEA,IAAMM,SAAS,GAAGzB,MAAM,CAAO,CAAA,CAAP,CAAxB;EAEA,IAAM0B,WAAW,GAAG7B,SAAS,CAAC,CAAA,CAAD,EAAK2B,gBAAL,EAAuB;IAAElB,KAAF;IAASc;EAAT,CAAvB,CAA7B;EAEA,IAAMO,cAAc,GAAG5B,OAAO,CAAC,MAAM;IACnC,IAAIsB,WAAJ,EAAiB;MAAA,IAAA,qBAAA,EAAA,qBAAA,EAAA,sBAAA,EAAA,kBAAA,EAAA,mBAAA;MACf,IAAMO,UAAU,GAAG9B,OAAO,CAAA,CAAA,qBAAA,GAACuB,WAAW,CAACQ,SAAb,KAAA,IAAA,GAAA,qBAAA,GAA0B,CAAA,CAA1B,EAA8BH,WAA9B,CAA1B;MAEA,IAAMI,QAAQ,GAAGhC,OAAO,CAAA,CAAA,qBAAA,GAAA,CAAA,sBAAA,GACtBuB,WAAW,CAACS,QADU,KAAA,IAAA,GAAA,KAAA,CAAA,GACtBT,sBAAAA,CAAuBK,WAAW,CAACK,OAAnCV,CADsB,KAAA,IAAA,GAAA,qBAAA,GACmC,CAAA,CADnC,EAEtBK,WAFsB,CAAxB;MAKA,IAAMM,KAAK,GAAGlC,OAAO,CAAA,CAAA,kBAAA,GAAA,CAAA,mBAAA,GACnBuB,WAAW,CAACW,KADO,KAAA,IAAA,GAAA,KAAA,CAAA,GACnBX,mBAAAA,CAAoBK,WAAW,CAACO,IAAhCZ,CADmB,KAAA,IAAA,GAAA,kBAAA,GACgC,CAAA,CADhC,EAEnBK,WAFmB,CAArB;MAKA,IAAMQ,MAAM,GAAGrC,SAAS,CAAC+B,UAAD,EAAaI,KAAb,EAAoBF,QAApB,CAAxB;MAEA,IAAIT,WAAW,CAACc,KAAhB,EAAuB;QACrBd,WAAW,CAACc,KAAZd,CAAkBe,OAAlBf,CAA2BgB,IAAD,IAAkB;UAAA,IAAA,YAAA;UAC1CH,MAAM,CAACG,IAAD,CAANH,GAAAA,CAAAA,YAAAA,GAAeA,MAAM,CAACG,IAAD,CAArBH,KAAAA,IAAAA,GAAAA,YAAAA,GAA+B,CAAA,CAA/BA;QACD,CAFDb,CAAAA;MAGD;MAED,IAAMiB,YAAY,GAAGrC,OAAO,CAACwB,SAAS,CAACc,OAAX,EAAoBL,MAApB,CAA5B;MAEA,IAAI,CAACI,YAAL,EAAmB;QACjBb,SAAS,CAACc,OAAVd,GAAoBS,MAApBT;MACD;IACF;IAED,OAAOA,SAAS,CAACc,OAAjB;EACD,CA9B6B,EA8B3B,CAAClB,WAAD,EAAcK,WAAd,CA9B2B,CAA9B;EAgCA,OAAO;IACLQ,MAAM,EAAEP,cADH;IAELR,KAAK,EAAEhB,gBAAgB,CAACqB,gBAAD;EAFlB,CAAP;AAID","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useTheme } from \"./providers\"\nimport { ThemingProps } from \"./system.types\"\nimport { omitThemingProps } from \"./system.utils\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nexport function useToken<T extends StringOrNumber>(\n  scale: string,\n  token: T | T[],\n  fallback?: T | T[],\n) {\n  const theme = useTheme()\n\n  if (Array.isArray(token)) {\n    let fallbackArr: T[] = []\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback]\n    }\n\n    return token.map((token, index) => {\n      const path = `${scale}.${token}`\n      return get(theme, path, fallbackArr[index] ?? token)\n    })\n  }\n\n  const path = `${scale}.${token}`\n  return get(theme, path, fallback ?? token)\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props: P,\n  isMulti: true,\n): {\n  styles: Record<string, SystemStyleObject>\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props?: P,\n  isMulti?: boolean,\n): {\n  styles: SystemStyleObject\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps(themeKey: string, props: Dict) {\n  const { theme, colorMode } = useChakra()\n\n  const styleConfig = (props.styleConfig || theme.components?.[themeKey]) as\n    | Dict\n    | undefined\n\n  const defaultProps = styleConfig?.defaultProps ?? {}\n  const propsWithDefault = { ...defaultProps, ...filterUndefined(props) }\n\n  const stylesRef = useRef<Dict>({})\n\n  const mergedProps = mergeWith({}, propsWithDefault, { theme, colorMode })\n\n  const memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant as string] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size as string] ?? {},\n        mergedProps,\n      )\n\n      const styles = mergeWith(baseStyles, sizes, variants)\n\n      if (styleConfig.parts) {\n        styleConfig.parts.forEach((part: string) => {\n          styles[part] = styles[part] ?? {}\n        })\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps])\n\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}