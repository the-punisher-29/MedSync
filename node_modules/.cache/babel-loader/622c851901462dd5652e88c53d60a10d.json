{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { Icon } from \"@chakra-ui/icon\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { Collapse } from \"@chakra-ui/transition\";\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { AccordionProvider, useAccordion, useAccordionContext, useAccordionItem, AccordionDescendantsProvider } from \"./use-accordion\";\n/* -------------------------------------------------------------------------------------------------\n * Accordion - The wrapper that provides context for all accordion items\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/accordion\n */\nexport var Accordion = /*#__PURE__*/forwardRef((_ref, ref) => {\n  var {\n      children,\n      reduceMotion\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"reduceMotion\"]);\n  var styles = useMultiStyleConfig(\"Accordion\", props);\n  var ownProps = omitThemingProps(props);\n  var _useAccordion = useAccordion(ownProps),\n    {\n      htmlProps,\n      descendants\n    } = _useAccordion,\n    context = _objectWithoutPropertiesLoose(_useAccordion, [\"htmlProps\", \"descendants\"]);\n  var ctx = React.useMemo(() => _extends({}, context, {\n    reduceMotion: !!reduceMotion\n  }), [context, reduceMotion]);\n  return /*#__PURE__*/React.createElement(AccordionDescendantsProvider, {\n    value: descendants\n  }, /*#__PURE__*/React.createElement(AccordionProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: cx(\"chakra-accordion\", props.className)\n  }), children))));\n});\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\";\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item\n * -----------------------------------------------------------------------------------------------*/\n\nvar [AccordionItemProvider, useAccordionItemContext] = createContext({\n  name: \"AccordionItemContext\",\n  errorMessage: \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \"\n});\n\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\nexport var AccordionItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    children,\n    className\n  } = props;\n  var _useAccordionItem = useAccordionItem(props),\n    {\n      htmlProps\n    } = _useAccordionItem,\n    context = _objectWithoutPropertiesLoose(_useAccordionItem, [\"htmlProps\"]);\n  var styles = useStyles();\n  var containerStyles = _extends({}, styles.container, {\n    overflowAnchor: \"none\"\n  });\n  var ctx = React.useMemo(() => context, [context]);\n  return /*#__PURE__*/React.createElement(AccordionItemProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: cx(\"chakra-accordion__item\", className),\n    __css: containerStyles\n  }), runIfFn(children, {\n    isExpanded: !!context.isOpen,\n    isDisabled: !!context.isDisabled\n  })));\n});\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\";\n}\n/**\n * React hook to get the state and actions of an accordion item\n */\n\nexport function useAccordionItemState() {\n  var {\n    isOpen,\n    isDisabled,\n    onClose,\n    onOpen\n  } = useAccordionItemContext();\n  return {\n    isOpen,\n    onClose,\n    isDisabled,\n    onOpen\n  };\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Button\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\nexport var AccordionButton = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getButtonProps\n  } = useAccordionItemContext();\n  var buttonProps = getButtonProps(props, ref);\n  var styles = useStyles();\n  var buttonStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    outline: 0\n  }, styles.button);\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({}, buttonProps, {\n    className: cx(\"chakra-accordion__button\", props.className),\n    __css: buttonStyles\n  }));\n});\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\";\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Panel\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\nexport var AccordionPanel = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    reduceMotion\n  } = useAccordionContext();\n  var {\n    getPanelProps,\n    isOpen\n  } = useAccordionItemContext(); // remove `hidden` prop, 'coz we're using height animation\n\n  var panelProps = getPanelProps(props, ref);\n  var _className = cx(\"chakra-accordion__panel\", props.className);\n  var styles = useStyles();\n  if (!reduceMotion) {\n    delete panelProps.hidden;\n  }\n  var child = /*#__PURE__*/React.createElement(chakra.div, _extends({}, panelProps, {\n    __css: styles.panel,\n    className: _className\n  }));\n  if (!reduceMotion) {\n    return /*#__PURE__*/React.createElement(Collapse, {\n      in: isOpen\n    }, child);\n  }\n  return child;\n});\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\";\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Icon\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\n\nexport var AccordionIcon = props => {\n  var {\n    isOpen,\n    isDisabled\n  } = useAccordionItemContext();\n  var {\n    reduceMotion\n  } = useAccordionContext();\n  var _className = cx(\"chakra-accordion__icon\", props.className);\n  var styles = useStyles();\n  var iconStyles = _extends({\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\"\n  }, styles.icon);\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": true,\n    className: _className,\n    __css: iconStyles\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }));\n};\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\";\n}","map":{"version":3,"sources":["../../src/accordion.tsx"],"names":["Icon","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","Collapse","cx","runIfFn","__DEV__","createContext","React","AccordionProvider","useAccordion","useAccordionContext","useAccordionItem","AccordionDescendantsProvider","Accordion","children","reduceMotion","props","ref","styles","ownProps","htmlProps","descendants","context","ctx","useMemo","className","displayName","AccordionItemProvider","useAccordionItemContext","name","errorMessage","AccordionItem","containerStyles","container","overflowAnchor","isExpanded","isOpen","isDisabled","useAccordionItemState","onClose","onOpen","AccordionButton","getButtonProps","buttonProps","buttonStyles","display","alignItems","width","outline","button","AccordionPanel","getPanelProps","panelProps","_className","hidden","child","panel","AccordionIcon","iconStyles","opacity","transform","undefined","transition","transformOrigin","icon"],"mappings":"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","sourcesContent":["import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { Collapse } from \"@chakra-ui/transition\"\nimport { cx, Omit, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext, MaybeRenderProp } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n  UseAccordionItemProps,\n  UseAccordionItemReturn,\n  UseAccordionProps,\n  AccordionDescendantsProvider,\n} from \"./use-accordion\"\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion - The wrapper that provides context for all accordion items\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AccordionProps\n  extends UseAccordionProps,\n    Omit<HTMLChakraProps<\"div\">, keyof UseAccordionProps>,\n    ThemingProps<\"Accordion\"> {\n  /**\n   * If `true`, height animation and transitions will be disabled.\n   */\n  reduceMotion?: boolean\n}\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/accordion\n */\nexport const Accordion = forwardRef<AccordionProps, \"div\">(\n  ({ children, reduceMotion, ...props }, ref) => {\n    const styles = useMultiStyleConfig(\"Accordion\", props)\n    const ownProps = omitThemingProps(props)\n\n    const { htmlProps, descendants, ...context } = useAccordion(ownProps)\n\n    const ctx = React.useMemo(\n      () => ({ ...context, reduceMotion: !!reduceMotion }),\n      [context, reduceMotion],\n    )\n\n    return (\n      <AccordionDescendantsProvider value={descendants}>\n        <AccordionProvider value={ctx}>\n          <StylesProvider value={styles}>\n            <chakra.div\n              ref={ref}\n              {...htmlProps}\n              className={cx(\"chakra-accordion\", props.className)}\n            >\n              {children}\n            </chakra.div>\n          </StylesProvider>\n        </AccordionProvider>\n      </AccordionDescendantsProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\"\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item\n * -----------------------------------------------------------------------------------------------*/\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">\n\nconst [\n  AccordionItemProvider,\n  useAccordionItemContext,\n] = createContext<AccordionItemContext>({\n  name: \"AccordionItemContext\",\n  errorMessage:\n    \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \",\n})\n\nexport interface AccordionItemProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof UseAccordionItemProps>,\n    UseAccordionItemProps {\n  children?: MaybeRenderProp<{\n    isExpanded: boolean\n    isDisabled: boolean\n  }>\n}\n\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\nexport const AccordionItem = forwardRef<AccordionItemProps, \"div\">(\n  (props, ref) => {\n    const { children, className } = props\n    const { htmlProps, ...context } = useAccordionItem(props)\n\n    const styles = useStyles()\n    const containerStyles: SystemStyleObject = {\n      ...styles.container,\n      overflowAnchor: \"none\",\n    }\n\n    const ctx = React.useMemo(() => context, [context])\n\n    return (\n      <AccordionItemProvider value={ctx}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion__item\", className)}\n          __css={containerStyles}\n        >\n          {runIfFn(children, {\n            isExpanded: !!context.isOpen,\n            isDisabled: !!context.isDisabled,\n          })}\n        </chakra.div>\n      </AccordionItemProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\"\n}\n\n/**\n * React hook to get the state and actions of an accordion item\n */\nexport function useAccordionItemState() {\n  const { isOpen, isDisabled, onClose, onOpen } = useAccordionItemContext()\n  return { isOpen, onClose, isDisabled, onOpen }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Button\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AccordionButtonProps extends HTMLChakraProps<\"button\"> {}\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\nexport const AccordionButton = forwardRef<AccordionButtonProps, \"button\">(\n  (props, ref) => {\n    const { getButtonProps } = useAccordionItemContext()\n    const buttonProps = getButtonProps(props, ref)\n\n    const styles = useStyles()\n    const buttonStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.button,\n    }\n\n    return (\n      <chakra.button\n        {...buttonProps}\n        className={cx(\"chakra-accordion__button\", props.className)}\n        __css={buttonStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\"\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Panel\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AccordionPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\nexport const AccordionPanel = forwardRef<AccordionPanelProps, \"div\">(\n  (props, ref) => {\n    const { reduceMotion } = useAccordionContext()\n    const { getPanelProps, isOpen } = useAccordionItemContext()\n\n    // remove `hidden` prop, 'coz we're using height animation\n    const panelProps = getPanelProps(props, ref)\n\n    const _className = cx(\"chakra-accordion__panel\", props.className)\n    const styles = useStyles()\n\n    if (!reduceMotion) {\n      delete panelProps.hidden\n    }\n\n    const child = (\n      <chakra.div {...panelProps} __css={styles.panel} className={_className} />\n    )\n\n    if (!reduceMotion) {\n      return <Collapse in={isOpen}>{child}</Collapse>\n    }\n\n    return child\n  },\n)\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\"\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Icon\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\nexport const AccordionIcon: React.FC<IconProps> = (props) => {\n  const { isOpen, isDisabled } = useAccordionItemContext()\n  const { reduceMotion } = useAccordionContext()\n\n  const _className = cx(\"chakra-accordion__icon\", props.className)\n  const styles = useStyles()\n\n  const iconStyles: SystemStyleObject = {\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\",\n    ...styles.icon,\n  }\n\n  return (\n    <Icon\n      viewBox=\"0 0 24 24\"\n      aria-hidden\n      className={_className}\n      __css={iconStyles}\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n      />\n    </Icon>\n  )\n}\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\"\n}\n"]},"metadata":{},"sourceType":"module"}