{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createUserWithEmailAndPassword, getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"firebase/auth\";\nimport { useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport swal from 'sweetalert';\nimport initializeAuthentication from '../config/firebase';\nimport { db, collection, getDocs } from '../config/firebase'; // Import Firestore functions\n\n// Fetch medicines\nconst getMedicines = async () => {\n  const medicinesCol = collection(db, 'medicines'); // Reference to the 'medicines' collection\n  const medicinesSnapshot = await getDocs(medicinesCol); // Get documents from the collection\n  return medicinesSnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  })); // Map the data to a more usable format\n};\n\n// Fetch orders\nconst getOrders = async () => {\n  const ordersCol = collection(db, 'orders'); // Reference to the 'orders' collection\n  const ordersSnapshot = await getDocs(ordersCol); // Get documents from the collection\n  return ordersSnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  }));\n};\n\n// Fetch suppliers\nconst getSuppliers = async () => {\n  const suppliersCol = collection(db, 'suppliers'); // Reference to the 'suppliers' collection\n  const suppliersSnapshot = await getDocs(suppliersCol); // Get documents from the collection\n  return suppliersSnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  }));\n};\n\n// Fetch sales\nconst getSales = async () => {\n  const salesCol = collection(db, 'sales'); // Reference to the 'sales' collection\n  const salesSnapshot = await getDocs(salesCol); // Get documents from the collection\n  return salesSnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  }));\n};\n\n//initialize firebase  authentication\ninitializeAuthentication();\nconst useFirebase = () => {\n  _s();\n  const [user, setUser] = useState({});\n  const auth = getAuth();\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(true);\n\n  //on State Change \n  useEffect(() => {\n    const unsubscribed = onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser({});\n      }\n      setIsLoading(false);\n    });\n    return () => unsubscribed;\n  }, [auth]);\n\n  //sign up functionality\n  const signUpUser = async (email, password, name) => {\n    setIsLoading(true);\n    try {\n      const res = await createUserWithEmailAndPassword(auth, email, password);\n\n      // Update the user profile with only the display name\n      await updateProfile(auth.currentUser, {\n        displayName: name\n      });\n\n      // Directly log the user in after signup\n      setUser(res.user);\n\n      // Show success message\n      swal(\"Good job!\", \"Account has been created!\", \"success\");\n\n      // Redirect to home\n      history.push('/');\n      window.scrollTo(0, 100);\n    } catch (err) {\n      swal(\"Something went wrong!\", `${err.message}`, \"error\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  //sign in functionality\n  const signInUser = async (email, password) => {\n    setIsLoading(true);\n    await signInWithEmailAndPassword(auth, email, password).then(res => {\n      setUser(res.user);\n      swal(\"Sign in Successful!\", \"Welcome back !\", \"info\");\n      history.push('/');\n      window.scrollTo(0, 100);\n    }).catch(err => swal(\"Something went wrong!\", `${err.message}`, \"error\")).finally(() => setIsLoading(false));\n  };\n\n  //google sign in \n  const signInWithGoogle = async () => {\n    setIsLoading(true);\n    const googleProvider = new GoogleAuthProvider();\n    await signInWithPopup(auth, googleProvider).then(res => {\n      setUser(res.user);\n      swal(\"Good job!\", \"Account has been created!\", \"success\");\n      history.push('/');\n    }).catch(err => console.log(err.message)).finally(() => setIsLoading(false));\n  };\n\n  // sign out \n  const signOutUser = async () => {\n    setIsLoading(true);\n    await signOut(auth).then(() => {\n      setUser({});\n      swal(\"Logout Successful!\", \"You are logged out!\", \"success\");\n      history.push('/signin');\n    }).catch(err => {\n      swal(\"Something went wrong!\", `${err.message}`, \"error\");\n    }).finally(() => setIsLoading(false));\n  };\n  const getMedicines = async () => {\n    const medicinesSnapshot = await db.collection('medicines').get();\n    return medicinesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  };\n  const getOrders = async () => {\n    const ordersSnapshot = await db.collection('orders').get();\n    return ordersSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  };\n  const getSuppliers = async () => {\n    const suppliersSnapshot = await db.collection('suppliers').get();\n    return suppliersSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  };\n  const getSales = async () => {\n    const salesSnapshot = await db.collection('sales').get();\n    return salesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  };\n  return {\n    user,\n    signInUser,\n    signUpUser,\n    signOutUser,\n    signInWithGoogle,\n    isLoading,\n    getMedicines,\n    getOrders,\n    getSuppliers,\n    getSales\n  };\n};\n_s(useFirebase, \"o9TOeKgZZnjpaHY94AVr78qCgsc=\", false, function () {\n  return [useHistory];\n});\nexport default useFirebase;","map":{"version":3,"names":["createUserWithEmailAndPassword","getAuth","GoogleAuthProvider","onAuthStateChanged","signInWithEmailAndPassword","signInWithPopup","signOut","updateProfile","useEffect","useState","useHistory","swal","initializeAuthentication","db","collection","getDocs","getMedicines","medicinesCol","medicinesSnapshot","docs","map","doc","id","data","getOrders","ordersCol","ordersSnapshot","getSuppliers","suppliersCol","suppliersSnapshot","getSales","salesCol","salesSnapshot","useFirebase","_s","user","setUser","auth","history","isLoading","setIsLoading","unsubscribed","signUpUser","email","password","name","res","currentUser","displayName","push","window","scrollTo","err","message","signInUser","then","catch","finally","signInWithGoogle","googleProvider","console","log","signOutUser","get"],"sources":["E:/Pr/Web D/MedSync/src/hooks/useFirebase.js"],"sourcesContent":["import { createUserWithEmailAndPassword, getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"firebase/auth\";\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport swal from 'sweetalert';\r\nimport initializeAuthentication from '../config/firebase';\r\nimport { db, collection, getDocs } from '../config/firebase';  // Import Firestore functions\r\n\r\n// Fetch medicines\r\nconst getMedicines = async () => {\r\n    const medicinesCol = collection(db, 'medicines');  // Reference to the 'medicines' collection\r\n    const medicinesSnapshot = await getDocs(medicinesCol);  // Get documents from the collection\r\n    return medicinesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));  // Map the data to a more usable format\r\n};\r\n\r\n// Fetch orders\r\nconst getOrders = async () => {\r\n    const ordersCol = collection(db, 'orders');  // Reference to the 'orders' collection\r\n    const ordersSnapshot = await getDocs(ordersCol);  // Get documents from the collection\r\n    return ordersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n};\r\n\r\n// Fetch suppliers\r\nconst getSuppliers = async () => {\r\n    const suppliersCol = collection(db, 'suppliers');  // Reference to the 'suppliers' collection\r\n    const suppliersSnapshot = await getDocs(suppliersCol);  // Get documents from the collection\r\n    return suppliersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n};\r\n\r\n// Fetch sales\r\nconst getSales = async () => {\r\n    const salesCol = collection(db, 'sales');  // Reference to the 'sales' collection\r\n    const salesSnapshot = await getDocs(salesCol);  // Get documents from the collection\r\n    return salesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n};\r\n\r\n\r\n//initialize firebase  authentication\r\ninitializeAuthentication()\r\n\r\nconst useFirebase = () => {\r\n    const [user, setUser] = useState({});\r\n    const auth = getAuth();\r\n    const history = useHistory();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    //on State Change \r\n    useEffect(() => {\r\n        const unsubscribed = onAuthStateChanged(auth, user => {\r\n            if (user) {\r\n                setUser(user)\r\n            }else{\r\n                setUser({})\r\n            }\r\n            setIsLoading(false);\r\n        })\r\n        return () => unsubscribed;\r\n\r\n    }, [auth])\r\n\r\n\r\n    //sign up functionality\r\n    const signUpUser = async (email, password, name) => {\r\n        setIsLoading(true);\r\n        try {\r\n            const res = await createUserWithEmailAndPassword(auth, email, password);\r\n            \r\n            // Update the user profile with only the display name\r\n            await updateProfile(auth.currentUser, {\r\n                displayName: name,\r\n            });\r\n            \r\n            // Directly log the user in after signup\r\n            setUser(res.user);\r\n            \r\n            // Show success message\r\n            swal(\"Good job!\", \"Account has been created!\", \"success\");\r\n    \r\n            // Redirect to home\r\n            history.push('/');\r\n            window.scrollTo(0, 100);\r\n        } catch (err) {\r\n            swal(\"Something went wrong!\", `${err.message}`, \"error\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    \r\n\r\n    //sign in functionality\r\n    const signInUser = async (email, password) => {\r\n        setIsLoading(true);\r\n        await signInWithEmailAndPassword(auth, email, password)\r\n            .then(res => {\r\n                setUser(res.user);\r\n                swal(\"Sign in Successful!\", \"Welcome back !\", \"info\")\r\n                history.push('/');\r\n                                    window.scrollTo(0, 100);\r\n\r\n            })\r\n            .catch(err => swal(\"Something went wrong!\", `${err.message}`, \"error\")).finally(() => setIsLoading(false));\r\n    }\r\n\r\n    //google sign in \r\n    const signInWithGoogle = async () => {\r\n        setIsLoading(true);\r\n        const googleProvider = new GoogleAuthProvider();\r\n        await signInWithPopup(auth, googleProvider)\r\n            .then(res => {\r\n                setUser(res.user);\r\n                swal(\"Good job!\", \"Account has been created!\", \"success\");\r\n                history.push('/');\r\n            }).catch(err => console.log(err.message)).finally(() => setIsLoading(false));\r\n    }\r\n\r\n\r\n    // sign out \r\n    const signOutUser = async () => {\r\n        setIsLoading(true);\r\n        await signOut(auth).then(() => {\r\n            setUser({});\r\n            swal(\"Logout Successful!\", \"You are logged out!\", \"success\");\r\n            history.push('/signin')\r\n        }).catch((err) => {\r\n            swal(\"Something went wrong!\", `${err.message}`, \"error\")\r\n        }).finally(() => setIsLoading(false));\r\n\r\n    }\r\n    const getMedicines = async () => {\r\n        const medicinesSnapshot = await db.collection('medicines').get();\r\n        return medicinesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    };\r\n    \r\n    const getOrders = async () => {\r\n        const ordersSnapshot = await db.collection('orders').get();\r\n        return ordersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    };\r\n    \r\n    const getSuppliers = async () => {\r\n        const suppliersSnapshot = await db.collection('suppliers').get();\r\n        return suppliersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    };\r\n    \r\n    const getSales = async () => {\r\n        const salesSnapshot = await db.collection('sales').get();\r\n        return salesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    };\r\n    \r\n\r\n    return {\r\n        user,\r\n        signInUser,\r\n        signUpUser,\r\n        signOutUser,\r\n        signInWithGoogle,\r\n        isLoading,\r\n        getMedicines,\r\n        getOrders,\r\n        getSuppliers,\r\n        getSales\r\n    };\r\n}\r\n\r\nexport default useFirebase\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}