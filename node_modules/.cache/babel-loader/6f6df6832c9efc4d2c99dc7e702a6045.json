{"ast":null,"code":"import { isArray, isObject } from \"./assertion\";\nexport function walkObject(target, predicate) {\n  function inner(value, path) {\n    if (path === void 0) {\n      path = [];\n    }\n    if (isArray(value)) {\n      return value.map((item, index) => inner(item, [...path, String(index)]));\n    }\n    if (isObject(value)) {\n      return Object.fromEntries(Object.entries(value).map(_ref => {\n        var [key, child] = _ref;\n        return [key, inner(child, [...path, key])];\n      }));\n    }\n    return predicate(value, path);\n  }\n  return inner(target);\n}","map":{"version":3,"sources":["../../src/walk-object.ts"],"names":["isArray","isObject","walkObject","target","predicate","inner","value","path","map","item","index","String","fromEntries","entries","key","child"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,aAAlC;AAeA,OAAO,SAASC,UAAT,CACLC,MADK,EAELC,SAFK,EAGkE;EACvE,SAASC,KAAT,CAAeC,KAAf,EAA+BC,IAA/B,EAAyD;IAAA,IAA1BA,IAA0B,KAAA,KAAA,CAAA,EAAA;MAA1BA,IAA0B,GAAT,EAAS;IAAA;IACvD,IAAIP,OAAO,CAACM,KAAD,CAAX,EAAoB;MAClB,OAAOA,KAAK,CAACE,GAANF,CAAU,CAACG,IAAD,EAAOC,KAAP,KAAiBL,KAAK,CAACI,IAAD,EAAO,CAAC,GAAGF,IAAJ,EAAUI,MAAM,CAACD,KAAD,CAAhB,CAAP,CAAhCJ,CAAP;IACD;IAED,IAAIL,QAAQ,CAACK,KAAD,CAAZ,EAAqB;MACnB,OAAO,MAAM,CAACM,WAAP,CACL,MAAM,CAACC,OAAP,CAAeP,KAAf,CAAA,CAAsBE,GAAtB,CAA0B,IAAA,IAAA;QAAA,IAAC,CAACM,GAAD,EAAMC,KAAN,CAAD,GAAA,IAAA;QAAA,OAAkB,CAC1CD,GAD0C,EAE1CT,KAAK,CAACU,KAAD,EAAQ,CAAC,GAAGR,IAAJ,EAAUO,GAAV,CAAR,CAFqC,CAAlB;MAAA,CAA1B,CADK,CAAP;IAMD;IAED,OAAOV,SAAS,CAACE,KAAD,EAAQC,IAAR,CAAhB;EACD;EAED,OAAOF,KAAK,CAACF,MAAD,CAAZ;AACD","sourcesContent":["import { isArray, isObject } from \"./assertion\"\n\nexport type WalkObjectPredicate<Leaf = unknown> = (\n  value: unknown,\n  path: string[],\n) => Leaf\n\nexport type MappedLeavesObject<Obj, LeafType> = {\n  [Prop in keyof Obj]: Obj[Prop] extends Array<any>\n    ? MappedLeavesObject<Obj[Prop][number], LeafType>[]\n    : Obj[Prop] extends object\n    ? MappedLeavesObject<Obj[Prop], LeafType>\n    : LeafType\n}\n\nexport function walkObject<Target, LeafType>(\n  target: Target,\n  predicate: WalkObjectPredicate<LeafType>,\n): MappedLeavesObject<Target, ReturnType<WalkObjectPredicate<LeafType>>> {\n  function inner(value: unknown, path: string[] = []): any {\n    if (isArray(value)) {\n      return value.map((item, index) => inner(item, [...path, String(index)]))\n    }\n\n    if (isObject(value)) {\n      return Object.fromEntries(\n        Object.entries(value).map(([key, child]) => [\n          key,\n          inner(child, [...path, key]),\n        ]),\n      )\n    }\n\n    return predicate(value, path)\n  }\n\n  return inner(target)\n}\n"]},"metadata":{},"sourceType":"module"}