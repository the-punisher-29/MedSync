{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { createContext, getValidChildren, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, determineLazyBehavior, focus, isUndefined, normalizeEventKey } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [TabsDescendantsProvider, useTabsDescendantsContext, useTabsDescendants, useTabsDescendant] = createDescendantContext();\n/* -------------------------------------------------------------------------------------------------\n * useTabs - The root react hook that manages all tab items\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\nexport function useTabs(props) {\n  var {\n      defaultIndex,\n      onChange,\n      index,\n      isManual,\n      isLazy,\n      lazyBehavior = \"unmount\",\n      orientation = \"horizontal\",\n      direction = \"ltr\"\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIndex\", \"onChange\", \"index\", \"isManual\", \"isLazy\", \"lazyBehavior\", \"orientation\", \"direction\"]);\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n\n  var [focusedIndex, setFocusedIndex] = React.useState(defaultIndex != null ? defaultIndex : 0);\n  var [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex != null ? defaultIndex : 0,\n    value: index,\n    onChange\n  });\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n\n  React.useEffect(() => {\n    if (index != null) {\n      setFocusedIndex(index);\n    }\n  }, [index]);\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   */\n\n  var descendants = useTabsDescendants();\n  /**\n   * Generate a unique id or use user-provided id for the tabs widget\n   */\n\n  var id = useId(props.id, \"tabs\");\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    lazyBehavior,\n    orientation,\n    descendants,\n    direction,\n    htmlProps\n  };\n}\nexport var [TabsProvider, useTabsContext] = createContext({\n  name: \"TabsContext\",\n  errorMessage: \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\"\n});\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList(props) {\n  var {\n    focusedIndex,\n    orientation,\n    direction\n  } = useTabsContext();\n  var descendants = useTabsDescendantsContext();\n  var onKeyDown = React.useCallback(event => {\n    var nextTab = () => {\n      var next = descendants.nextEnabled(focusedIndex);\n      if (next) focus(next.node);\n    };\n    var prevTab = () => {\n      var prev = descendants.prevEnabled(focusedIndex);\n      if (prev) focus(prev.node);\n    };\n    var firstTab = () => {\n      var first = descendants.firstEnabled();\n      if (first) focus(first.node);\n    };\n    var lastTab = () => {\n      var last = descendants.lastEnabled();\n      if (last) focus(last.node);\n    };\n    var isHorizontal = orientation === \"horizontal\";\n    var isVertical = orientation === \"vertical\";\n    var eventKey = normalizeEventKey(event);\n    var ArrowStart = direction === \"ltr\" ? \"ArrowLeft\" : \"ArrowRight\";\n    var ArrowEnd = direction === \"ltr\" ? \"ArrowRight\" : \"ArrowLeft\";\n    var keyMap = {\n      [ArrowStart]: () => isHorizontal && prevTab(),\n      [ArrowEnd]: () => isHorizontal && nextTab(),\n      ArrowDown: () => isVertical && nextTab(),\n      ArrowUp: () => isVertical && prevTab(),\n      Home: firstTab,\n      End: lastTab\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [descendants, focusedIndex, orientation, direction]);\n  return _extends({}, props, {\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab(props) {\n  var {\n      isDisabled,\n      isFocusable\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"isDisabled\", \"isFocusable\"]);\n  var {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    selectedIndex\n  } = useTabsContext();\n  var {\n    index,\n    register\n  } = useTabsDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  var isSelected = index === selectedIndex;\n  var onClick = () => {\n    setSelectedIndex(index);\n  };\n  var onFocus = () => {\n    setFocusedIndex(index);\n    var isDisabledButFocusable = isDisabled && isFocusable;\n    var shouldSelect = !isManual && !isDisabledButFocusable;\n    if (shouldSelect) {\n      setSelectedIndex(index);\n    }\n  };\n  var clickableProps = useClickable(_extends({}, htmlProps, {\n    ref: mergeRefs(register, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick)\n  }));\n  var type = \"button\";\n  return _extends({}, clickableProps, {\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus)\n  });\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\nexport function useTabPanels(props) {\n  var context = useTabsContext();\n  var {\n    id,\n    selectedIndex\n  } = context;\n  var validChildren = getValidChildren(props.children);\n  var children = validChildren.map((child, index) => /*#__PURE__*/React.cloneElement(child, {\n    isSelected: index === selectedIndex,\n    id: makeTabPanelId(id, index),\n    // Refers to the associated tab element, and also provides an accessible name to the tab panel.\n    \"aria-labelledby\": makeTabId(id, index)\n  }));\n  return _extends({}, props, {\n    children\n  });\n}\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\n\nexport function useTabPanel(props) {\n  var {\n      isSelected,\n      id,\n      children\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"isSelected\", \"id\", \"children\"]);\n  var {\n    isLazy,\n    lazyBehavior\n  } = useTabsContext();\n  var hasBeenSelected = React.useRef(false);\n  if (isSelected) {\n    hasBeenSelected.current = true;\n  }\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenSelected.current,\n    isSelected,\n    isLazy,\n    lazyBehavior\n  });\n  return _extends({\n    // Puts the tabpanel in the page `Tab` sequence.\n    tabIndex: 0\n  }, htmlProps, {\n    children: shouldRenderChildren ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id\n  });\n}\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\n\nexport function useTabIndicator() {\n  var context = useTabsContext();\n  var descendants = useTabsDescendantsContext();\n  var {\n    selectedIndex,\n    orientation\n  } = context;\n  var isHorizontal = orientation === \"horizontal\";\n  var isVertical = orientation === \"vertical\"; // Get the clientRect of the selected tab\n\n  var [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return {\n      left: 0,\n      width: 0\n    };\n    if (isVertical) return {\n      top: 0,\n      height: 0\n    };\n    return undefined;\n  });\n  var [hasMeasured, setHasMeasured] = React.useState(false); // Update the selected tab rect when the selectedIndex changes\n\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined;\n    var tab = descendants.item(selectedIndex);\n    if (isUndefined(tab)) return undefined; // Horizontal Tab: Calculate width and left distance\n\n    if (isHorizontal) {\n      setRect({\n        left: tab.node.offsetLeft,\n        width: tab.node.offsetWidth\n      });\n    } // Vertical Tab: Calculate height and top distance\n\n    if (isVertical) {\n      setRect({\n        top: tab.node.offsetTop,\n        height: tab.node.offsetHeight\n      });\n    } // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n\n    var id = requestAnimationFrame(() => {\n      setHasMeasured(true);\n    });\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id);\n      }\n    };\n  }, [selectedIndex, isHorizontal, isVertical, descendants]);\n  return _extends({\n    position: \"absolute\",\n    transitionProperty: \"left, right, top, bottom\",\n    transitionDuration: hasMeasured ? \"200ms\" : \"0ms\",\n    transitionTimingFunction: \"cubic-bezier(0, 0, 0.2, 1)\"\n  }, rect);\n}\nfunction makeTabId(id, index) {\n  return id + \"--tab-\" + index;\n}\nfunction makeTabPanelId(id, index) {\n  return id + \"--tabpanel-\" + index;\n}","map":{"version":3,"sources":["../../src/use-tabs.ts"],"names":["useClickable","createDescendantContext","useControllableState","useId","useSafeLayoutEffect","createContext","getValidChildren","mergeRefs","callAllHandlers","determineLazyBehavior","focus","isUndefined","normalizeEventKey","React","TabsDescendantsProvider","useTabsDescendantsContext","useTabsDescendants","useTabsDescendant","useTabs","props","defaultIndex","onChange","index","isManual","isLazy","lazyBehavior","orientation","direction","htmlProps","focusedIndex","setFocusedIndex","useState","selectedIndex","setSelectedIndex","defaultValue","value","useEffect","descendants","id","TabsProvider","useTabsContext","name","errorMessage","useTabList","onKeyDown","useCallback","event","nextTab","next","nextEnabled","node","prevTab","prev","prevEnabled","firstTab","first","firstEnabled","lastTab","last","lastEnabled","isHorizontal","isVertical","eventKey","ArrowStart","ArrowEnd","keyMap","ArrowDown","ArrowUp","Home","End","action","preventDefault","role","useTab","isDisabled","isFocusable","register","disabled","isSelected","onClick","onFocus","isDisabledButFocusable","shouldSelect","clickableProps","ref","type","makeTabId","tabIndex","makeTabPanelId","undefined","useTabPanels","context","validChildren","children","map","child","cloneElement","useTabPanel","hasBeenSelected","useRef","current","shouldRenderChildren","hidden","useTabIndicator","rect","setRect","left","width","top","height","hasMeasured","setHasMeasured","tab","item","offsetLeft","offsetWidth","offsetTop","offsetHeight","requestAnimationFrame","cancelAnimationFrame","position","transitionProperty","transitionDuration","transitionTimingFunction"],"mappings":"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","sourcesContent":["import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  createContext,\n  EventKeyMap,\n  getValidChildren,\n  mergeRefs,\n} from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  determineLazyBehavior,\n  Dict,\n  focus,\n  isUndefined,\n  LazyBehavior,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  TabsDescendantsProvider,\n  useTabsDescendantsContext,\n  useTabsDescendants,\n  useTabsDescendant,\n] = createDescendantContext<HTMLButtonElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * useTabs - The root react hook that manages all tab items\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance 🚀:\n   * If `true`, rendering of the tab panel's will be deferred until it is selected.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of tab panels' content when not active.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The content of inactive tab panels are always unmounted.\n   * - \"keepMounted\": The content of inactive tab panels is initially unmounted,\n   * but stays mounted when selected.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n  /**\n   * The writing mode direction.\n   *\n   * - When in RTL, the left and right navigation is flipped\n   */\n  direction?: \"rtl\" | \"ltr\"\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    orientation = \"horizontal\",\n    direction = \"ltr\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = React.useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  React.useEffect(() => {\n    if (index != null) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   */\n  const descendants = useTabsDescendants()\n\n  /**\n   * Generate a unique id or use user-provided id for the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    lazyBehavior,\n    orientation,\n    descendants,\n    direction,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<\n  ReturnType<typeof useTabs>,\n  \"htmlProps\" | \"descendants\"\n>\n\nexport const [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\ntype Child = React.ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: React.ReactNode\n  onKeyDown?: React.KeyboardEventHandler\n  ref?: React.Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const { focusedIndex, orientation, direction } = useTabsContext()\n\n  const descendants = useTabsDescendantsContext()\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => {\n        const next = descendants.nextEnabled(focusedIndex)\n        if (next) focus(next.node)\n      }\n      const prevTab = () => {\n        const prev = descendants.prevEnabled(focusedIndex)\n        if (prev) focus(prev.node)\n      }\n      const firstTab = () => {\n        const first = descendants.firstEnabled()\n        if (first) focus(first.node)\n      }\n      const lastTab = () => {\n        const last = descendants.lastEnabled()\n        if (last) focus(last.node)\n      }\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = normalizeEventKey(event)\n\n      const ArrowStart = direction === \"ltr\" ? \"ArrowLeft\" : \"ArrowRight\"\n      const ArrowEnd = direction === \"ltr\" ? \"ArrowRight\" : \"ArrowLeft\"\n\n      const keyMap: EventKeyMap = {\n        [ArrowStart]: () => isHorizontal && prevTab(),\n        [ArrowEnd]: () => isHorizontal && nextTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [descendants, focusedIndex, orientation, direction],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   */\n  isDisabled?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(props: P) {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    selectedIndex,\n  } = useTabsContext()\n\n  const { index, register } = useTabsDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    setFocusedIndex(index)\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickableProps = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(register, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickableProps,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: React.ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    React.cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n      // Refers to the associated tab element, and also provides an accessible name to the tab panel.\n      \"aria-labelledby\": makeTabId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, children, ...htmlProps } = props\n  const { isLazy, lazyBehavior } = useTabsContext()\n\n  const hasBeenSelected = React.useRef(false)\n  if (isSelected) {\n    hasBeenSelected.current = true\n  }\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenSelected.current,\n    isSelected,\n    isLazy,\n    lazyBehavior,\n  })\n\n  return {\n    // Puts the tabpanel in the page `Tab` sequence.\n    tabIndex: 0,\n    ...htmlProps,\n    children: shouldRenderChildren ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): React.CSSProperties {\n  const context = useTabsContext()\n  const descendants = useTabsDescendantsContext()\n\n  const { selectedIndex, orientation } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = React.useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined\n\n    const tab = descendants.item(selectedIndex)\n    if (isUndefined(tab)) return undefined\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal) {\n      setRect({ left: tab.node.offsetLeft, width: tab.node.offsetWidth })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical) {\n      setRect({ top: tab.node.offsetTop, height: tab.node.offsetHeight })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const id = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, descendants])\n\n  return {\n    position: \"absolute\",\n    transitionProperty: \"left, right, top, bottom\",\n    transitionDuration: hasMeasured ? \"200ms\" : \"0ms\",\n    transitionTimingFunction: \"cubic-bezier(0, 0, 0.2, 1)\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n"]},"metadata":{},"sourceType":"module"}