{"ast":null,"code":"var _jsxFileName = \"E:\\\\Pr\\\\Web D\\\\MedSync\\\\src\\\\routes\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\n// import { css } from \"@emotion/react\";\n// import React from 'react';\n// import { Redirect, Route } from 'react-router-dom';\n// import GridLoader from \"react-spinners/GridLoader\";\n// import useAuth from '../hooks/useAuth';\n\n// const override = css`\n//   display: block;\n//   margin: 0 auto;\n//   border-color: red;\n// `;\n\n// const PrivateRoute = ({ children, ...rest }) => {\n//     const { user, isLoading  } = useAuth();\n//     if (isLoading) {\n//         return (\n//             <div className=\"flex flex-col items-center justify-center h-screen\">\n//                 <GridLoader color=\"#1d4ed8\" css={override} size={25} />\n\n//             </div>\n//         )\n//     }\n//     return (\n//         <Route\n//             {...rest}\n//             render={({ location }) =>\n//                 user.displayName ? (\n//                     children\n//                 ) : (\n//                     <Redirect\n//                         to={{\n//                             pathname: \"/signin\",\n//                             state: { from: location }\n//                         }}\n//                     />\n//                 )\n//             }\n//         />\n//     )\n// }\n\n// export default PrivateRoute\n\nimport { css } from \"@emotion/react\";\nimport React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport GridLoader from \"react-spinners/GridLoader\";\nimport useAuth from '../hooks/useAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\nconst PrivateRoute = ({\n  children,\n  ...rest\n}) => {\n  _s();\n  const {\n    user,\n    isLoading\n  } = useAuth();\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(GridLoader, {\n        color: \"#1d4ed8\",\n        css: override,\n        size: 25\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: ({\n      location\n    }) => user && user.displayName ?\n    // Check if user and displayName exist\n    children : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: \"/signin\",\n        state: {\n          from: location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(PrivateRoute, \"6lKHjqCqGIRsHh92bje8H78laow=\", false, function () {\n  return [useAuth];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["css","React","Redirect","Route","GridLoader","useAuth","jsxDEV","_jsxDEV","override","PrivateRoute","children","rest","_s","user","isLoading","className","color","size","fileName","_jsxFileName","lineNumber","columnNumber","render","location","displayName","to","pathname","state","from","_c","$RefreshReg$"],"sources":["E:/Pr/Web D/MedSync/src/routes/PrivateRoute.js"],"sourcesContent":["// import { css } from \"@emotion/react\";\r\n// import React from 'react';\r\n// import { Redirect, Route } from 'react-router-dom';\r\n// import GridLoader from \"react-spinners/GridLoader\";\r\n// import useAuth from '../hooks/useAuth';\r\n\r\n// const override = css`\r\n//   display: block;\r\n//   margin: 0 auto;\r\n//   border-color: red;\r\n// `;\r\n\r\n// const PrivateRoute = ({ children, ...rest }) => {\r\n//     const { user, isLoading  } = useAuth();\r\n//     if (isLoading) {\r\n//         return (\r\n//             <div className=\"flex flex-col items-center justify-center h-screen\">\r\n//                 <GridLoader color=\"#1d4ed8\" css={override} size={25} />\r\n\r\n//             </div>\r\n//         )\r\n//     }\r\n//     return (\r\n//         <Route\r\n//             {...rest}\r\n//             render={({ location }) =>\r\n//                 user.displayName ? (\r\n//                     children\r\n//                 ) : (\r\n//                     <Redirect\r\n//                         to={{\r\n//                             pathname: \"/signin\",\r\n//                             state: { from: location }\r\n//                         }}\r\n//                     />\r\n//                 )\r\n//             }\r\n//         />\r\n//     )\r\n// }\r\n\r\n// export default PrivateRoute\r\n\r\nimport { css } from \"@emotion/react\";\r\nimport React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport GridLoader from \"react-spinners/GridLoader\";\r\nimport useAuth from '../hooks/useAuth';\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n    const { user, isLoading } = useAuth();\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"flex flex-col items-center justify-center h-screen\">\r\n                <GridLoader color=\"#1d4ed8\" css={override} size={25} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) =>\r\n                user && user.displayName ? ( // Check if user and displayName exist\r\n                    children\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: \"/signin\",\r\n                            state: { from: location },\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,KAAK,QAAQ,kBAAkB;AAClD,OAAOC,UAAU,MAAM,2BAA2B;AAClD,OAAOC,OAAO,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,QAAQ,GAAGR,GAAG;AACpB;AACA;AACA;AACA,CAAC;AAED,MAAMS,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGT,OAAO,CAAC,CAAC;EAErC,IAAIS,SAAS,EAAE;IACX,oBACIP,OAAA;MAAKQ,SAAS,EAAC,oDAAoD;MAAAL,QAAA,eAC/DH,OAAA,CAACH,UAAU;QAACY,KAAK,EAAC,SAAS;QAAChB,GAAG,EAAEQ,QAAS;QAACS,IAAI,EAAE;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC;EAEd;EAEA,oBACId,OAAA,CAACJ,KAAK;IAAA,GACEQ,IAAI;IACRW,MAAM,EAAEA,CAAC;MAAEC;IAAS,CAAC,KACjBV,IAAI,IAAIA,IAAI,CAACW,WAAW;IAAK;IACzBd,QAAQ,gBAERH,OAAA,CAACL,QAAQ;MACLuB,EAAE,EAAE;QACAC,QAAQ,EAAE,SAAS;QACnBC,KAAK,EAAE;UAAEC,IAAI,EAAEL;QAAS;MAC5B;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAER;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACT,EAAA,CA5BIH,YAAY;EAAA,QACcJ,OAAO;AAAA;AAAAwB,EAAA,GADjCpB,YAAY;AA8BlB,eAAeA,YAAY;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}