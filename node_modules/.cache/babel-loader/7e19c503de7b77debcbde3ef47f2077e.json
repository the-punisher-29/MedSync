{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/utils\";\nimport { useFormControlContext } from \"./form-control\";\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl(props) {\n  var _useFormControlProps = useFormControlProps(props),\n    {\n      isDisabled,\n      isInvalid,\n      isReadOnly,\n      isRequired\n    } = _useFormControlProps,\n    rest = _objectWithoutPropertiesLoose(_useFormControlProps, [\"isDisabled\", \"isInvalid\", \"isReadOnly\", \"isRequired\"]);\n  return _extends({}, rest, {\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly)\n  });\n}\n/**\n * @internal\n */\n\nexport function useFormControlProps(props) {\n  var _ref, _ref2, _ref3;\n  var field = useFormControlContext();\n  var {\n      id,\n      disabled,\n      readOnly,\n      required,\n      isRequired,\n      isInvalid,\n      isReadOnly,\n      isDisabled,\n      onFocus,\n      onBlur\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"id\", \"disabled\", \"readOnly\", \"required\", \"isRequired\", \"isInvalid\", \"isReadOnly\", \"isDisabled\", \"onFocus\", \"onBlur\"]);\n  var labelIds = props[\"aria-describedby\"] ? [props[\"aria-describedby\"]] : []; // Error message must be described first in all scenarios.\n\n  if (field != null && field.hasFeedbackText && field != null && field.isInvalid) {\n    labelIds.push(field.feedbackId);\n  }\n  if (field != null && field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n  return _extends({}, rest, {\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_ref = disabled != null ? disabled : isDisabled) != null ? _ref : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_ref2 = readOnly != null ? readOnly : isReadOnly) != null ? _ref2 : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_ref3 = required != null ? required : isRequired) != null ? _ref3 : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)\n  });\n}","map":{"version":3,"sources":["../../src/use-form-control.ts"],"names":["ariaAttr","callAllHandlers","useFormControlContext","useFormControl","props","isDisabled","isInvalid","isReadOnly","isRequired","rest","useFormControlProps","disabled","readOnly","required","field","id","onFocus","onBlur","labelIds","hasFeedbackText","push","feedbackId","hasHelpText","helpTextId","join","undefined"],"mappings":"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","sourcesContent":["import { ariaAttr, callAllHandlers } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}