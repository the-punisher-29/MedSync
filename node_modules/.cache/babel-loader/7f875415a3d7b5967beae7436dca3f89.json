{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useDisclosure, useFocusOnHide, useId, useIds, useOutsideClick, useShortcut, useUnmountEffect, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { createContext, getValidChildren, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { addItem, callAllHandlers, dataAttr, determineLazyBehavior, focus, getNextItemFromSearch, getOwnerDocument, isActiveElement, isArray, isHTMLElement, isString, normalizeEventKey, removeItem } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant] = createDescendantContext();\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [MenuProvider, useMenuContext] = createContext({\n  strict: false,\n  name: \"MenuContext\"\n});\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n      id,\n      closeOnSelect = true,\n      closeOnBlur = true,\n      autoSelect = true,\n      isLazy,\n      isOpen: isOpenProp,\n      defaultIsOpen,\n      onClose: onCloseProp,\n      onOpen: onOpenProp,\n      placement = \"bottom-start\",\n      lazyBehavior = \"unmount\",\n      direction,\n      computePositionOnMount\n    } = props,\n    popperProps = _objectWithoutPropertiesLoose(props, [\"id\", \"closeOnSelect\", \"closeOnBlur\", \"autoSelect\", \"isLazy\", \"isOpen\", \"defaultIsOpen\", \"onClose\", \"onOpen\", \"placement\", \"lazyBehavior\", \"direction\", \"computePositionOnMount\"]);\n  var {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp\n  });\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n\n  var menuRef = React.useRef(null);\n  var buttonRef = React.useRef(null);\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: event => {\n      var _buttonRef$current;\n      if (!((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n\n  var popper = usePopper(_extends({}, popperProps, {\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction\n  }));\n  var [focusedIndex, setFocusedIndex] = React.useState(-1);\n  /**\n   * Context to register all menu item nodes\n   */\n\n  var descendants = useMenuDescendants();\n  /**\n   * Focus the button when we close the menu\n   */\n\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  /**\n   * Generate unique ids for menu's list and button\n   */\n\n  var [buttonId, menuId] = useIds(id, \"menu-button\", \"menu-list\");\n  var openAndFocusMenu = React.useCallback(() => {\n    onOpen();\n    focus(menuRef.current, {\n      nextTick: true,\n      selectTextIfInput: false\n    });\n  }, [onOpen, menuRef]);\n  var timeoutIds = React.useRef(new Set([]));\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach(id => clearTimeout(id));\n    timeoutIds.current.clear();\n  });\n  var openAndFocusFirstItem = React.useCallback(() => {\n    onOpen();\n    var id = setTimeout(() => {\n      var first = descendants.firstEnabled();\n      if (first) setFocusedIndex(first.index);\n    });\n    timeoutIds.current.add(id);\n  }, [onOpen, setFocusedIndex, descendants]);\n  var openAndFocusLastItem = React.useCallback(() => {\n    onOpen();\n    var id = setTimeout(() => {\n      var last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id);\n  }, [onOpen, setFocusedIndex, descendants]);\n  var refocus = React.useCallback(() => {\n    var _menuRef$current, _descendants$item;\n    var doc = getOwnerDocument(menuRef.current);\n    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(doc.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var node = (_descendants$item = descendants.item(focusedIndex)) == null ? void 0 : _descendants$item.node;\n    if (node) {\n      focus(node, {\n        selectTextIfInput: false,\n        preventScroll: false\n      });\n    }\n  }, [isOpen, focusedIndex, descendants]);\n  React.useEffect(() => {\n    if (!isOpen) return;\n    if (autoSelect) openAndFocusFirstItem();else openAndFocusMenu();\n  }, [isOpen, autoSelect, openAndFocusFirstItem, openAndFocusMenu]);\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior\n  };\n}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n  var menu = useMenuContext();\n  var {\n    onToggle,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem\n  } = menu;\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return _extends({}, props, {\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nfunction isTargetMenuItem(target) {\n  var _target$getAttribute;\n\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return isHTMLElement(target) && !!((_target$getAttribute = target.getAttribute(\"role\")) != null && _target$getAttribute.startsWith(\"menuitem\"));\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (ref === void 0) {\n    ref = null;\n  }\n  var menu = useMenuContext();\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n  var {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior\n  } = menu;\n  var descendants = useMenuDescendantsContext();\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n\n  var createTypeaheadHandler = useShortcut({\n    preventDefault: event => event.key !== \" \" && isTargetMenuItem(event.target)\n  });\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Tab: event => event.preventDefault(),\n      Escape: onClose,\n      ArrowDown: () => {\n        var next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: () => {\n        var prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    var fn = keyMap[eventKey];\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n    /**\n     * Typeahead: Based on current character pressed,\n     * find the next item to be selected\n     */\n\n    var onTypeahead = createTypeaheadHandler(character => {\n      var nextItem = getNextItemFromSearch(descendants.values(), character, item => {\n        var _item$node$textConten, _item$node;\n        return (_item$node$textConten = item == null ? void 0 : (_item$node = item.node) == null ? void 0 : _item$node.textContent) != null ? _item$node$textConten : \"\";\n      }, descendants.item(focusedIndex));\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n    if (isTargetMenuItem(event.target)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  var hasBeenOpened = React.useRef(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen\n  });\n  return _extends({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _extends({}, props.style, {\n      transformOrigin: \"var(--popper-transform-origin)\"\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    popper,\n    isOpen\n  } = useMenuContext();\n  return popper.getPopperProps(_extends({}, props, {\n    style: _extends({\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }, props.style)\n  }));\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuItem(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n  var {\n      onMouseEnter: onMouseEnterProp,\n      onMouseMove: onMouseMoveProp,\n      onMouseLeave: onMouseLeaveProp,\n      onClick: onClickProp,\n      isDisabled,\n      isFocusable,\n      closeOnSelect\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"isDisabled\", \"isFocusable\", \"closeOnSelect\"]);\n  var menu = useMenuContext();\n  var {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId\n  } = menu;\n  var ref = React.useRef(null);\n  var id = menuId + \"-menuitem-\" + useId();\n  /**\n   * Register the menuitem's node into the domContext\n   */\n\n  var {\n    index,\n    register\n  } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  var onMouseEnter = React.useCallback(event => {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = React.useCallback(event => {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = React.useCallback(event => {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = React.useCallback(event => {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event.currentTarget)) return;\n    /**\n     * Close menu and parent menus, allowing the MenuItem\n     * to override its parent menu's `closeOnSelect` prop.\n     */\n\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(() => {\n    if (!isOpen) return;\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, {\n        nextTick: true,\n        selectTextIfInput: false,\n        preventScroll: false\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      focus(menuRef.current, {\n        preventScroll: false\n      });\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var clickableProps = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable\n  });\n  return _extends({}, htmlProps, clickableProps, {\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuOption(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (ref === void 0) {\n    ref = null;\n  }\n  var {\n      type = \"radio\",\n      isChecked\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"type\", \"isChecked\"]);\n  var ownProps = useMenuItem(rest, ref);\n  return _extends({}, ownProps, {\n    role: \"menuitem\" + type,\n    \"aria-checked\": isChecked\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuOptionGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n      children,\n      type = \"radio\",\n      value: valueProp,\n      defaultValue,\n      onChange: onChangeProp\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var [value, setValue] = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  var onChange = React.useCallback(selectedValue => {\n    if (type === \"radio\" && isString(value)) {\n      setValue(selectedValue);\n    }\n    if (type === \"checkbox\" && isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(child => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if (child.type.id !== \"MenuItemOption\") return child;\n    var onClick = event => {\n      onChange(child.props.value);\n      child.props.onClick == null ? void 0 : child.props.onClick(event);\n    };\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return /*#__PURE__*/React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return _extends({}, htmlProps, {\n    children: clones\n  });\n}\nexport function useMenuState() {\n  var {\n    isOpen,\n    onClose\n  } = useMenuContext();\n  return {\n    isOpen,\n    onClose\n  };\n}","map":{"version":3,"sources":["../../src/use-menu.ts"],"names":["useClickable","createDescendantContext","useControllableState","useDisclosure","useFocusOnHide","useId","useIds","useOutsideClick","useShortcut","useUnmountEffect","useUpdateEffect","usePopper","createContext","getValidChildren","mergeRefs","addItem","callAllHandlers","dataAttr","determineLazyBehavior","focus","getNextItemFromSearch","getOwnerDocument","isActiveElement","isArray","isHTMLElement","isString","normalizeEventKey","removeItem","React","MenuDescendantsProvider","useMenuDescendantsContext","useMenuDescendants","useMenuDescendant","MenuProvider","useMenuContext","strict","name","useMenu","props","id","closeOnSelect","closeOnBlur","autoSelect","isLazy","isOpen","isOpenProp","defaultIsOpen","onClose","onCloseProp","onOpen","onOpenProp","placement","lazyBehavior","direction","computePositionOnMount","popperProps","onToggle","menuRef","useRef","buttonRef","enabled","ref","handler","event","current","contains","target","popper","focusedIndex","setFocusedIndex","useState","descendants","focusRef","visible","shouldFocus","buttonId","menuId","openAndFocusMenu","useCallback","nextTick","selectTextIfInput","timeoutIds","Set","forEach","clearTimeout","clear","openAndFocusFirstItem","setTimeout","first","firstEnabled","index","add","openAndFocusLastItem","last","lastEnabled","refocus","doc","hasFocusWithin","activeElement","shouldRefocus","node","item","preventScroll","useEffect","onTransitionEnd","forceUpdate","orientation","useMenuButton","externalRef","menu","onKeyDown","eventKey","keyMap","Enter","ArrowDown","ArrowUp","action","preventDefault","stopPropagation","referenceRef","onClick","isTargetMenuItem","getAttribute","startsWith","useMenuList","Error","createTypeaheadHandler","key","Tab","Escape","next","nextEnabled","prev","prevEnabled","fn","onTypeahead","character","nextItem","values","textContent","indexOf","hasBeenOpened","shouldRenderChildren","hasBeenSelected","isSelected","children","tabIndex","role","style","transformOrigin","useMenuPositioner","getPopperProps","visibility","useMenuItem","onMouseEnter","onMouseEnterProp","onMouseMove","onMouseMoveProp","onMouseLeave","onMouseLeaveProp","onClickProp","isDisabled","isFocusable","htmlProps","menuCloseOnSelect","register","disabled","currentTarget","isFocused","trulyDisabled","clickableProps","useMenuOption","type","isChecked","rest","ownProps","useMenuOptionGroup","value","valueProp","defaultValue","onChange","onChangeProp","isRadio","fallback","setValue","selectedValue","nextValue","includes","validChildren","clones","map","child","cloneElement","useMenuState"],"mappings":"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","sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useDisclosure,\n  UseDisclosureProps,\n  useFocusOnHide,\n  useId,\n  useIds,\n  useOutsideClick,\n  useShortcut,\n  useUnmountEffect,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  createContext,\n  EventKeyMap,\n  getValidChildren,\n  mergeRefs,\n} from \"@chakra-ui/react-utils\"\nimport {\n  addItem,\n  callAllHandlers,\n  dataAttr,\n  determineLazyBehavior,\n  focus,\n  getNextItemFromSearch,\n  getOwnerDocument,\n  isActiveElement,\n  isArray,\n  isHTMLElement,\n  isString,\n  LazyBehavior,\n  normalizeEventKey,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  MenuDescendantsProvider,\n  useMenuDescendantsContext,\n  useMenuDescendants,\n  useMenuDescendant,\n] = createDescendantContext<HTMLElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [MenuProvider, useMenuContext] = createContext<\n  Omit<UseMenuReturn, \"descendants\">\n>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuProps extends UsePopperProps, UseDisclosureProps {\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of menu's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The menu's content is always unmounted when not open.\n   * - \"keepMounted\": The menu's content initially unmounted,\n   * but stays mounted when menu is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n  /**\n   * If `rtl`, poper placement positions will be flipped i.e. 'top-right' will\n   * become 'top-left' and vice-verse\n   */\n  direction?: \"ltr\" | \"rtl\"\n  /*\n   * If `true`, the menu will be positioned when it mounts\n   * (even if it's not open).\n   *\n   * Note 🚨: We don't recommend using this in a menu/popover intensive UI or page\n   * as it might affect scrolling performance.\n   */\n  computePositionOnMount?: boolean\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    direction,\n    computePositionOnMount,\n    ...popperProps\n  } = props\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n  })\n\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = React.useRef<HTMLDivElement>(null)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: (event) => {\n      if (!buttonRef.current?.contains(event.target as HTMLElement)) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper = usePopper({\n    ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction,\n  })\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const descendants = useMenuDescendants()\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = React.useCallback(() => {\n    onOpen()\n    focus(menuRef.current, {\n      nextTick: true,\n      selectTextIfInput: false,\n    })\n  }, [onOpen, menuRef])\n\n  const timeoutIds = React.useRef<Set<number>>(new Set([]))\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  const openAndFocusFirstItem = React.useCallback(() => {\n    onOpen()\n    const id = setTimeout(() => {\n      const first = descendants.firstEnabled()\n      if (first) setFocusedIndex(first.index)\n    })\n    timeoutIds.current.add(id)\n  }, [onOpen, setFocusedIndex, descendants])\n\n  const openAndFocusLastItem = React.useCallback(() => {\n    onOpen()\n    const id = setTimeout(() => {\n      const last = descendants.lastEnabled()\n      if (last) setFocusedIndex(last.index)\n    })\n    timeoutIds.current.add(id)\n  }, [onOpen, setFocusedIndex, descendants])\n\n  const refocus = React.useCallback(() => {\n    const doc = getOwnerDocument(menuRef.current)\n    const hasFocusWithin = menuRef.current?.contains(doc.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const node = descendants.item(focusedIndex)?.node\n    if (node) {\n      focus(node, { selectTextIfInput: false, preventScroll: false })\n    }\n  }, [isOpen, focusedIndex, descendants])\n\n  React.useEffect(() => {\n    if (!isOpen) return\n    if (autoSelect) openAndFocusFirstItem()\n    else openAndFocusMenu()\n  }, [isOpen, autoSelect, openAndFocusFirstItem, openAndFocusMenu])\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuButton hook\n * -----------------------------------------------------------------------------------------------*/\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(\n  props: UseMenuButtonProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const { onToggle, popper, openAndFocusFirstItem, openAndFocusLastItem } = menu\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nfunction isTargetMenuItem(target: EventTarget | null) {\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return (\n    isHTMLElement(target) &&\n    !!target.getAttribute(\"role\")?.startsWith(\"menuitem\")\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(\n  props: UseMenuListProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n  } = menu\n\n  const descendants = useMenuDescendantsContext()\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: (event) =>\n      event.key !== \" \" && isTargetMenuItem(event.target),\n  })\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Tab: (event) => event.preventDefault(),\n        Escape: onClose,\n        ArrowDown: () => {\n          const next = descendants.nextEnabled(focusedIndex)\n          if (next) setFocusedIndex(next.index)\n        },\n        ArrowUp: () => {\n          const prev = descendants.prevEnabled(focusedIndex)\n          if (prev) setFocusedIndex(prev.index)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      const onTypeahead = createTypeaheadHandler((character) => {\n        const nextItem = getNextItemFromSearch(\n          descendants.values(),\n          character,\n          (item) => item?.node?.textContent ?? \"\",\n          descendants.item(focusedIndex),\n        )\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem.node)\n          setFocusedIndex(index)\n        }\n      })\n\n      if (isTargetMenuItem(event.target)) {\n        onTypeahead(event)\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      createTypeaheadHandler,\n      onClose,\n      setFocusedIndex,\n    ],\n  )\n\n  const hasBeenOpened = React.useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen,\n  })\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style,\n    },\n  })\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {\n  /**\n   * If `true`, the menuitem will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and the menuitem is disabled, it'll\n   * remain keyboard-focusable\n   */\n  isFocusable?: boolean\n  /**\n   * Overrides the parent menu's `closeOnSelect` prop.\n   */\n  closeOnSelect?: boolean\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n  } = menu\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const id = `${menuId}-menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const { index, register } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const onMouseEnter = React.useCallback(\n    (event) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = React.useCallback(\n    (event) => {\n      onMouseMoveProp?.(event)\n      if (ref.current && !isActiveElement(ref.current)) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = React.useCallback(\n    (event) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = React.useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      if (!isTargetMenuItem(event.currentTarget)) return\n      /**\n       * Close menu and parent menus, allowing the MenuItem\n       * to override its parent menu's `closeOnSelect` prop.\n       */\n      if (closeOnSelect ?? menuCloseOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, {\n        nextTick: true,\n        selectTextIfInput: false,\n        preventScroll: false,\n      })\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      focus(menuRef.current, { preventScroll: false })\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const clickableProps = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends UseMenuItemProps,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { type = \"radio\", isChecked, ...rest } = props\n  const ownProps = useMenuItem(rest, ref)\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = React.useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && isString(value)) {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? removeItem(value, selectedValue)\n          : addItem(value, selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n"]},"metadata":{},"sourceType":"module"}