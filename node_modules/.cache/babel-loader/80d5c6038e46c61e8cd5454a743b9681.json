{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * This is a modified version of `PanSession` from `framer-motion`.\n *\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\nimport sync, { cancelSync, getFrameData } from \"framesync\";\nimport { getEventWindow } from \"./dom\";\nimport { distance, noop, pipe } from \"./function\";\nimport { addPointerEvent, extractEventInfo, isMouseEvent, isMultiTouchEvent } from \"./pointer-event\";\n/**\n * The event information passed to pan event handlers like `onPan`, `onPanStart`.\n *\n * It contains information about the current state of the tap gesture such as its\n * `point`, `delta`, and `offset`\n */\n\n/**\n * @internal\n *\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\nexport class PanSession {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  // The pointer event that started the pan session\n  // The current pointer event for the pan session\n  // The current pointer event info for the pan session\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  constructor(_event, handlers, threshold) {\n    _defineProperty(this, \"history\", []);\n    _defineProperty(this, \"startEvent\", null);\n    _defineProperty(this, \"lastEvent\", null);\n    _defineProperty(this, \"lastEventInfo\", null);\n    _defineProperty(this, \"handlers\", {});\n    _defineProperty(this, \"removeListeners\", noop);\n    _defineProperty(this, \"threshold\", 3);\n    _defineProperty(this, \"win\", void 0);\n    _defineProperty(this, \"updatePoint\", () => {\n      if (!(this.lastEvent && this.lastEventInfo)) return;\n      var info = getPanInfo(this.lastEventInfo, this.history);\n      var isPanStarted = this.startEvent !== null;\n      var isDistancePastThreshold = distance(info.offset, {\n        x: 0,\n        y: 0\n      }) >= this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      var {\n        timestamp\n      } = getFrameData();\n      this.history.push(_extends({}, info.point, {\n        timestamp\n      }));\n      var {\n        onStart,\n        onMove\n      } = this.handlers;\n      if (!isPanStarted) {\n        onStart == null ? void 0 : onStart(this.lastEvent, info);\n        this.startEvent = this.lastEvent;\n      }\n      onMove == null ? void 0 : onMove(this.lastEvent, info);\n    });\n    _defineProperty(this, \"onPointerMove\", (event, info) => {\n      this.lastEvent = event;\n      this.lastEventInfo = info; // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n\n      if (isMouseEvent(event) && event.buttons === 0) {\n        this.onPointerUp(event, info);\n        return;\n      } // Throttle mouse move event to once per frame\n\n      sync.update(this.updatePoint, true);\n    });\n    _defineProperty(this, \"onPointerUp\", (event, info) => {\n      // notify pan session ended\n      var panInfo = getPanInfo(info, this.history);\n      var {\n        onEnd,\n        onSessionEnd\n      } = this.handlers;\n      onSessionEnd == null ? void 0 : onSessionEnd(event, panInfo);\n      this.end(); // if panning never started, no need to call `onEnd`\n      // panning requires a pointermove of at least 3px\n\n      if (!onEnd || !this.startEvent) return;\n      onEnd == null ? void 0 : onEnd(event, panInfo);\n    });\n    this.win = getEventWindow(_event); // If we have more than one touch, don't start detecting this gesture\n\n    if (isMultiTouchEvent(_event)) return;\n    this.handlers = handlers;\n    if (threshold) {\n      this.threshold = threshold;\n    } // stop default browser behavior\n\n    _event.stopPropagation();\n    _event.preventDefault(); // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n\n    var _info = extractEventInfo(_event);\n    var {\n      timestamp: _timestamp\n    } = getFrameData();\n    this.history = [_extends({}, _info.point, {\n      timestamp: _timestamp\n    })]; // notify pan session start\n\n    var {\n      onSessionStart\n    } = handlers;\n    onSessionStart == null ? void 0 : onSessionStart(_event, getPanInfo(_info, this.history)); // attach event listeners and return a single function to remove them all\n\n    this.removeListeners = pipe(addPointerEvent(this.win, \"pointermove\", this.onPointerMove), addPointerEvent(this.win, \"pointerup\", this.onPointerUp), addPointerEvent(this.win, \"pointercancel\", this.onPointerUp));\n  }\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n  end() {\n    var _this$removeListeners;\n    (_this$removeListeners = this.removeListeners) == null ? void 0 : _this$removeListeners.call(this);\n    cancelSync.update(this.updatePoint);\n  }\n}\nfunction subtractPoint(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\nfunction startPanPoint(history) {\n  return history[0];\n}\nfunction lastPanPoint(history) {\n  return history[history.length - 1];\n}\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtractPoint(info.point, lastPanPoint(history)),\n    offset: subtractPoint(info.point, startPanPoint(history)),\n    velocity: getVelocity(history, 0.1)\n  };\n}\nfunction lastDevicePoint(history) {\n  return history[history.length - 1];\n}\nvar toMilliseconds = seconds => seconds * 1000;\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var i = history.length - 1;\n  var timestampedPoint = null;\n  var lastPoint = lastDevicePoint(history);\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n  return currentVelocity;\n}","map":{"version":3,"sources":["../../src/pan-event.ts"],"names":["sync","cancelSync","getFrameData","getEventWindow","distance","noop","pipe","addPointerEvent","extractEventInfo","isMouseEvent","isMultiTouchEvent","PanSession","constructor","event","handlers","threshold","win","stopPropagation","preventDefault","info","timestamp","history","point","onSessionStart","getPanInfo","removeListeners","onPointerMove","onPointerUp","lastEvent","lastEventInfo","isPanStarted","startEvent","isDistancePastThreshold","offset","x","y","push","onStart","onMove","buttons","update","updatePoint","panInfo","onEnd","onSessionEnd","end","updateHandlers","subtractPoint","a","b","startPanPoint","lastPanPoint","length","delta","velocity","getVelocity","lastDevicePoint","toMilliseconds","seconds","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity"],"mappings":"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","sourcesContent":["/**\n * This is a modified version of `PanSession` from `framer-motion`.\n *\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\nimport sync, { cancelSync, getFrameData } from \"framesync\"\nimport { getEventWindow } from \"./dom\"\nimport { distance, noop, pipe } from \"./function\"\nimport {\n  addPointerEvent,\n  AnyPointerEvent,\n  extractEventInfo,\n  isMouseEvent,\n  isMultiTouchEvent,\n  Point,\n  PointerEventInfo,\n} from \"./pointer-event\"\n\n/**\n * The event information passed to pan event handlers like `onPan`, `onPanStart`.\n *\n * It contains information about the current state of the tap gesture such as its\n * `point`, `delta`, and `offset`\n */\nexport interface PanEventInfo {\n  /**\n   * Contains `x` and `y` values for the current pan position relative\n   * to the device or page.\n   */\n  point: Point\n  /**\n   * Contains `x` and `y` values for the distance moved since\n   * the last pan event.\n   */\n  delta: Point\n  /**\n   * Contains `x` and `y` values for the distance moved from\n   * the first pan event.\n   */\n  offset: Point\n  /**\n   * Contains `x` and `y` values for the current velocity of the pointer.\n   */\n  velocity: Point\n}\n\nexport type PanEventHandler = (\n  event: AnyPointerEvent,\n  info: PanEventInfo,\n) => void\n\ninterface TimestampedPoint extends Point {\n  timestamp: number\n}\n\nexport interface PanSessionHandlers {\n  /**\n   * Callback fired when the pan session is created.\n   * This is typically called once `pointerdown` event is fired.\n   */\n  onSessionStart: PanEventHandler\n  /**\n   * Callback fired when the pan session is detached.\n   * This is typically called once `pointerup` event is fired.\n   */\n  onSessionEnd: PanEventHandler\n  /**\n   * Callback fired when the pan session has started.\n   * The pan session when the pan offset is greater than\n   * the threshold (allowable move distance to detect pan)\n   */\n  onStart: PanEventHandler\n  /**\n   * Callback fired while panning\n   */\n  onMove: PanEventHandler\n  /**\n   * Callback fired when the current pan session has end.\n   * This is typically called once `pointerup` event is fired.\n   */\n  onEnd: PanEventHandler\n}\n\ntype PanSessionHistory = TimestampedPoint[]\n\nexport type PanSessionOptions = {\n  threshold?: number\n  window?: Window\n}\n\n/**\n * @internal\n *\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\nexport class PanSession {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  private history: PanSessionHistory = []\n\n  // The pointer event that started the pan session\n  private startEvent: AnyPointerEvent | null = null\n\n  // The current pointer event for the pan session\n  private lastEvent: AnyPointerEvent | null = null\n\n  // The current pointer event info for the pan session\n  private lastEventInfo: PointerEventInfo | null = null\n\n  private handlers: Partial<PanSessionHandlers> = {}\n\n  private removeListeners: Function = noop\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  private threshold = 3\n\n  private win: typeof globalThis\n\n  constructor(\n    event: AnyPointerEvent,\n    handlers: Partial<PanSessionHandlers>,\n    threshold?: number,\n  ) {\n    this.win = getEventWindow(event)\n\n    // If we have more than one touch, don't start detecting this gesture\n    if (isMultiTouchEvent(event)) return\n\n    this.handlers = handlers\n\n    if (threshold) {\n      this.threshold = threshold\n    }\n\n    // stop default browser behavior\n    event.stopPropagation()\n    event.preventDefault()\n\n    // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n    const info = extractEventInfo(event)\n    const { timestamp } = getFrameData()\n    this.history = [{ ...info.point, timestamp }]\n\n    // notify pan session start\n    const { onSessionStart } = handlers\n    onSessionStart?.(event, getPanInfo(info, this.history))\n\n    // attach event listeners and return a single function to remove them all\n    this.removeListeners = pipe(\n      addPointerEvent(this.win, \"pointermove\", this.onPointerMove),\n      addPointerEvent(this.win, \"pointerup\", this.onPointerUp),\n      addPointerEvent(this.win, \"pointercancel\", this.onPointerUp),\n    )\n  }\n\n  private updatePoint = () => {\n    if (!(this.lastEvent && this.lastEventInfo)) return\n\n    const info = getPanInfo(this.lastEventInfo, this.history)\n\n    const isPanStarted = this.startEvent !== null\n\n    const isDistancePastThreshold =\n      distance(info.offset, { x: 0, y: 0 }) >= this.threshold\n\n    if (!isPanStarted && !isDistancePastThreshold) return\n\n    const { timestamp } = getFrameData()\n    this.history.push({ ...info.point, timestamp })\n\n    const { onStart, onMove } = this.handlers\n\n    if (!isPanStarted) {\n      onStart?.(this.lastEvent, info)\n      this.startEvent = this.lastEvent\n    }\n\n    onMove?.(this.lastEvent, info)\n  }\n\n  private onPointerMove = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    this.lastEvent = event\n    this.lastEventInfo = info\n\n    // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n    if (isMouseEvent(event) && event.buttons === 0) {\n      this.onPointerUp(event, info)\n      return\n    }\n\n    // Throttle mouse move event to once per frame\n    sync.update(this.updatePoint, true)\n  }\n\n  private onPointerUp = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    // notify pan session ended\n    const panInfo = getPanInfo(info, this.history)\n    const { onEnd, onSessionEnd } = this.handlers\n\n    onSessionEnd?.(event, panInfo)\n    this.end()\n\n    // if panning never started, no need to call `onEnd`\n    // panning requires a pointermove of at least 3px\n    if (!onEnd || !this.startEvent) return\n\n    onEnd?.(event, panInfo)\n  }\n\n  updateHandlers(handlers: Partial<PanSessionHandlers>) {\n    this.handlers = handlers\n  }\n\n  end() {\n    this.removeListeners?.()\n    cancelSync.update(this.updatePoint)\n  }\n}\n\nfunction subtractPoint(a: Point, b: Point) {\n  return { x: a.x - b.x, y: a.y - b.y }\n}\n\nfunction startPanPoint(history: PanSessionHistory) {\n  return history[0]\n}\n\nfunction lastPanPoint(history: PanSessionHistory) {\n  return history[history.length - 1]\n}\n\nfunction getPanInfo(info: PointerEventInfo, history: PanSessionHistory) {\n  return {\n    point: info.point,\n    delta: subtractPoint(info.point, lastPanPoint(history)),\n    offset: subtractPoint(info.point, startPanPoint(history)),\n    velocity: getVelocity(history, 0.1),\n  }\n}\n\nfunction lastDevicePoint(history: TimestampedPoint[]): TimestampedPoint {\n  return history[history.length - 1]\n}\n\nconst toMilliseconds = (seconds: number) => seconds * 1000\n\nfunction getVelocity(history: TimestampedPoint[], timeDelta: number): Point {\n  if (history.length < 2) {\n    return { x: 0, y: 0 }\n  }\n\n  let i = history.length - 1\n  let timestampedPoint: TimestampedPoint | null = null\n  const lastPoint = lastDevicePoint(history)\n  while (i >= 0) {\n    timestampedPoint = history[i]\n    if (\n      lastPoint.timestamp - timestampedPoint.timestamp >\n      toMilliseconds(timeDelta)\n    ) {\n      break\n    }\n    i--\n  }\n\n  if (!timestampedPoint) {\n    return { x: 0, y: 0 }\n  }\n\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000\n  if (time === 0) {\n    return { x: 0, y: 0 }\n  }\n\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time,\n  }\n\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0\n  }\n\n  return currentVelocity\n}\n"]},"metadata":{},"sourceType":"module"}