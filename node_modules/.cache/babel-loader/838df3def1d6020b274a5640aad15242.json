{"ast":null,"code":"import { getPointerEventName, wrapPointerEventHandler } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport function useEventListenerMap() {\n  var listeners = React.useRef(new Map());\n  var currentListeners = listeners.current;\n  var add = React.useCallback((el, type, listener, options) => {\n    var pointerEventListener = wrapPointerEventHandler(listener, type === \"pointerdown\");\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options\n    });\n    el.addEventListener(type, pointerEventListener, options);\n  }, []);\n  var remove = React.useCallback((el, type, listener, options) => {\n    var {\n      __listener: pointerEventListener\n    } = listeners.current.get(listener);\n    el.removeEventListener(type, pointerEventListener, options);\n    listeners.current.delete(pointerEventListener);\n  }, []);\n  React.useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}","map":{"version":3,"sources":["../../src/use-event-listener-map.ts"],"names":["getPointerEventName","wrapPointerEventHandler","React","useEventListenerMap","listeners","useRef","Map","currentListeners","current","add","useCallback","el","type","listener","options","pointerEventListener","set","__listener","addEventListener","remove","get","removeEventListener","delete","useEffect","forEach","value","key"],"mappings":"AAAA,SAEEA,mBAFF,EAGEC,uBAHF,QAKO,kBALP;AAMA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AA6BA,OAAO,SAASC,mBAAT,CAAA,EAA+C;EACpD,IAAMC,SAAS,GAAGF,KAAK,CAACG,MAANH,CAAa,IAAII,GAAJ,CAAA,CAAbJ,CAAlB;EACA,IAAMK,gBAAgB,GAAGH,SAAS,CAACI,OAAnC;EAEA,IAAMC,GAAG,GAAG,KAAK,CAACC,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;IAC7D,IAAMC,oBAAoB,GAAGd,uBAAuB,CAClDY,QADkD,EAElDD,IAAI,KAAK,aAFyC,CAApD;IAIAR,SAAS,CAACI,OAAVJ,CAAkBY,GAAlBZ,CAAsBS,QAAtBT,EAAgC;MAC9Ba,UAAU,EAAEF,oBADkB;MAE9BH,IAAI,EAAEZ,mBAAmB,CAACY,IAAD,CAFK;MAG9BD,EAH8B;MAI9BG;IAJ8B,CAAhCV,CAAAA;IAMAO,EAAE,CAACO,gBAAHP,CAAoBC,IAApBD,EAA0BI,oBAA1BJ,EAAgDG,OAAhDH,CAAAA;EACD,CAZW,EAYT,EAZS,CAAZ;EAcA,IAAMQ,MAAM,GAAG,KAAK,CAACT,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;IAChE,IAAM;MAAEG,UAAU,EAAEF;IAAd,CAAA,GAAuCX,SAAS,CAACI,OAAVJ,CAAkBgB,GAAlBhB,CAAsBS,QAAtBT,CAA7C;IACAO,EAAE,CAACU,mBAAHV,CAAuBC,IAAvBD,EAA6BI,oBAA7BJ,EAAmDG,OAAnDH,CAAAA;IACAP,SAAS,CAACI,OAAVJ,CAAkBkB,MAAlBlB,CAAyBW,oBAAzBX,CAAAA;EACD,CAJc,EAIZ,EAJY,CAAf;EAMAF,KAAK,CAACqB,SAANrB,CACE,MAAM,MAAM;IACVK,gBAAgB,CAACiB,OAAjBjB,CAAyB,CAACkB,KAAD,EAAQC,GAAR,KAAgB;MACvCP,MAAM,CAACM,KAAK,CAACd,EAAP,EAAWc,KAAK,CAACb,IAAjB,EAAuBc,GAAvB,EAA4BD,KAAK,CAACX,OAAlC,CAANK;IACD,CAFDZ,CAAAA;EAGD,CALHL,EAME,CAACiB,MAAD,EAASZ,gBAAT,CANFL,CAAAA;EASA,OAAO;IAAEO,GAAF;IAAOU;EAAP,CAAP;AACD","sourcesContent":["import {\n  PointerEventInfo,\n  getPointerEventName,\n  wrapPointerEventHandler,\n  EventListenerWithPointInfo,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListenerMap(): EventListeners {\n  const listeners = React.useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = React.useCallback((el, type, listener, options) => {\n    const pointerEventListener = wrapPointerEventHandler(\n      listener,\n      type === \"pointerdown\",\n    )\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options,\n    })\n    el.addEventListener(type, pointerEventListener, options)\n  }, [])\n\n  const remove = React.useCallback((el, type, listener, options) => {\n    const { __listener: pointerEventListener } = listeners.current.get(listener)\n    el.removeEventListener(type, pointerEventListener, options)\n    listeners.current.delete(pointerEventListener)\n  }, [])\n\n  React.useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module"}