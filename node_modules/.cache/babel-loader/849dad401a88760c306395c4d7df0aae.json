{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createUserWithEmailAndPassword, getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"firebase/auth\";\nimport { useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport swal from 'sweetalert';\nimport initializeAuthentication from '../config/firebase';\nimport { db, collection, getDocs } from '../config/firebase';\nimport { doc, setDoc, updateDoc, serverTimestamp, getFirestore } from \"firebase/firestore\";\nimport firebase from 'firebase/app'; // Import the firebase namespace\nimport 'firebase/firestore'; // Import Firestore module\nimport 'firebase/auth'; // If you're using authentication\n\n//initialize firebase  authentication\ninitializeAuthentication();\nconst useFirebase = () => {\n  _s();\n  const [user, setUser] = useState({});\n  const auth = getAuth();\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const unsubscribed = onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n        console.log(\"User signed in:\", user.email);\n      } else {\n        setUser({});\n        console.log(\"No user signed in\");\n      }\n      setIsLoading(false);\n    });\n    return () => unsubscribed;\n  }, [auth]);\n  const signUpUser = async (email, password, name) => {\n    setIsLoading(true);\n    try {\n      const res = await createUserWithEmailAndPassword(auth, email, password);\n\n      // Update the user profile with the display name\n      await updateProfile(auth.currentUser, {\n        displayName: name\n      });\n\n      // Add additional user details to Firestore\n      const userProfileData = {\n        age: '',\n        // Empty string for age\n        bloodGroup: '',\n        // Empty string for bloodGroup\n        email: email,\n        // Set to the email the user just entered\n        medicalBio: '',\n        // Empty string for medicalBio\n        name: '',\n        // Set to the user's display name\n        phone: '',\n        // Empty string for phone\n        photoURL: '',\n        // Empty string for photoURL\n        rating: '',\n        // Empty string for rating\n        rollOrEmpId: '',\n        // Empty string for roll or emp id\n        serviceReview: '',\n        // Empty string for serviceReview\n        orders: [] // Empty array for orders\n      };\n\n      // Create a document for the user in the 'user_profile' collection\n      const userProfileRef = doc(db, 'user_profile', res.user.uid); // Using the UID as the document ID\n      await setDoc(userProfileRef, userProfileData); // Set the data\n\n      // Directly log the user in after signup\n      setUser(res.user);\n\n      // Show success message\n      swal(\"Good job!\", \"Account has been created!\", \"success\");\n\n      // Redirect to home\n      history.push('/');\n\n      // Reload the home page\n      window.location.reload();\n      window.scrollTo(0, 100);\n    } catch (err) {\n      swal(\"Something went wrong!\", `${err.message}`, \"error\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  //sign in functionality\n  const signInUser = async (email, password) => {\n    setIsLoading(true);\n    await signInWithEmailAndPassword(auth, email, password).then(res => {\n      setUser(res.user);\n      swal(\"Sign in Successful!\", \"Welcome back !\", \"info\");\n      history.push('/');\n      // Reload the home page\n      window.location.reload();\n      window.scrollTo(0, 100);\n    }).catch(err => swal(\"Something went wrong!\", `${err.message}`, \"error\")).finally(() => setIsLoading(false));\n  };\n\n  //google sign in \n  const signInWithGoogle = async () => {\n    setIsLoading(true);\n    const googleProvider = new GoogleAuthProvider();\n    await signInWithPopup(auth, googleProvider).then(res => {\n      setUser(res.user);\n      swal(\"Good job!\", \"Account has been created!\", \"success\");\n      history.push('/');\n    }).catch(err => console.log(err.message)).finally(() => setIsLoading(false));\n  };\n\n  // sign out \n  const signOutUser = async () => {\n    setIsLoading(true);\n    await signOut(auth).then(() => {\n      setUser({});\n      swal(\"Logout Successful!\", \"You are logged out!\", \"success\");\n      history.push('/signin');\n    }).catch(err => {\n      swal(\"Something went wrong!\", `${err.message}`, \"error\");\n    }).finally(() => setIsLoading(false));\n  };\n  // Fetch medicines\n  const getMedicines = async () => {\n    const medicinesCol = collection(db, 'products'); // Reference to the 'medicines' collection\n    const medicinesSnapshot = await getDocs(medicinesCol); // Get documents from the collection\n    return medicinesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    })); // Map the data to a more usable format\n  };\n\n  // Fetch orders\n  const getOrders = async () => {\n    const ordersCol = collection(db, 'orders'); // Reference to the 'orders' collection\n    const ordersSnapshot = await getDocs(ordersCol); // Get documents from the collection\n    return ordersSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  };\n\n  // Function to fetch messages\n  const getMessages = async () => {\n    try {\n      const messagesCollection = collection(db, 'messages'); // Replace 'messages' with your collection name\n      const messageSnapshot = await getDocs(messagesCollection);\n      const messages = messageSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      return messages;\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      return [];\n    }\n  };\n  // Firestore function to update the order status\n  const db = getFirestore(); // Firestore\n\n  // Firestore function to update the order status\n  const updateOrderStatusInFirestore = async (orderId, newStatus) => {\n    if (!orderId) {\n      console.error(\"Invalid orderId:\", orderId); // Check for invalid orderId\n      return;\n    }\n    const orderRef = doc(db, 'orders', orderId); // Corrected Firestore document reference\n\n    try {\n      console.log(\"Updating order with ID:\", orderId); // Log the orderId to verify it's being passed\n      await updateDoc(orderRef, {\n        status: newStatus,\n        timestamp: serverTimestamp() // Optional: Update timestamp\n      });\n    } catch (error) {\n      console.error(\"Error updating order status in Firestore:\", error);\n    }\n  };\n  return {\n    user,\n    signInUser,\n    signUpUser,\n    signOutUser,\n    signInWithGoogle,\n    isLoading,\n    getMedicines,\n    getOrders,\n    getMessages,\n    updateOrderStatusInFirestore\n  };\n};\n_s(useFirebase, \"o9TOeKgZZnjpaHY94AVr78qCgsc=\", false, function () {\n  return [useHistory];\n});\nexport default useFirebase;","map":{"version":3,"names":["createUserWithEmailAndPassword","getAuth","GoogleAuthProvider","onAuthStateChanged","signInWithEmailAndPassword","signInWithPopup","signOut","updateProfile","useEffect","useState","useHistory","swal","initializeAuthentication","db","collection","getDocs","doc","setDoc","updateDoc","serverTimestamp","getFirestore","firebase","useFirebase","_s","user","setUser","auth","history","isLoading","setIsLoading","unsubscribed","console","log","email","signUpUser","password","name","res","currentUser","displayName","userProfileData","age","bloodGroup","medicalBio","phone","photoURL","rating","rollOrEmpId","serviceReview","orders","userProfileRef","uid","push","window","location","reload","scrollTo","err","message","signInUser","then","catch","finally","signInWithGoogle","googleProvider","signOutUser","getMedicines","medicinesCol","medicinesSnapshot","docs","map","id","data","getOrders","ordersCol","ordersSnapshot","getMessages","messagesCollection","messageSnapshot","messages","error","updateOrderStatusInFirestore","orderId","newStatus","orderRef","status","timestamp"],"sources":["/Users/arman_gupta/Documents/GitHub/MedSync/src/hooks/useFirebase.js"],"sourcesContent":["import { createUserWithEmailAndPassword, getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"firebase/auth\";\nimport { useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport swal from 'sweetalert';\nimport initializeAuthentication from '../config/firebase';\nimport { db, collection, getDocs } from '../config/firebase'; \nimport { doc, setDoc, updateDoc, serverTimestamp, getFirestore } from \"firebase/firestore\"; \nimport firebase from 'firebase/app'; // Import the firebase namespace\nimport 'firebase/firestore'; // Import Firestore module\nimport 'firebase/auth'; // If you're using authentication\n\n//initialize firebase  authentication\ninitializeAuthentication()\n\nconst useFirebase = () => {\n    const [user, setUser] = useState({});\n    const auth = getAuth();\n    const history = useHistory();\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const unsubscribed = onAuthStateChanged(auth, user => {\n            if (user) {\n                setUser(user)\n                console.log(\"User signed in:\", user.email);\n            } else {\n                setUser({})\n                console.log(\"No user signed in\");\n            }\n            setIsLoading(false);\n        })\n        return () => unsubscribed;\n    }, [auth])\n    \n\n\nconst signUpUser = async (email, password, name) => {\n    setIsLoading(true);\n    try {\n        const res = await createUserWithEmailAndPassword(auth, email, password);\n        \n        // Update the user profile with the display name\n        await updateProfile(auth.currentUser, {\n            displayName: name,\n        });\n        \n        // Add additional user details to Firestore\n        const userProfileData = {\n            age: '',  // Empty string for age\n            bloodGroup: '',  // Empty string for bloodGroup\n            email: email,  // Set to the email the user just entered\n            medicalBio: '',  // Empty string for medicalBio\n            name: '',  // Set to the user's display name\n            phone: '',  // Empty string for phone\n            photoURL: '',  // Empty string for photoURL\n            rating: '',  // Empty string for rating\n            rollOrEmpId: '',  // Empty string for roll or emp id\n            serviceReview: '',  // Empty string for serviceReview\n            orders: []  // Empty array for orders\n        };\n\n        // Create a document for the user in the 'user_profile' collection\n        const userProfileRef = doc(db, 'user_profile', res.user.uid);  // Using the UID as the document ID\n        await setDoc(userProfileRef, userProfileData);  // Set the data\n\n        // Directly log the user in after signup\n        setUser(res.user);\n        \n        // Show success message\n        swal(\"Good job!\", \"Account has been created!\", \"success\");\n\n        // Redirect to home\n        history.push('/');\n\n        // Reload the home page\n        window.location.reload();\n\n        window.scrollTo(0, 100);\n    } catch (err) {\n        swal(\"Something went wrong!\", `${err.message}`, \"error\");\n    } finally {\n        setIsLoading(false);\n    }\n};\n\n    \n\n    //sign in functionality\n    const signInUser = async (email, password) => {\n        setIsLoading(true);\n        await signInWithEmailAndPassword(auth, email, password)\n            .then(res => {\n                setUser(res.user);\n                swal(\"Sign in Successful!\", \"Welcome back !\", \"info\")\n                history.push('/');\n                // Reload the home page\n                window.location.reload();\n                                    window.scrollTo(0, 100);\n\n            })\n            .catch(err => swal(\"Something went wrong!\", `${err.message}`, \"error\")).finally(() => setIsLoading(false));\n    }\n\n    //google sign in \n    const signInWithGoogle = async () => {\n        setIsLoading(true);\n        const googleProvider = new GoogleAuthProvider();\n        await signInWithPopup(auth, googleProvider)\n            .then(res => {\n                setUser(res.user);\n                swal(\"Good job!\", \"Account has been created!\", \"success\");\n                history.push('/');\n            }).catch(err => console.log(err.message)).finally(() => setIsLoading(false));\n    }\n\n\n    // sign out \n    const signOutUser = async () => {\n        setIsLoading(true);\n        await signOut(auth).then(() => {\n            setUser({});\n            swal(\"Logout Successful!\", \"You are logged out!\", \"success\");\n            history.push('/signin')\n        }).catch((err) => {\n            swal(\"Something went wrong!\", `${err.message}`, \"error\")\n        }).finally(() => setIsLoading(false));\n\n    }\n// Fetch medicines\nconst getMedicines = async () => {\n    const medicinesCol = collection(db, 'products');  // Reference to the 'medicines' collection\n    const medicinesSnapshot = await getDocs(medicinesCol);  // Get documents from the collection\n    return medicinesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));  // Map the data to a more usable format\n};\n\n// Fetch orders\nconst getOrders = async () => {\n    const ordersCol = collection(db, 'orders')  // Reference to the 'orders' collection\n    const ordersSnapshot = await getDocs(ordersCol);  // Get documents from the collection\n    return ordersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n};\n    \n    // Function to fetch messages\n    const getMessages = async () => {\n        try {\n            const messagesCollection = collection(db, 'messages'); // Replace 'messages' with your collection name\n            const messageSnapshot = await getDocs(messagesCollection);\n            const messages = messageSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n            return messages;\n        } catch (error) {\n            console.error(\"Error fetching messages:\", error);\n            return [];\n        }\n    };\n    // Firestore function to update the order status\nconst db = getFirestore(); // Firestore\n\n// Firestore function to update the order status\nconst updateOrderStatusInFirestore = async (orderId, newStatus) => {\n  if (!orderId) {\n    console.error(\"Invalid orderId:\", orderId); // Check for invalid orderId\n    return;\n  }\n\n  const orderRef = doc(db, 'orders', orderId); // Corrected Firestore document reference\n\n  try {\n    console.log(\"Updating order with ID:\", orderId); // Log the orderId to verify it's being passed\n    await updateDoc(orderRef, {\n      status: newStatus,\n      timestamp: serverTimestamp(), // Optional: Update timestamp\n    });\n  } catch (error) {\n    console.error(\"Error updating order status in Firestore:\", error);\n  }\n};\n\n  \n\n    return {\n        user,\n        signInUser,\n        signUpUser,\n        signOutUser,\n        signInWithGoogle,\n        isLoading,\n        getMedicines,\n        getOrders,\n        getMessages,\n        updateOrderStatusInFirestore\n    };\n}\n\nexport default useFirebase\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}