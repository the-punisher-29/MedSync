{"ast":null,"code":"'use strict';\n\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\n/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low, high, value) {\n  return Math.min(Math.max(low, value), high);\n}\nvar ColorError = /*#__PURE__*/function (_Error) {\n  _inherits(ColorError, _Error);\n  var _super = _createSuper(ColorError);\n  function ColorError(color) {\n    _classCallCheck(this, ColorError);\n    return _super.call(this, `Failed to parse color: \"${color}\"`);\n  }\n  return _createClass(ColorError);\n}(/*#__PURE__*/_wrapNativeSuper(Error));\nvar ColorError$1 = ColorError;\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color) {\n  if (typeof color !== 'string') throw new ColorError$1(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n  var normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n  var reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    var arr = Array.from(reducedHexMatch).slice(1);\n    return [].concat(_toConsumableArray(arr.slice(0, 3).map(function (x) {\n      return parseInt(r(x, 2), 16);\n    })), [parseInt(r(arr[3] || 'f', 2), 16) / 255]);\n  }\n  var hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    var _arr = Array.from(hexMatch).slice(1);\n    return [].concat(_toConsumableArray(_arr.slice(0, 3).map(function (x) {\n      return parseInt(x, 16);\n    })), [parseInt(_arr[3] || 'ff', 16) / 255]);\n  }\n  var rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    var _arr2 = Array.from(rgbaMatch).slice(1);\n    return [].concat(_toConsumableArray(_arr2.slice(0, 3).map(function (x) {\n      return parseInt(x, 10);\n    })), [parseFloat(_arr2[3] || '1')]);\n  }\n  var hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    var _Array$from$slice$map = Array.from(hslaMatch).slice(1).map(parseFloat),\n      _Array$from$slice$map2 = _slicedToArray(_Array$from$slice$map, 4),\n      h = _Array$from$slice$map2[0],\n      s = _Array$from$slice$map2[1],\n      l = _Array$from$slice$map2[2],\n      a = _Array$from$slice$map2[3];\n    if (guard(0, 100, s) !== s) throw new ColorError$1(color);\n    if (guard(0, 100, l) !== l) throw new ColorError$1(color);\n    return [].concat(_toConsumableArray(hslToRgb(h, s, l)), [Number.isNaN(a) ? 1 : a]);\n  }\n  throw new ColorError$1(color);\n}\nfunction hash(str) {\n  var hash = 5381;\n  var i = str.length;\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\nvar colorToInt = function colorToInt(x) {\n  return parseInt(x.replace(/_/g, ''), 36);\n};\nvar compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'.split(' ').reduce(function (acc, next) {\n  var key = colorToInt(next.substring(0, 3));\n  var hex = colorToInt(next.substring(3)).toString(16);\n\n  // NOTE: padStart could be used here but it breaks Node 6 compat\n  // https://github.com/ricokahler/color2k/issues/351\n  var prefix = '';\n  for (var i = 0; i < 6 - hex.length; i++) {\n    prefix += '0';\n  }\n  acc[key] = `${prefix}${hex}`;\n  return acc;\n}, {});\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color) {\n  var normalizedColorName = color.toLowerCase().trim();\n  var result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError$1(color);\n  return `#${result}`;\n}\nvar r = function r(str, amount) {\n  return Array.from(Array(amount)).map(function () {\n    return str;\n  }).join('');\n};\nvar reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nvar hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nvar rgbaRegex = new RegExp(`^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(',\\\\s*(\\\\d+)\\\\s*', 2)}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`, 'i');\nvar hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nvar namedColorRegex = /^[a-z]+$/i;\nvar roundColor = function roundColor(color) {\n  return Math.round(color * 255);\n};\nvar hslToRgb = function hslToRgb(hue, saturation, lightness) {\n  var l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor);\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  var huePrime = (hue % 360 + 360) % 360 / 60;\n  var chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n  var lightnessModification = l - chroma / 2;\n  var finalRed = red + lightnessModification;\n  var finalGreen = green + lightnessModification;\n  var finalBlue = blue + lightnessModification;\n  return [finalRed, finalGreen, finalBlue].map(roundColor);\n};\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color) {\n  var _parseToRgba$map = parseToRgba(color).map(function (value, index) {\n      return (\n        // 3rd index is alpha channel which is already normalized\n        index === 3 ? value : value / 255\n      );\n    }),\n    _parseToRgba$map2 = _slicedToArray(_parseToRgba$map, 4),\n    red = _parseToRgba$map2[0],\n    green = _parseToRgba$map2[1],\n    blue = _parseToRgba$map2[2],\n    alpha = _parseToRgba$map2[3];\n  var max = Math.max(red, green, blue);\n  var min = Math.min(red, green, blue);\n  var lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n  var delta = max - min;\n  var saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n  var hue = 60 * (red === max ? (green - blue) / delta + (green < blue ? 6 : 0) : green === max ? (blue - red) / delta + 2 : (red - green) / delta + 4);\n  return [hue, saturation, lightness, alpha];\n}\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(hue, saturation, lightness, alpha) {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(0, 100, saturation * 100).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color, degrees) {\n  var _parseToHsla = parseToHsla(color),\n    _parseToHsla2 = _slicedToArray(_parseToHsla, 4),\n    h = _parseToHsla2[0],\n    s = _parseToHsla2[1],\n    l = _parseToHsla2[2],\n    a = _parseToHsla2[3];\n  return hsla(h + degrees, s, l, a);\n}\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color, amount) {\n  var _parseToHsla = parseToHsla(color),\n    _parseToHsla2 = _slicedToArray(_parseToHsla, 4),\n    hue = _parseToHsla2[0],\n    saturation = _parseToHsla2[1],\n    lightness = _parseToHsla2[2],\n    alpha = _parseToHsla2[3];\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color, amount) {\n  var _parseToHsla = parseToHsla(color),\n    _parseToHsla2 = _slicedToArray(_parseToHsla, 4),\n    h = _parseToHsla2[0],\n    s = _parseToHsla2[1],\n    l = _parseToHsla2[2],\n    a = _parseToHsla2[3];\n  return hsla(h, s - amount, l, a);\n}\n\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color) {\n  if (color === 'transparent') return 0;\n  function f(x) {\n    var channel = x / 255;\n    return channel <= 0.04045 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n  }\n  var _parseToRgba = parseToRgba(color),\n    _parseToRgba2 = _slicedToArray(_parseToRgba, 3),\n    r = _parseToRgba2[0],\n    g = _parseToRgba2[1],\n    b = _parseToRgba2[2];\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1, color2) {\n  var luminance1 = getLuminance(color1);\n  var luminance2 = getLuminance(color2);\n  return luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red, green, blue, alpha) {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1, color2, weight) {\n  var normalize = function normalize(n, index) {\n    return (\n      // 3rd index is alpha channel which is already normalized\n      index === 3 ? n : n / 255\n    );\n  };\n  var _parseToRgba$map = parseToRgba(color1).map(normalize),\n    _parseToRgba$map2 = _slicedToArray(_parseToRgba$map, 4),\n    r1 = _parseToRgba$map2[0],\n    g1 = _parseToRgba$map2[1],\n    b1 = _parseToRgba$map2[2],\n    a1 = _parseToRgba$map2[3];\n  var _parseToRgba$map3 = parseToRgba(color2).map(normalize),\n    _parseToRgba$map4 = _slicedToArray(_parseToRgba$map3, 4),\n    r2 = _parseToRgba$map4[0],\n    g2 = _parseToRgba$map4[1],\n    b2 = _parseToRgba$map4[2],\n    a2 = _parseToRgba$map4[3];\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  var alphaDelta = a2 - a1;\n  var normalizedWeight = weight * 2 - 1;\n  var combinedWeight = normalizedWeight * alphaDelta === -1 ? normalizedWeight : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  var weight2 = (combinedWeight + 1) / 2;\n  var weight1 = 1 - weight2;\n  var r = (r1 * weight1 + r2 * weight2) * 255;\n  var g = (g1 * weight1 + g2 * weight2) * 255;\n  var b = (b1 * weight1 + b2 * weight2) * 255;\n  var a = a2 * weight + a1 * (1 - weight);\n  return rgba(r, g, b, a);\n}\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale() {\n  for (var _len = arguments.length, colors = new Array(_len), _key = 0; _key < _len; _key++) {\n    colors[_key] = arguments[_key];\n  }\n  return function (n) {\n    var lastIndex = colors.length - 1;\n    var lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    var highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n    var color1 = colors[lowIndex];\n    var color2 = colors[highIndex];\n    var unit = 1 / lastIndex;\n    var weight = (n - unit * lowIndex) / unit;\n    return mix(color1, color2, weight);\n  };\n}\nvar guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7\n};\n\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */\nfunction hasBadContrast(color) {\n  var standard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'aa';\n  var background = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#fff';\n  return getContrast(color, background) < guidelines[standard];\n}\n\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color, amount) {\n  return darken(color, -amount);\n}\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color, amount) {\n  var _parseToRgba = parseToRgba(color),\n    _parseToRgba2 = _slicedToArray(_parseToRgba, 4),\n    r = _parseToRgba2[0],\n    g = _parseToRgba2[1],\n    b = _parseToRgba2[2],\n    a = _parseToRgba2[3];\n  return rgba(r, g, b, a - amount);\n}\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color, amount) {\n  return transparentize(color, -amount);\n}\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color) {\n  return getLuminance(color) > 0.179;\n}\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color) {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color, amount) {\n  return desaturate(color, -amount);\n}\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color) {\n  var _parseToRgba = parseToRgba(color),\n    _parseToRgba2 = _slicedToArray(_parseToRgba, 4),\n    r = _parseToRgba2[0],\n    g = _parseToRgba2[1],\n    b = _parseToRgba2[2],\n    a = _parseToRgba2[3];\n  var hex = function hex(x) {\n    var h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color) {\n  return rgba.apply(void 0, _toConsumableArray(parseToRgba(color)));\n}\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color) {\n  return hsla.apply(void 0, _toConsumableArray(parseToHsla(color)));\n}\nexports.ColorError = ColorError$1;\nexports.adjustHue = adjustHue;\nexports.darken = darken;\nexports.desaturate = desaturate;\nexports.getContrast = getContrast;\nexports.getLuminance = getLuminance;\nexports.getScale = getScale;\nexports.guard = guard;\nexports.hasBadContrast = hasBadContrast;\nexports.hsla = hsla;\nexports.lighten = lighten;\nexports.mix = mix;\nexports.opacify = opacify;\nexports.parseToHsla = parseToHsla;\nexports.parseToRgba = parseToRgba;\nexports.readableColor = readableColor;\nexports.readableColorIsBlack = readableColorIsBlack;\nexports.rgba = rgba;\nexports.saturate = saturate;\nexports.toHex = toHex;\nexports.toHsla = toHsla;\nexports.toRgba = toRgba;\nexports.transparentize = transparentize;","map":{"version":3,"sources":["../src/guard.ts","../src/ColorError.ts","../src/parseToRgba.ts","../src/parseToHsla.ts","../src/hsla.ts","../src/adjustHue.ts","../src/darken.ts","../src/desaturate.ts","../src/getLuminance.ts","../src/getContrast.ts","../src/rgba.ts","../src/mix.ts","../src/getScale.ts","../src/hasBadContrast.ts","../src/lighten.ts","../src/transparentize.ts","../src/opacify.ts","../src/readableColorIsBlack.ts","../src/readableColor.ts","../src/saturate.ts","../src/toHex.ts","../src/toRgba.ts","../src/toHsla.ts"],"names":["guard","low","high","value","Math","min","max","ColorError","Error","color","_classCallCheck","parseToRgba","trim","toLowerCase","normalizedColor","namedColorRegex","test","nameToHex","reducedHexMatch","reducedHexRegex","exec","arr","Array","from","slice","map","x","parseInt","r","hexMatch","hexRegex","rgbaMatch","rgbaRegex","parseFloat","hslaMatch","hslaRegex","h","s","l","a","_Array$from$slice$map2","hslToRgb","Number","isNaN","hash","str","i","length","charCodeAt","colorToInt","replace","compressedColorMap","split","reduce","acc","next","key","substring","hex","toString","prefix","normalizedColorName","result","amount","join","RegExp","roundColor","round","hue","saturation","lightness","huePrime","chroma","abs","secondComponent","red","green","blue","lightnessModification","finalRed","finalGreen","finalBlue","parseToHsla","alpha","index","_parseToRgba$map2","delta","hsla","toFixed","adjustHue","degrees","_parseToHsla2","darken","desaturate","getLuminance","f","channel","pow","g","b","_parseToRgba2","getContrast","color1","color2","luminance1","luminance2","rgba","mix","weight","normalize","n","r1","g1","b1","a1","r2","g2","b2","a2","_parseToRgba$map4","alphaDelta","normalizedWeight","combinedWeight","weight2","weight1","getScale","colors","lastIndex","lowIndex","floor","highIndex","ceil","unit","guidelines","decorative","readable","aa","aaa","hasBadContrast","standard","background","lighten","transparentize","opacify","readableColorIsBlack","readableColor","saturate","toHex","toRgba","toHsla"],"mappings":"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","sourcesContent":["/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low: number, high: number, value: number): number {\n  return Math.min(Math.max(low, value), high);\n}\n\nexport default guard;\n","class ColorError extends Error {\n  constructor(color: string) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\n\nexport default ColorError;\n","import guard from './guard';\nimport ColorError from './ColorError';\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color: string): [number, number, number, number] {\n  if (typeof color !== 'string') throw new ColorError(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)),\n      parseInt(r(arr[3] || 'f', 2), 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 16)),\n      parseInt(arr[3] || 'ff', 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 10)),\n      parseFloat(arr[3] || '1'),\n    ] as [number, number, number, number];\n  }\n\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError(color);\n    if (guard(0, 100, l) !== l) throw new ColorError(color);\n    return [...hslToRgb(h, s, l), Number.isNaN(a) ? 1 : a] as [\n      number,\n      number,\n      number,\n      number\n    ];\n  }\n\n  throw new ColorError(color);\n}\n\nfunction hash(str: string) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\n\nconst colorToInt = (x: string) => parseInt(x.replace(/_/g, ''), 36);\n\nconst compressedColorMap =\n  '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'\n    .split(' ')\n    .reduce((acc, next) => {\n      const key = colorToInt(next.substring(0, 3));\n      const hex = colorToInt(next.substring(3)).toString(16);\n\n      // NOTE: padStart could be used here but it breaks Node 6 compat\n      // https://github.com/ricokahler/color2k/issues/351\n      let prefix = '';\n      for (let i = 0; i < 6 - hex.length; i++) {\n        prefix += '0';\n      }\n\n      acc[key] = `${prefix}${hex}`;\n      return acc;\n    }, {} as { [key: string]: string });\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color: string): string {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError(color);\n  return `#${result}`;\n}\n\nconst r = (str: string, amount: number) =>\n  Array.from(Array(amount))\n    .map(() => str)\n    .join('');\n\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(\n  `^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\n    ',\\\\s*(\\\\d+)\\\\s*',\n    2\n  )}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`,\n  'i'\n);\nconst hslaRegex =\n  /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\n\nconst roundColor = (color: number): number => {\n  return Math.round(color * 255);\n};\n\nconst hslToRgb = (\n  hue: number,\n  saturation: number,\n  lightness: number\n): [number, number, number] => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor) as [number, number, number];\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (((hue % 360) + 360) % 360) / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n\n  return [finalRed, finalGreen, finalBlue].map(roundColor) as [\n    number,\n    number,\n    number\n  ];\n};\n\nexport default parseToRgba;\n","// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\nimport parseToRgba from './parseToRgba';\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color: string): [number, number, number, number] {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? value : value / 255\n  );\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n\n  const delta = max - min;\n  const saturation =\n    lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  const hue =\n    60 *\n    (red === max\n      ? (green - blue) / delta + (green < blue ? 6 : 0)\n      : green === max\n      ? (blue - red) / delta + 2\n      : (red - green) / delta + 4);\n\n  return [hue, saturation, lightness, alpha];\n}\n\nexport default parseToHsla;\n","import guard from './guard';\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number\n): string {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(\n    0,\n    100,\n    saturation * 100\n  ).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default hsla;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color: string, degrees: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h + degrees, s, l, a);\n}\n\nexport default adjustHue;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color: string, amount: number): string {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\nexport default darken;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color: string, amount: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h, s - amount, l, a);\n}\n\nexport default desaturate;\n","import parseToRgba from './parseToRgba';\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color: string): number {\n  if (color === 'transparent') return 0;\n\n  function f(x: number) {\n    const channel = x / 255;\n    return channel <= 0.04045\n      ? channel / 12.92\n      : Math.pow(((channel + 0.055) / 1.055), 2.4);\n  }\n\n  const [r, g, b] = parseToRgba(color);\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\nexport default getLuminance;\n","// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\nimport getLuminance from './getLuminance';\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1: string, color2: string): number {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n\n  return luminance1 > luminance2\n    ? (luminance1 + 0.05) / (luminance2 + 0.05)\n    : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\nexport default getContrast;\n","import guard from './guard';\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red: number, green: number, blue: number, alpha: number): string {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(\n    0,\n    255,\n    green\n  ).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default rgba;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1: string, color2: string, weight: number): string {\n  const normalize = (n: number, index: number) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? n : n / 255;\n\n  const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n  const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = a2 - a1;\n  const normalizedWeight = weight * 2 - 1;\n  const combinedWeight =\n    normalizedWeight * alphaDelta === -1\n      ? normalizedWeight\n      : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  const weight2 = (combinedWeight + 1) / 2;\n  const weight1 = 1 - weight2;\n\n  const r = (r1 * weight1 + r2 * weight2) * 255;\n  const g = (g1 * weight1 + g2 * weight2) * 255;\n  const b = (b1 * weight1 + b2 * weight2) * 255;\n  const a = a2 * weight + a1 * (1 - weight);\n\n  return rgba(r, g, b, a);\n}\n\nexport default mix;\n","import mix from './mix';\nimport guard from './guard';\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale(...colors: string[]): (n: number) => string {\n  return (n) => {\n    const lastIndex = colors.length - 1;\n    const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n\n    const color1 = colors[lowIndex];\n    const color2 = colors[highIndex];\n\n    const unit = 1 / lastIndex;\n    const weight = (n - unit * lowIndex) / unit;\n\n    return mix(color1, color2, weight);\n  };\n}\n\nexport default getScale;\n","import getContrast from './getContrast';\n\nconst guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7,\n};\n\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */\nfunction hasBadContrast(\n  color: string,\n  standard: 'decorative' | 'readable' | 'aa' | 'aaa' = 'aa',\n  background: string = '#fff'\n): boolean {\n  return getContrast(color, background) < guidelines[standard];\n}\n\nexport default hasBadContrast;\n","import darken from './darken';\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color: string, amount: number): string {\n  return darken(color, -amount);\n}\n\nexport default lighten;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color: string, amount: number): string {\n  const [r, g, b, a] = parseToRgba(color);\n  return rgba(r, g, b, a - amount);\n}\n\nexport default transparentize;\n","import transparentize from './transparentize';\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color: string, amount: number): string {\n  return transparentize(color, -amount);\n}\n\nexport default opacify;\n","import getLuminance from './getLuminance';\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color: string): boolean {\n  return getLuminance(color) > 0.179;\n}\n\nexport default readableColorIsBlack;\n","import readableColorIsBlack from './readableColorIsBlack';\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color: string): string {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\nexport default readableColor;\n","import desaturate from './desaturate';\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color: string, amount: number): string {\n  return desaturate(color, -amount);\n}\n\nexport default saturate;\n","import parseToRgba from './parseToRgba';\nimport guard from './guard';\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color: string): string {\n  const [r, g, b, a] = parseToRgba(color);\n\n  let hex = (x: number) => {\n    const h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\nexport default toHex;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color: string): string {\n  return rgba(...parseToRgba(color));\n}\n\nexport default toRgba;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color: string): string {\n  return hsla(...parseToHsla(color));\n}\n\nexport default toHsla;\n"]},"metadata":{},"sourceType":"script"}