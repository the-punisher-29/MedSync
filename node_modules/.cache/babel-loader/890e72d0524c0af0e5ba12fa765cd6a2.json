{"ast":null,"code":"import * as React from \"react\";\nimport { getBox } from \"@chakra-ui/utils\";\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\";\n/**\n * Reack hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n */\n\nexport function useDimensions(ref, observe) {\n  var [dimensions, setDimensions] = React.useState(null);\n  var rafId = React.useRef();\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return undefined;\n    var node = ref.current;\n    function measure() {\n      rafId.current = requestAnimationFrame(() => {\n        var boxModel = getBox(node);\n        setDimensions(boxModel);\n      });\n    }\n    measure();\n    if (observe) {\n      window.addEventListener(\"resize\", measure);\n      window.addEventListener(\"scroll\", measure);\n    }\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure);\n        window.removeEventListener(\"scroll\", measure);\n      }\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [observe]);\n  return dimensions;\n}","map":{"version":3,"sources":["../../src/use-dimensions.ts"],"names":["React","getBox","useSafeLayoutEffect","useDimensions","ref","observe","dimensions","setDimensions","useState","rafId","useRef","current","undefined","node","measure","requestAnimationFrame","boxModel","window","addEventListener","removeEventListener","cancelAnimationFrame"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAiC,kBAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CACLC,GADK,EAELC,OAFK,EAGL;EACA,IAAM,CAACC,UAAD,EAAaC,aAAb,CAAA,GAA8BP,KAAK,CAACQ,QAANR,CAAgC,IAAhCA,CAApC;EACA,IAAMS,KAAK,GAAGT,KAAK,CAACU,MAANV,CAAAA,CAAd;EAEAE,mBAAmB,CAAC,MAAM;IACxB,IAAI,CAACE,GAAG,CAACO,OAAT,EAAkB,OAAOC,SAAP;IAElB,IAAMC,IAAI,GAAGT,GAAG,CAACO,OAAjB;IAEA,SAASG,OAAT,CAAA,EAAmB;MACjBL,KAAK,CAACE,OAANF,GAAgBM,qBAAqB,CAAC,MAAM;QAC1C,IAAMC,QAAQ,GAAGf,MAAM,CAACY,IAAD,CAAvB;QACAN,aAAa,CAACS,QAAD,CAAbT;MACD,CAHoC,CAArCE;IAID;IAEDK,OAAO,CAAA,CAAA;IAEP,IAAIT,OAAJ,EAAa;MACXY,MAAM,CAACC,gBAAPD,CAAwB,QAAxBA,EAAkCH,OAAlCG,CAAAA;MACAA,MAAM,CAACC,gBAAPD,CAAwB,QAAxBA,EAAkCH,OAAlCG,CAAAA;IACD;IAED,OAAO,MAAM;MACX,IAAIZ,OAAJ,EAAa;QACXY,MAAM,CAACE,mBAAPF,CAA2B,QAA3BA,EAAqCH,OAArCG,CAAAA;QACAA,MAAM,CAACE,mBAAPF,CAA2B,QAA3BA,EAAqCH,OAArCG,CAAAA;MACD;MAED,IAAIR,KAAK,CAACE,OAAV,EAAmB;QACjBS,oBAAoB,CAACX,KAAK,CAACE,OAAP,CAApBS;MACD;IACF,CATD;EAUD,CA7BkB,EA6BhB,CAACf,OAAD,CA7BgB,CAAnBH;EA+BA,OAAOI,UAAP;AACD","sourcesContent":["import * as React from \"react\"\nimport { getBox, BoxModel } from \"@chakra-ui/utils\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * Reack hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n */\nexport function useDimensions(\n  ref: React.RefObject<HTMLElement>,\n  observe?: boolean,\n) {\n  const [dimensions, setDimensions] = React.useState<BoxModel | null>(null)\n  const rafId = React.useRef<number>()\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return undefined\n\n    const node = ref.current\n\n    function measure() {\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node)\n        setDimensions(boxModel)\n      })\n    }\n\n    measure()\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure)\n      window.addEventListener(\"scroll\", measure)\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure)\n        window.removeEventListener(\"scroll\", measure)\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [observe])\n\n  return dimensions\n}\n"]},"metadata":{},"sourceType":"module"}