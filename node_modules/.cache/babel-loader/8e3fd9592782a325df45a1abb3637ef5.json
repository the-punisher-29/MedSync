{"ast":null,"code":"import * as React from \"react\";\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name\n  } = options;\n  var Context = /*#__PURE__*/React.createContext(undefined);\n  Context.displayName = name;\n  function useContext() {\n    var context = React.useContext(Context);\n    if (!context && strict) {\n      var error = new Error(errorMessage);\n      error.name = \"ContextError\";\n      Error.captureStackTrace == null ? void 0 : Error.captureStackTrace(error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext, Context];\n}","map":{"version":3,"sources":["../../src/context.ts"],"names":["React","createContext","options","strict","errorMessage","name","Context","undefined","displayName","useContext","context","error","Error","captureStackTrace","Provider"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAoBA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAT,CAAoCC,OAApC,EAAwE;EAAA,IAApCA,OAAoC,KAAA,KAAA,CAAA,EAAA;IAApCA,OAAoC,GAAJ,CAAA,CAAI;EAAA;EAC7E,IAAM;IACJC,MAAM,GAAG,IADL;IAEJC,YAAY,GAAG,4FAFX;IAGJC;EAHI,CAAA,GAIFH,OAJJ;EAMA,IAAMI,OAAO,GAAA,aAAGN,KAAK,CAACC,aAAND,CAA6CO,SAA7CP,CAAhB;EAEAM,OAAO,CAACE,WAARF,GAAsBD,IAAtBC;EAEA,SAASG,UAAT,CAAA,EAAsB;IACpB,IAAMC,OAAO,GAAGV,KAAK,CAACS,UAANT,CAAiBM,OAAjBN,CAAhB;IAEA,IAAI,CAACU,OAAD,IAAYP,MAAhB,EAAwB;MACtB,IAAMQ,KAAK,GAAG,IAAIC,KAAJ,CAAUR,YAAV,CAAd;MACAO,KAAK,CAACN,IAANM,GAAa,cAAbA;MACAC,KAAK,CAACC,iBAAND,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAK,CAACC,iBAAND,CAA0BD,KAA1BC,EAAiCH,UAAjCG,CAAAA;MACA,MAAMD,KAAN;IACD;IAED,OAAOD,OAAP;EACD;EAED,OAAO,CACLJ,OAAO,CAACQ,QADH,EAELL,UAFK,EAGLH,OAHK,CAAP;AAKD","sourcesContent":["import * as React from \"react\"\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  /**\n   * Error message to throw if the context is `undefined`\n   */\n  errorMessage?: string\n  /**\n   * The display name of the context\n   */\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext<ContextType>(options: CreateContextOptions = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n\n    if (!context && strict) {\n      const error = new Error(errorMessage)\n      error.name = \"ContextError\"\n      Error.captureStackTrace?.(error, useContext)\n      throw error\n    }\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n"]},"metadata":{},"sourceType":"module"}