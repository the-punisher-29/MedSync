{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { popperCSSVars } from \"@chakra-ui/popper\";\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig, useTheme } from \"@chakra-ui/system\";\nimport { isString, omit, pick, __DEV__, getCSSVar } from \"@chakra-ui/utils\";\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { scale } from \"./tooltip.transition\";\nimport { useTooltip } from \"./use-tooltip\";\nvar StyledTooltip = chakra(motion.div);\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\n\nexport var Tooltip = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyleConfig(\"Tooltip\", props);\n  var ownProps = omitThemingProps(props);\n  var theme = useTheme();\n  var {\n      children,\n      label,\n      shouldWrapChildren,\n      \"aria-label\": ariaLabel,\n      hasArrow,\n      bg,\n      portalProps\n    } = ownProps,\n    rest = _objectWithoutPropertiesLoose(ownProps, [\"children\", \"label\", \"shouldWrapChildren\", \"aria-label\", \"hasArrow\", \"bg\", \"portalProps\"]);\n  if (bg) {\n    styles.bg = bg;\n    styles[popperCSSVars.arrowBg.var] = getCSSVar(theme, \"colors\", bg);\n  }\n  var tooltip = useTooltip(_extends({}, rest, {\n    direction: theme.direction\n  }));\n  var shouldWrap = isString(children) || shouldWrapChildren;\n  var trigger;\n  if (shouldWrap) {\n    trigger = /*#__PURE__*/React.createElement(chakra.span, _extends({\n      tabIndex: 0\n    }, tooltip.getTriggerProps()), children);\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    var child = React.Children.only(children);\n    trigger = /*#__PURE__*/React.cloneElement(child, tooltip.getTriggerProps(child.props, child.ref));\n  }\n  var hasAriaLabel = !!ariaLabel;\n  var _tooltipProps = tooltip.getTooltipProps({}, ref);\n  var tooltipProps = hasAriaLabel ? omit(_tooltipProps, [\"role\", \"id\"]) : _tooltipProps;\n  var hiddenProps = pick(_tooltipProps, [\"role\", \"id\"]);\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n\n  if (!label) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, trigger, /*#__PURE__*/React.createElement(AnimatePresence, null, tooltip.isOpen && /*#__PURE__*/React.createElement(Portal, portalProps, /*#__PURE__*/React.createElement(chakra.div, _extends({}, tooltip.getTooltipPositionerProps(), {\n    __css: {\n      zIndex: styles.zIndex,\n      pointerEvents: \"none\"\n    }\n  }), /*#__PURE__*/React.createElement(StyledTooltip, _extends({\n    variants: scale\n  }, tooltipProps, {\n    initial: \"exit\",\n    animate: \"enter\",\n    exit: \"exit\",\n    __css: styles\n  }), label, hasAriaLabel && /*#__PURE__*/React.createElement(VisuallyHidden, hiddenProps, ariaLabel), hasArrow && /*#__PURE__*/React.createElement(chakra.div, {\n    \"data-popper-arrow\": true,\n    className: \"chakra-tooltip__arrow-wrapper\"\n  }, /*#__PURE__*/React.createElement(chakra.div, {\n    \"data-popper-arrow-inner\": true,\n    className: \"chakra-tooltip__arrow\",\n    __css: {\n      bg: styles.bg\n    }\n  })))))));\n});\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\";\n}","map":{"version":3,"sources":["../../src/tooltip.tsx"],"names":["popperCSSVars","Portal","chakra","forwardRef","omitThemingProps","useStyleConfig","useTheme","isString","omit","pick","__DEV__","getCSSVar","VisuallyHidden","AnimatePresence","motion","React","scale","useTooltip","StyledTooltip","div","Tooltip","props","ref","styles","ownProps","theme","children","label","shouldWrapChildren","ariaLabel","hasArrow","bg","portalProps","rest","arrowBg","var","tooltip","direction","shouldWrap","trigger","getTriggerProps","child","Children","only","cloneElement","hasAriaLabel","_tooltipProps","getTooltipProps","tooltipProps","hiddenProps","isOpen","getTooltipPositionerProps","zIndex","pointerEvents","displayName"],"mappings":"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","sourcesContent":["import { popperCSSVars } from \"@chakra-ui/popper\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { isString, omit, pick, __DEV__, getCSSVar } from \"@chakra-ui/utils\"\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { scale } from \"./tooltip.transition\"\nimport { useTooltip, UseTooltipProps } from \"./use-tooltip\"\n\nexport interface TooltipProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Tooltip\">,\n    UseTooltipProps {\n  /**\n   * The react component to use as the\n   * trigger for the tooltip\n   */\n  children: React.ReactNode\n  /**\n   * The label of the tooltip\n   */\n  label?: React.ReactNode\n  /**\n   * The accessible, human friendly label to use for\n   * screen readers.\n   *\n   * If passed, tooltip will show the content `label`\n   * but expose only `aria-label` to assistive technologies\n   */\n  \"aria-label\"?: string\n  /**\n   * If `true`, the tooltip will wrap its children\n   * in a `<span/>` with `tabIndex=0`\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true`, the tooltip will show an arrow tip\n   */\n  hasArrow?: boolean\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n}\n\nconst StyledTooltip = chakra(motion.div)\n\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\nexport const Tooltip = forwardRef<TooltipProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Tooltip\", props)\n  const ownProps = omitThemingProps(props)\n  const theme = useTheme()\n\n  const {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    bg,\n    portalProps,\n    ...rest\n  } = ownProps\n\n  if (bg) {\n    styles.bg = bg\n    styles[popperCSSVars.arrowBg.var] = getCSSVar(theme, \"colors\", bg)\n  }\n\n  const tooltip = useTooltip({ ...rest, direction: theme.direction })\n\n  const shouldWrap = isString(children) || shouldWrapChildren\n\n  let trigger: React.ReactElement\n\n  if (shouldWrap) {\n    trigger = (\n      <chakra.span tabIndex={0} {...tooltip.getTriggerProps()}>\n        {children}\n      </chakra.span>\n    )\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    const child = React.Children.only(children) as React.ReactElement & {\n      ref?: React.Ref<any>\n    }\n    trigger = React.cloneElement(\n      child,\n      tooltip.getTriggerProps(child.props, child.ref),\n    )\n  }\n\n  const hasAriaLabel = !!ariaLabel\n\n  const _tooltipProps = tooltip.getTooltipProps({}, ref)\n\n  const tooltipProps = hasAriaLabel\n    ? omit(_tooltipProps, [\"role\", \"id\"])\n    : _tooltipProps\n\n  const hiddenProps = pick(_tooltipProps, [\"role\", \"id\"])\n\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n  if (!label) {\n    return <>{children}</>\n  }\n\n  return (\n    <>\n      {trigger}\n      <AnimatePresence>\n        {tooltip.isOpen && (\n          <Portal {...portalProps}>\n            <chakra.div\n              {...tooltip.getTooltipPositionerProps()}\n              __css={{\n                zIndex: styles.zIndex,\n                pointerEvents: \"none\",\n              }}\n            >\n              <StyledTooltip\n                variants={scale}\n                {...(tooltipProps as any)}\n                initial=\"exit\"\n                animate=\"enter\"\n                exit=\"exit\"\n                __css={styles}\n              >\n                {label}\n                {hasAriaLabel && (\n                  <VisuallyHidden {...hiddenProps}>{ariaLabel}</VisuallyHidden>\n                )}\n                {hasArrow && (\n                  <chakra.div\n                    data-popper-arrow\n                    className=\"chakra-tooltip__arrow-wrapper\"\n                  >\n                    <chakra.div\n                      data-popper-arrow-inner\n                      className=\"chakra-tooltip__arrow\"\n                      __css={{ bg: styles.bg }}\n                    />\n                  </chakra.div>\n                )}\n              </StyledTooltip>\n            </chakra.div>\n          </Portal>\n        )}\n      </AnimatePresence>\n    </>\n  )\n})\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\"\n}\n"]},"metadata":{},"sourceType":"module"}