{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef, tokenToCSSVar } from \"@chakra-ui/system\";\nimport { cx, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport var Wrap = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      spacing = \"0.5rem\",\n      children,\n      justify,\n      direction,\n      align,\n      className,\n      shouldWrapChildren\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"spacing\", \"children\", \"justify\", \"direction\", \"align\", \"className\", \"shouldWrapChildren\"]);\n  var styles = React.useMemo(() => ({\n    \"--chakra-wrap-spacing\": theme => mapResponsive(spacing, value => tokenToCSSVar(\"space\", value)(theme)),\n    \"--wrap-spacing\": \"calc(var(--chakra-wrap-spacing) / 2)\",\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: justify,\n    alignItems: align,\n    flexDirection: direction,\n    listStyleType: \"none\",\n    padding: \"0\",\n    margin: \"calc(var(--wrap-spacing) * -1)\",\n    \"& > *:not(style)\": {\n      margin: \"var(--wrap-spacing)\"\n    }\n  }), [spacing, justify, align, direction]);\n  var childrenToRender = shouldWrapChildren ? React.Children.map(children, (child, index) => /*#__PURE__*/React.createElement(WrapItem, {\n    key: index\n  }, child)) : children;\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-wrap\", className)\n  }, rest), /*#__PURE__*/React.createElement(chakra.ul, {\n    className: \"chakra-wrap__list\",\n    __css: styles\n  }, childrenToRender));\n});\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\";\n}\nexport var WrapItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      className\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n  return /*#__PURE__*/React.createElement(chakra.li, _extends({\n    ref: ref,\n    __css: {\n      display: \"flex\",\n      alignItems: \"flex-start\"\n    },\n    className: cx(\"chakra-wrap__listitem\", className)\n  }, rest));\n});\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\";\n}","map":{"version":3,"sources":["../../src/wrap.tsx"],"names":["chakra","forwardRef","tokenToCSSVar","cx","mapResponsive","__DEV__","React","Wrap","props","ref","spacing","children","justify","direction","align","className","shouldWrapChildren","rest","styles","useMemo","theme","value","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","padding","margin","childrenToRender","Children","map","child","index","displayName","WrapItem"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n  tokenToCSSVar,\n} from \"@chakra-ui/system\"\nimport { cx, Dict, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between the each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">((props, ref) => {\n  const {\n    spacing = \"0.5rem\",\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const styles = React.useMemo(\n    () => ({\n      \"--chakra-wrap-spacing\": (theme: Dict) =>\n        mapResponsive(spacing, (value) => tokenToCSSVar(\"space\", value)(theme)),\n      \"--wrap-spacing\": \"calc(var(--chakra-wrap-spacing) / 2)\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: justify,\n      alignItems: align,\n      flexDirection: direction,\n      listStyleType: \"none\",\n      padding: \"0\",\n      margin: \"calc(var(--wrap-spacing) * -1)\",\n      \"& > *:not(style)\": {\n        margin: \"var(--wrap-spacing)\",\n      },\n    }),\n    [spacing, justify, align, direction],\n  )\n\n  const childrenToRender = shouldWrapChildren\n    ? React.Children.map(children, (child, index) => (\n        <WrapItem key={index}>{child}</WrapItem>\n      ))\n    : children\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul className=\"chakra-wrap__list\" __css={styles}>\n        {childrenToRender}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\"\n}\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">((props, ref) => {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\"\n}\n"]},"metadata":{},"sourceType":"module"}