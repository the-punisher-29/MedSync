{"ast":null,"code":"export function isDecimal(value) {\n  return !Number.isInteger(parseFloat(value.toString()));\n}\nfunction replaceWhiteSpace(value, replaceValue) {\n  if (replaceValue === void 0) {\n    replaceValue = \"-\";\n  }\n  return value.replace(/\\s+/g, replaceValue);\n}\nfunction escape(value) {\n  var valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  return isDecimal(value) ? valueStr.replace(\".\", \"\\\\.\") : value;\n}\nexport function addPrefix(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n  return [prefix, escape(value)].filter(Boolean).join(\"-\");\n}\nexport function toVarRef(name, fallback) {\n  return \"var(\" + escape(name) + (fallback ? \", \" + fallback : \"\") + \")\";\n}\nexport function toVar(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n  return \"--\" + addPrefix(value, prefix);\n}\nexport function cssVar(name, options) {\n  var cssVariable = toVar(name, options == null ? void 0 : options.prefix);\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))\n  };\n}\nfunction getFallback(fallback) {\n  if (typeof fallback === \"string\") return fallback;\n  return fallback == null ? void 0 : fallback.reference;\n}","map":{"version":3,"sources":["../../src/css-var.ts"],"names":["isDecimal","value","Number","isInteger","parseFloat","toString","replaceWhiteSpace","replaceValue","replace","escape","valueStr","includes","addPrefix","prefix","filter","Boolean","join","toVarRef","name","fallback","toVar","cssVar","options","cssVariable","variable","reference","getFallback"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA+B;EACpC,OAAO,CAACC,MAAM,CAACC,SAAPD,CAAiBE,UAAU,CAACH,KAAK,CAACI,QAANJ,CAAAA,CAAD,CAA3BC,CAAR;AACD;AAED,SAASI,iBAAT,CAA2BL,KAA3B,EAA0CM,YAA1C,EAA8D;EAAA,IAApBA,YAAoB,KAAA,KAAA,CAAA,EAAA;IAApBA,YAAoB,GAAL,GAAK;EAAA;EAC5D,OAAON,KAAK,CAACO,OAANP,CAAc,MAAdA,EAAsBM,YAAtBN,CAAP;AACD;AAED,SAASQ,MAAT,CAAgBR,KAAhB,EAAwC;EACtC,IAAMS,QAAQ,GAAGJ,iBAAiB,CAACL,KAAK,CAACI,QAANJ,CAAAA,CAAD,CAAlC;EACA,IAAIS,QAAQ,CAACC,QAATD,CAAkB,KAAlBA,CAAJ,EAA8B,OAAOT,KAAP;EAC9B,OAAOD,SAAS,CAACC,KAAD,CAATD,GAAmBU,QAAQ,CAACF,OAATE,CAAiB,GAAjBA,EAAAA,KAAAA,CAAnBV,GAAkDC,KAAzD;AACD;AAED,OAAO,SAASW,SAAT,CAAmBX,KAAnB,EAAkCY,MAAlC,EAA+C;EAAA,IAAbA,MAAa,KAAA,KAAA,CAAA,EAAA;IAAbA,MAAa,GAAJ,EAAI;EAAA;EACpD,OAAO,CAACA,MAAD,EAASJ,MAAM,CAACR,KAAD,CAAf,CAAA,CAAwBa,MAAxB,CAA+BC,OAA/B,CAAA,CAAwCC,IAAxC,CAA6C,GAA7C,CAAP;AACD;AAED,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAgCC,QAAhC,EAAmD;EACxD,OAAA,MAAA,GAAcV,MAAM,CAACS,IAAD,CAApB,IAA6BC,QAAQ,GAAA,IAAA,GAAQA,QAAR,GAAqB,EAA1D,CAAA,GAAA,GAAA;AACD;AAED,OAAO,SAASC,KAAT,CAAenB,KAAf,EAA8BY,MAA9B,EAA2C;EAAA,IAAbA,MAAa,KAAA,KAAA,CAAA,EAAA;IAAbA,MAAa,GAAJ,EAAI;EAAA;EAChD,OAAA,IAAA,GAAYD,SAAS,CAACX,KAAD,EAAQY,MAAR,CAArB;AACD;AAYD,OAAO,SAASQ,MAAT,CAAgBH,IAAhB,EAA8BI,OAA9B,EAAuD;EAC5D,IAAMC,WAAW,GAAGH,KAAK,CAACF,IAAD,EAAOI,OAAP,IAAA,IAAA,GAAA,KAAA,CAAA,GAAOA,OAAO,CAAET,MAAhB,CAAzB;EACA,OAAO;IACLW,QAAQ,EAAED,WADL;IAELE,SAAS,EAAER,QAAQ,CAACM,WAAD,EAAcG,WAAW,CAACJ,OAAD,IAAA,IAAA,GAAA,KAAA,CAAA,GAACA,OAAO,CAAEH,QAAV,CAAzB;EAFd,CAAP;AAID;AAED,SAASO,WAAT,CAAqBP,QAArB,EAAiD;EAC/C,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC,OAAOA,QAAP;EAClC,OAAOA,QAAP,IAAA,IAAA,GAAA,KAAA,CAAA,GAAOA,QAAQ,CAAEM,SAAjB;AACD","sourcesContent":["export function isDecimal(value: any) {\n  return !Number.isInteger(parseFloat(value.toString()))\n}\n\nfunction replaceWhiteSpace(value: string, replaceValue = \"-\") {\n  return value.replace(/\\s+/g, replaceValue)\n}\n\nfunction escape(value: string | number) {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  return isDecimal(value) ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport function addPrefix(value: string, prefix = \"\") {\n  return [prefix, escape(value)].filter(Boolean).join(\"-\")\n}\n\nexport function toVarRef(name: string, fallback?: string) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`\n}\n\nexport function toVar(value: string, prefix = \"\") {\n  return `--${addPrefix(value, prefix)}`\n}\n\nexport type CSSVar = {\n  variable: string\n  reference: string\n}\n\nexport type CSSVarOptions = {\n  fallback?: string | CSSVar\n  prefix?: string\n}\n\nexport function cssVar(name: string, options?: CSSVarOptions) {\n  const cssVariable = toVar(name, options?.prefix)\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options?.fallback)),\n  }\n}\n\nfunction getFallback(fallback?: string | CSSVar) {\n  if (typeof fallback === \"string\") return fallback\n  return fallback?.reference\n}\n"]},"metadata":{},"sourceType":"module"}