{"ast":null,"code":"import * as React from \"react\";\nfunction setScript(initialValue) {\n  var mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  var systemPreference = mql.matches ? \"dark\" : \"light\";\n  var persistedPreference;\n  try {\n    persistedPreference = localStorage.getItem(\"chakra-ui-color-mode\");\n  } catch (error) {\n    console.log(\"Chakra UI: localStorage is not available. Color mode persistence might not work as expected\");\n  }\n  var isInStorage = typeof persistedPreference === \"string\";\n  var colorMode;\n  if (isInStorage) {\n    colorMode = persistedPreference;\n  } else {\n    colorMode = initialValue === \"system\" ? systemPreference : initialValue;\n  }\n  if (colorMode) {\n    var root = document.documentElement;\n    root.style.setProperty(\"--chakra-ui-color-mode\", colorMode);\n  }\n}\n\n/**\n * Script to add to the root of your application when using localStorage,\n * to help prevent flash of color mode that can happen during page load.\n */\nexport var ColorModeScript = props => {\n  var {\n    initialColorMode = \"light\"\n  } = props;\n  var html = \"(\" + String(setScript) + \")('\" + initialColorMode + \"')\";\n  return /*#__PURE__*/React.createElement(\"script\", {\n    nonce: props.nonce,\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  });\n};","map":{"version":3,"sources":["../../src/color-mode-script.tsx"],"names":["React","setScript","initialValue","mql","window","matchMedia","systemPreference","matches","persistedPreference","localStorage","getItem","error","console","log","isInStorage","colorMode","root","document","documentElement","style","setProperty","ColorModeScript","props","initialColorMode","html","String","nonce","__html"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAKA,SAASC,SAAT,CAAmBC,YAAnB,EAAuC;EACrC,IAAMC,GAAG,GAAGC,MAAM,CAACC,UAAPD,CAAkB,8BAAlBA,CAAZ;EACA,IAAME,gBAAgB,GAAGH,GAAG,CAACI,OAAJJ,GAAc,MAAdA,GAAuB,OAAhD;EAEA,IAAIK,mBAAJ;EAEA,IAAI;IACFA,mBAAmB,GAAGC,YAAY,CAACC,OAAbD,CAAqB,sBAArBA,CAAtBD;EACD,CAFD,CAEE,OAAOG,KAAP,EAAc;IACdC,OAAO,CAACC,GAARD,CACE,6FADFA,CAAAA;EAGD;EAED,IAAME,WAAW,GAAG,OAAON,mBAAP,KAA+B,QAAnD;EAEA,IAAIO,SAAJ;EAEA,IAAID,WAAJ,EAAiB;IACfC,SAAS,GAAGP,mBAAZO;EACD,CAFD,MAEO;IACLA,SAAS,GAAGb,YAAY,KAAK,QAAjBA,GAA4BI,gBAA5BJ,GAA+CA,YAA3Da;EACD;EAED,IAAIA,SAAJ,EAAe;IACb,IAAMC,IAAI,GAAGC,QAAQ,CAACC,eAAtB;IACAF,IAAI,CAACG,KAALH,CAAWI,WAAXJ,CAAuB,wBAAvBA,EAAiDD,SAAjDC,CAAAA;EACD;AACF;;AAUD;AACA;AACA;AACA;AACA,OAAO,IAAMK,eAAe,GAAIC,KAAD,IAAiC;EAC9D,IAAM;IAAEC,gBAAgB,GAAG;EAArB,CAAA,GAAiCD,KAAvC;EACA,IAAME,IAAI,GAAA,GAAA,GAAOC,MAAM,CAACxB,SAAD,CAAb,GAAA,KAAA,GAA8BsB,gBAA9B,GAAA,IAAV;EACA,OAAA,aACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;IAAQ,KAAK,EAAED,KAAK,CAACI,KAArB;IAA4B,uBAAuB,EAAE;MAAEC,MAAM,EAAEH;IAAV;EAArD,CAAA,CADF;AAGD,CANM","sourcesContent":["import * as React from \"react\"\nimport { ColorMode } from \"./color-mode-provider\"\n\ntype Mode = ColorMode | \"system\" | undefined\n\nfunction setScript(initialValue: Mode) {\n  const mql = window.matchMedia(\"(prefers-color-scheme: dark)\")\n  const systemPreference = mql.matches ? \"dark\" : \"light\"\n\n  let persistedPreference: Mode\n\n  try {\n    persistedPreference = localStorage.getItem(\"chakra-ui-color-mode\") as Mode\n  } catch (error) {\n    console.log(\n      \"Chakra UI: localStorage is not available. Color mode persistence might not work as expected\",\n    )\n  }\n\n  const isInStorage = typeof persistedPreference === \"string\"\n\n  let colorMode: Mode\n\n  if (isInStorage) {\n    colorMode = persistedPreference\n  } else {\n    colorMode = initialValue === \"system\" ? systemPreference : initialValue\n  }\n\n  if (colorMode) {\n    const root = document.documentElement\n    root.style.setProperty(\"--chakra-ui-color-mode\", colorMode)\n  }\n}\n\ninterface ColorModeScriptProps {\n  initialColorMode?: Mode\n  /**\n   * Optional nonce that will be passed to the created `<script>` tag.\n   */\n  nonce?: string\n}\n\n/**\n * Script to add to the root of your application when using localStorage,\n * to help prevent flash of color mode that can happen during page load.\n */\nexport const ColorModeScript = (props: ColorModeScriptProps) => {\n  const { initialColorMode = \"light\" } = props\n  const html = `(${String(setScript)})('${initialColorMode}')`\n  return (\n    <script nonce={props.nonce} dangerouslySetInnerHTML={{ __html: html }} />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}