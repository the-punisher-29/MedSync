{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useBoolean, useId } from \"@chakra-ui/hooks\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nvar [FormControlProvider, useFormControlContext] = createContext({\n  strict: false,\n  name: \"FormControlContext\"\n});\nexport { useFormControlContext };\nfunction useFormControlProvider(props) {\n  var {\n      id: idProp,\n      isRequired,\n      isInvalid,\n      isDisabled,\n      isReadOnly\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"id\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isReadOnly\"]); // Generate all the required ids\n\n  var uuid = useId();\n  var id = idProp || \"field-\" + uuid;\n  var labelId = id + \"-label\";\n  var feedbackId = id + \"-feedback\";\n  var helpTextId = id + \"-helptext\";\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n\n  var [hasFeedbackText, setHasFeedbackText] = React.useState(false);\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n\n  var [hasHelpText, setHasHelpText] = React.useState(false); // Track whether the form element (e.g, `input`) has focus.\n\n  var [isFocused, setFocus] = useBoolean();\n  var getHelpTextProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({\n      id: helpTextId\n    }, props, {\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setHasHelpText(true);\n      })\n    });\n  }, [helpTextId]);\n  var getLabelProps = React.useCallback(function (props, forwardedRef) {\n    var _props$id, _props$htmlFor;\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: (_props$id = props.id) != null ? _props$id : labelId,\n      htmlFor: (_props$htmlFor = props.htmlFor) != null ? _props$htmlFor : id\n    });\n  }, [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]);\n  var getErrorMessageProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({\n      id: feedbackId\n    }, props, {\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setHasFeedbackText(true);\n      }),\n      \"aria-live\": \"polite\"\n    });\n  }, [feedbackId]);\n  var getRootProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, props, htmlProps, {\n      ref: forwardedRef,\n      role: \"group\"\n    });\n  }, [htmlProps]);\n  var getRequiredIndicatorProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, props, {\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\"\n    });\n  }, []);\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps\n  };\n}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport var FormControl = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Form\", props);\n  var ownProps = omitThemingProps(props);\n  var _useFormControlProvid = useFormControlProvider(ownProps),\n    {\n      getRootProps\n    } = _useFormControlProvid,\n    context = _objectWithoutPropertiesLoose(_useFormControlProvid, [\"getRootProps\", \"htmlProps\"]);\n  var className = cx(\"chakra-form-control\", props.className);\n  var contextValue = React.useMemo(() => context, [context]);\n  return /*#__PURE__*/React.createElement(FormControlProvider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, getRootProps({}, ref), {\n    className: className,\n    __css: styles[\"container\"]\n  }))));\n});\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\";\n}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport var FormHelperText = /*#__PURE__*/forwardRef((props, ref) => {\n  var field = useFormControlContext();\n  var styles = useStyles();\n  var className = cx(\"chakra-form__helper-text\", props.className);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, field == null ? void 0 : field.getHelpTextProps(props, ref), {\n    __css: styles.helperText,\n    className: className\n  }));\n});\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\";\n}","map":{"version":3,"sources":["../../src/form-control.tsx"],"names":["useBoolean","useId","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","dataAttr","__DEV__","createContext","mergeRefs","React","FormControlProvider","useFormControlContext","strict","name","useFormControlProvider","props","id","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","useState","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","ref","node","getLabelProps","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","children","onFocus","on","onBlur","off","FormControl","styles","ownProps","context","className","contextValue","useMemo","displayName","FormHelperText","field","helperText"],"mappings":"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","sourcesContent":["import { useBoolean, useId } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\"\nimport {\n  createContext,\n  mergeRefs,\n  PropGetter,\n  PropGetterV2,\n} from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<FormControlProviderContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const getHelpTextProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = React.useCallback<PropGetterV2<\"label\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id ?? labelId,\n      htmlFor: props.htmlFor ?? id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = React.useCallback<PropGetterV2<\"div\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { getRootProps, htmlProps: _, ...context } = useFormControlProvider(\n    ownProps,\n  )\n\n  const className = cx(\"chakra-form-control\", props.className)\n  const contextValue = React.useMemo(() => context, [context])\n\n  return (\n    <FormControlProvider value={contextValue}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className={className}\n          __css={styles[\"container\"]}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n  const className = cx(\"chakra-form__helper-text\", props.className)\n  return (\n    <chakra.div\n      {...field?.getHelpTextProps(props, ref)}\n      __css={styles.helperText}\n      className={className}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n"]},"metadata":{},"sourceType":"module"}