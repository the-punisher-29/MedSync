{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { css, isStyleProp } from \"@chakra-ui/styled-system\";\nimport { filterUndefined, objectFilter, runIfFn } from \"@chakra-ui/utils\";\nimport _styled from \"@emotion/styled\";\nimport { shouldForwardProp } from \"./should-forward-prop\";\nimport { domElements } from \"./system.utils\";\n\n/**\n * Style resolver function that manages how style props are merged\n * in combination with other possible ways of defining styles.\n *\n * For example, take a component defined this way:\n * ```jsx\n * <Box fontSize=\"24px\" sx={{ fontSize: \"40px\" }}></Box>\n * ```\n *\n * We want to manage the priority of the styles properly to prevent unwanted\n * behaviors. Right now, the `sx` prop has the highest priority so the resolved\n * fontSize will be `40px`\n */\nexport var toCSSObject = _ref => {\n  var {\n    baseStyle\n  } = _ref;\n  return props => {\n    var {\n        css: cssProp,\n        __css,\n        sx\n      } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"theme\", \"css\", \"__css\", \"sx\"]);\n    var styleProps = objectFilter(rest, (_, prop) => isStyleProp(prop));\n    var finalBaseStyle = runIfFn(baseStyle, props);\n    var finalStyles = Object.assign({}, __css, finalBaseStyle, filterUndefined(styleProps), sx);\n    var computedCSS = css(finalStyles)(props.theme);\n    return cssProp ? [computedCSS, cssProp] : computedCSS;\n  };\n};\nexport function styled(component, options) {\n  var _ref2 = options != null ? options : {},\n    {\n      baseStyle\n    } = _ref2,\n    styledOptions = _objectWithoutPropertiesLoose(_ref2, [\"baseStyle\"]);\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp;\n  }\n  var styleObject = toCSSObject({\n    baseStyle\n  });\n  return _styled(component, styledOptions)(styleObject);\n}\nexport var chakra = styled;\ndomElements.forEach(tag => {\n  chakra[tag] = chakra(tag);\n});","map":{"version":3,"sources":["../../src/system.ts"],"names":["css","isStyleProp","filterUndefined","objectFilter","runIfFn","_styled","shouldForwardProp","domElements","toCSSObject","baseStyle","props","cssProp","__css","sx","rest","styleProps","_","prop","finalBaseStyle","finalStyles","Object","assign","computedCSS","theme","styled","component","options","styledOptions","styleObject","chakra","forEach","tag"],"mappings":";;;;;;;;;;;;AAAA,SACEA,GADF,EAEEC,WAFF,QAKO,0BALP;AAMA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,OAAxC,QAAuD,kBAAvD;AACA,OAAOC,OAAP,MAA0D,iBAA1D;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AAEA,SAASC,WAAT,QAAyC,gBAAzC;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,WAA2B,GAAG,IAAA,IAAA;EAAA,IAAC;IAAEC;EAAF,CAAD,GAAA,IAAA;EAAA,OAAoBC,KAAD,IAAW;IACvE,IAAM;QAASV,GAAG,EAAEW,OAAd;QAAuBC,KAAvB;QAA8BC;MAA9B,CAAA,GAA8CH,KAApD;MAA2CI,IAA3C,GAAA,6BAAA,CAAoDJ,KAApD,EAAA,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA;IACA,IAAMK,UAAU,GAAGZ,YAAY,CAACW,IAAD,EAAO,CAACE,CAAD,EAAIC,IAAJ,KAAahB,WAAW,CAACgB,IAAD,CAA/B,CAA/B;IACA,IAAMC,cAAc,GAAGd,OAAO,CAACK,SAAD,EAAYC,KAAZ,CAA9B;IACA,IAAMS,WAAW,GAAGC,MAAM,CAACC,MAAPD,CAClB,CAAA,CADkBA,EAElBR,KAFkBQ,EAGlBF,cAHkBE,EAIlBlB,eAAe,CAACa,UAAD,CAJGK,EAKlBP,EALkBO,CAApB;IAOA,IAAME,WAAW,GAAGtB,GAAG,CAACmB,WAAD,CAAHnB,CAAiBU,KAAK,CAACa,KAAvBvB,CAApB;IACA,OAAOW,OAAO,GAAG,CAACW,WAAD,EAAcX,OAAd,CAAH,GAA4BW,WAA1C;EACD,CAb0C;AAAA,CAApC;AAuBP,OAAO,SAASE,MAAT,CACLC,SADK,EAELC,OAFK,EAGL;EACA,IAAA,KAAA,GAAwCA,OAAxC,IAAA,IAAA,GAAwCA,OAAxC,GAAmD,CAAA,CAAnD;IAAM;MAAEjB;IAAF,CAAN,GAAA,KAAA;IAAsBkB,aAAtB,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,WAAA,CAAA,CAAA;EAEA,IAAI,CAACA,aAAa,CAACrB,iBAAnB,EAAsC;IACpCqB,aAAa,CAACrB,iBAAdqB,GAAkCrB,iBAAlCqB;EACD;EAED,IAAMC,WAAW,GAAGpB,WAAW,CAAC;IAAEC;EAAF,CAAD,CAA/B;EACA,OAAOJ,OAAO,CACZoB,SADY,EAEZE,aAFY,CAAPtB,CAGLuB,WAHKvB,CAAP;AAID;AAqBD,OAAO,IAAMwB,MAAM,GAAIL,MAAhB;AAGPjB,WAAW,CAACuB,OAAZvB,CAAqBwB,GAAD,IAAS;EAC3BF,MAAM,CAACE,GAAD,CAANF,GAAcA,MAAM,CAACE,GAAD,CAApBF;AACD,CAFDtB,CAAAA","sourcesContent":["import {\n  css,\n  isStyleProp,\n  StyleProps,\n  SystemStyleObject,\n} from \"@chakra-ui/styled-system\"\nimport { filterUndefined, objectFilter, runIfFn } from \"@chakra-ui/utils\"\nimport _styled, { CSSObject, FunctionInterpolation } from \"@emotion/styled\"\nimport { shouldForwardProp } from \"./should-forward-prop\"\nimport { As, ChakraComponent, ChakraProps, PropsOf } from \"./system.types\"\nimport { domElements, DOMElements } from \"./system.utils\"\n\ntype StyleResolverProps = SystemStyleObject & {\n  __css?: SystemStyleObject\n  sx?: SystemStyleObject\n  theme: any\n  css?: CSSObject\n}\n\ninterface GetStyleObject {\n  (options: {\n    baseStyle?:\n      | SystemStyleObject\n      | ((props: StyleResolverProps) => SystemStyleObject)\n  }): FunctionInterpolation<StyleResolverProps>\n}\n\n/**\n * Style resolver function that manages how style props are merged\n * in combination with other possible ways of defining styles.\n *\n * For example, take a component defined this way:\n * ```jsx\n * <Box fontSize=\"24px\" sx={{ fontSize: \"40px\" }}></Box>\n * ```\n *\n * We want to manage the priority of the styles properly to prevent unwanted\n * behaviors. Right now, the `sx` prop has the highest priority so the resolved\n * fontSize will be `40px`\n */\nexport const toCSSObject: GetStyleObject = ({ baseStyle }) => (props) => {\n  const { theme, css: cssProp, __css, sx, ...rest } = props\n  const styleProps = objectFilter(rest, (_, prop) => isStyleProp(prop))\n  const finalBaseStyle = runIfFn(baseStyle, props)\n  const finalStyles = Object.assign(\n    {},\n    __css,\n    finalBaseStyle,\n    filterUndefined(styleProps),\n    sx,\n  )\n  const computedCSS = css(finalStyles)(props.theme)\n  return cssProp ? [computedCSS, cssProp] : computedCSS\n}\n\ninterface StyledOptions {\n  shouldForwardProp?(prop: string): boolean\n  label?: string\n  baseStyle?:\n    | SystemStyleObject\n    | ((props: StyleResolverProps) => SystemStyleObject)\n}\n\nexport function styled<T extends As, P = {}>(\n  component: T,\n  options?: StyledOptions,\n) {\n  const { baseStyle, ...styledOptions } = options ?? {}\n\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp\n  }\n\n  const styleObject = toCSSObject({ baseStyle })\n  return _styled(\n    component as React.ComponentType<any>,\n    styledOptions,\n  )(styleObject) as ChakraComponent<T, P>\n}\n\nexport type HTMLChakraComponents = {\n  [Tag in DOMElements]: ChakraComponent<Tag, {}>\n}\n\nexport type HTMLChakraProps<T extends As> = Omit<\n  PropsOf<T>,\n  T extends \"svg\"\n    ? \"ref\" | \"children\" | keyof StyleProps\n    : \"ref\" | keyof StyleProps\n> &\n  ChakraProps & { as?: As }\n\ntype ChakraFactory = {\n  <T extends As, P = {}>(\n    component: T,\n    options?: StyledOptions,\n  ): ChakraComponent<T, P>\n}\n\nexport const chakra = (styled as unknown) as ChakraFactory &\n  HTMLChakraComponents\n\ndomElements.forEach((tag) => {\n  chakra[tag] = chakra(tag)\n})\n"]},"metadata":{},"sourceType":"module"}