{"ast":null,"code":"import { isCssVar, isObject, isString, mergeWith as merge, runIfFn } from \"@chakra-ui/utils\";\nimport { pseudoSelectors } from \"./pseudos\";\nimport { systemProps as systemPropConfigs } from \"./system\";\nimport { expandResponsive } from \"./utils/expand-responsive\";\nvar isCSSVariableTokenValue = (key, value) => key.startsWith(\"--\") && isString(value) && !isCssVar(value);\nvar resolveTokenValue = (theme, value) => {\n  var _ref, _getVar2;\n  if (value == null) return value;\n  var getVar = val => {\n    var _theme$__cssMap, _theme$__cssMap$val;\n    return (_theme$__cssMap = theme.__cssMap) == null ? void 0 : (_theme$__cssMap$val = _theme$__cssMap[val]) == null ? void 0 : _theme$__cssMap$val.varRef;\n  };\n  var getValue = val => {\n    var _getVar;\n    return (_getVar = getVar(val)) != null ? _getVar : val;\n  };\n  var valueSplit = value.split(\",\").map(v => v.trim());\n  var [tokenValue, fallbackValue] = valueSplit;\n  value = (_ref = (_getVar2 = getVar(tokenValue)) != null ? _getVar2 : getValue(fallbackValue)) != null ? _ref : getValue(value);\n  return value;\n};\nexport function getCss(options) {\n  var {\n    configs = {},\n    pseudos = {},\n    theme\n  } = options;\n  var css = function css(stylesOrFn, nested) {\n    if (nested === void 0) {\n      nested = false;\n    }\n    var _styles = runIfFn(stylesOrFn, theme);\n    var styles = expandResponsive(_styles)(theme);\n    var computedStyles = {};\n    for (var key in styles) {\n      var _config$transform, _config, _config2, _config3, _config4;\n      var valueOrFn = styles[key];\n      /**\n       * allows the user to pass functional values\n       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`\n       */\n\n      var value = runIfFn(valueOrFn, theme);\n      /**\n       * converts pseudo shorthands to valid selector\n       * \"_hover\" => \"&:hover\"\n       */\n\n      if (key in pseudos) {\n        key = pseudos[key];\n      }\n      /**\n       * allows the user to use theme tokens in css vars\n       * { --banner-height: \"sizes.md\" } => { --banner-height: \"var(--chakra-sizes-md)\" }\n       *\n       * You can also provide fallback values\n       * { --banner-height: \"sizes.no-exist, 40px\" } => { --banner-height: \"40px\" }\n       */\n\n      if (isCSSVariableTokenValue(key, value)) {\n        value = resolveTokenValue(theme, value);\n      }\n      var config = configs[key];\n      if (config === true) {\n        config = {\n          property: key\n        };\n      }\n      if (isObject(value)) {\n        var _computedStyles$key;\n        computedStyles[key] = (_computedStyles$key = computedStyles[key]) != null ? _computedStyles$key : {};\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true));\n        continue;\n      }\n      var rawValue = (_config$transform = (_config = config) == null ? void 0 : _config.transform == null ? void 0 : _config.transform(value, theme, _styles)) != null ? _config$transform : value;\n      /**\n       * Used for `layerStyle`, `textStyle` and `apply`. After getting the\n       * styles in the theme, we need to process them since they might\n       * contain theme tokens.\n       *\n       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`\n       */\n\n      rawValue = (_config2 = config) != null && _config2.processResult ? css(rawValue, true) : rawValue;\n      /**\n       * allows us define css properties for RTL and LTR.\n       *\n       * const marginStart = {\n       *   property: theme => theme.direction === \"rtl\" ? \"marginRight\": \"marginLeft\",\n       * }\n       */\n\n      var configProperty = runIfFn((_config3 = config) == null ? void 0 : _config3.property, theme);\n      if (!nested && (_config4 = config) != null && _config4.static) {\n        var staticStyles = runIfFn(config.static, theme);\n        computedStyles = merge({}, computedStyles, staticStyles);\n      }\n      if (configProperty && Array.isArray(configProperty)) {\n        for (var property of configProperty) {\n          computedStyles[property] = rawValue;\n        }\n        continue;\n      }\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue);\n        } else {\n          computedStyles[configProperty] = rawValue;\n        }\n        continue;\n      }\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue);\n        continue;\n      }\n      computedStyles[key] = rawValue;\n    }\n    return computedStyles;\n  };\n  return css;\n}\nexport var css = styles => theme => {\n  var cssFn = getCss({\n    theme,\n    pseudos: pseudoSelectors,\n    configs: systemPropConfigs\n  });\n  return cssFn(styles);\n};","map":{"version":3,"sources":["../../src/css.ts"],"names":["isCssVar","isObject","isString","mergeWith","merge","runIfFn","pseudoSelectors","systemProps","systemPropConfigs","expandResponsive","isCSSVariableTokenValue","key","value","startsWith","resolveTokenValue","theme","getVar","val","__cssMap","varRef","getValue","valueSplit","split","map","v","trim","tokenValue","fallbackValue","getCss","options","configs","pseudos","css","stylesOrFn","nested","_styles","styles","computedStyles","valueOrFn","config","property","rawValue","transform","processResult","configProperty","static","staticStyles","Array","isArray","cssFn"],"mappings":"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","sourcesContent":["import {\n  Dict,\n  isCssVar,\n  isObject,\n  isString,\n  mergeWith as merge,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { pseudoSelectors } from \"./pseudos\"\nimport { systemProps as systemPropConfigs } from \"./system\"\nimport { StyleObjectOrFn } from \"./system.types\"\nimport { expandResponsive } from \"./utils/expand-responsive\"\nimport { Config, PropConfig } from \"./utils/prop-config\"\nimport { CssTheme } from \"./utils/types\"\n\nconst isCSSVariableTokenValue = (key: string, value: any): value is string =>\n  key.startsWith(\"--\") && isString(value) && !isCssVar(value)\n\nconst resolveTokenValue = (theme: Dict, value: string) => {\n  if (value == null) return value\n\n  const getVar = (val: string) => theme.__cssMap?.[val]?.varRef\n  const getValue = (val: string) => getVar(val) ?? val\n\n  const valueSplit = value.split(\",\").map((v) => v.trim())\n  const [tokenValue, fallbackValue] = valueSplit\n  value = getVar(tokenValue) ?? getValue(fallbackValue) ?? getValue(value)\n\n  return value\n}\n\ninterface GetCSSOptions {\n  theme: CssTheme\n  configs?: Config\n  pseudos?: Record<string, CSS.Pseudos | (string & {})>\n}\n\nexport function getCss(options: GetCSSOptions) {\n  const { configs = {}, pseudos = {}, theme } = options\n\n  const css = (stylesOrFn: Dict, nested = false) => {\n    const _styles = runIfFn(stylesOrFn, theme)\n    const styles = expandResponsive(_styles)(theme)\n\n    let computedStyles: Dict = {}\n\n    for (let key in styles) {\n      const valueOrFn = styles[key]\n\n      /**\n       * allows the user to pass functional values\n       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`\n       */\n      let value = runIfFn(valueOrFn, theme)\n\n      /**\n       * converts pseudo shorthands to valid selector\n       * \"_hover\" => \"&:hover\"\n       */\n      if (key in pseudos) {\n        key = pseudos[key]\n      }\n\n      /**\n       * allows the user to use theme tokens in css vars\n       * { --banner-height: \"sizes.md\" } => { --banner-height: \"var(--chakra-sizes-md)\" }\n       *\n       * You can also provide fallback values\n       * { --banner-height: \"sizes.no-exist, 40px\" } => { --banner-height: \"40px\" }\n       */\n      if (isCSSVariableTokenValue(key, value)) {\n        value = resolveTokenValue(theme, value)\n      }\n\n      let config = configs[key]\n\n      if (config === true) {\n        config = { property: key } as PropConfig\n      }\n\n      if (isObject(value)) {\n        computedStyles[key] = computedStyles[key] ?? {}\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true))\n        continue\n      }\n\n      let rawValue = config?.transform?.(value, theme, _styles) ?? value\n\n      /**\n       * Used for `layerStyle`, `textStyle` and `apply`. After getting the\n       * styles in the theme, we need to process them since they might\n       * contain theme tokens.\n       *\n       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`\n       */\n      rawValue = config?.processResult ? css(rawValue, true) : rawValue\n\n      /**\n       * allows us define css properties for RTL and LTR.\n       *\n       * const marginStart = {\n       *   property: theme => theme.direction === \"rtl\" ? \"marginRight\": \"marginLeft\",\n       * }\n       */\n      const configProperty = runIfFn(config?.property, theme)\n\n      if (!nested && config?.static) {\n        const staticStyles = runIfFn(config.static, theme)\n        computedStyles = merge({}, computedStyles, staticStyles)\n      }\n\n      if (configProperty && Array.isArray(configProperty)) {\n        for (const property of configProperty) {\n          computedStyles[property] = rawValue\n        }\n        continue\n      }\n\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue)\n        } else {\n          computedStyles[configProperty as string] = rawValue\n        }\n        continue\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue)\n        continue\n      }\n\n      computedStyles[key] = rawValue\n    }\n\n    return computedStyles\n  }\n\n  return css\n}\n\nexport const css = (styles: StyleObjectOrFn) => (theme: any) => {\n  const cssFn = getCss({\n    theme,\n    pseudos: pseudoSelectors,\n    configs: systemPropConfigs,\n  })\n  return cssFn(styles)\n}\n"]},"metadata":{},"sourceType":"module"}