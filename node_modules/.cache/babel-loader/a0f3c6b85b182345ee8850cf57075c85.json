{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useImage } from \"@chakra-ui/image\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport var AvatarBadge = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  var badgeStyles = _extends({\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    insetEnd: \"0\",\n    bottom: \"0\"\n  }, styles.badge);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-avatar__badge\", props.className),\n    __css: badgeStyles\n  }));\n});\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\";\n}\nfunction initials(name) {\n  var [firstName, lastName] = name.split(\" \");\n  return firstName && lastName ? \"\" + firstName.charAt(0) + lastName.charAt(0) : firstName.charAt(0);\n}\n\n/**\n * The avatar name container\n */\nvar AvatarName = props => {\n  var {\n      name,\n      getInitials\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"name\", \"getInitials\"]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    role: \"img\",\n    \"aria-label\": name\n  }, rest, {\n    __css: styles.label\n  }), name ? getInitials == null ? void 0 : getInitials(name) : null);\n};\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\n\nvar DefaultIcon = props => /*#__PURE__*/React.createElement(chakra.svg, _extends({\n  viewBox: \"0 0 128 128\",\n  color: \"#fff\",\n  width: \"100%\",\n  height: \"100%\",\n  className: \"chakra-avatar__svg\"\n}, props), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n}));\nexport var baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport var Avatar = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Avatar\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    {\n      src,\n      name,\n      showBorder,\n      borderRadius = \"full\",\n      onError,\n      getInitials = initials,\n      icon = /*#__PURE__*/React.createElement(DefaultIcon, null),\n      iconLabel = \" avatar\",\n      loading,\n      children,\n      borderColor,\n      ignoreFallback\n    } = _omitThemingProps,\n    rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"src\", \"name\", \"showBorder\", \"borderRadius\", \"onError\", \"getInitials\", \"icon\", \"iconLabel\", \"loading\", \"children\", \"borderColor\", \"ignoreFallback\"]);\n  var avatarStyles = _extends({\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined\n  }, baseStyle, styles.container);\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref\n  }, rest, {\n    className: cx(\"chakra-avatar\", props.className),\n    __css: avatarStyles\n  }), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(AvatarImage, {\n    src: src,\n    loading: loading,\n    onError: onError,\n    getInitials: getInitials,\n    name: name,\n    borderRadius: borderRadius,\n    icon: icon,\n    iconLabel: iconLabel,\n    ignoreFallback: ignoreFallback\n  }), children));\n});\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\";\n}\nvar AvatarImage = props => {\n  var {\n    src,\n    onError,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = /*#__PURE__*/React.createElement(DefaultIcon, null),\n    ignoreFallback\n  } = props;\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n\n  var status = useImage({\n    src,\n    onError,\n    ignoreFallback\n  });\n  var hasLoaded = status === \"loaded\";\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n\n  var showFallback = !src || !hasLoaded;\n  if (showFallback) {\n    return name ? /*#__PURE__*/React.createElement(AvatarName, {\n      className: \"chakra-avatar__initials\",\n      getInitials: getInitials,\n      name: name\n    }) : /*#__PURE__*/React.cloneElement(icon, {\n      role: \"img\",\n      \"aria-label\": iconLabel\n    });\n  }\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n\n  return /*#__PURE__*/React.createElement(chakra.img, {\n    src: src,\n    alt: name,\n    className: \"chakra-avatar__img\",\n    loading: loading,\n    __css: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\",\n      borderRadius\n    }\n  });\n};\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\";\n}","map":{"version":3,"sources":["../../src/avatar.tsx"],"names":["useImage","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","__DEV__","React","AvatarBadge","props","ref","styles","badgeStyles","position","display","alignItems","justifyContent","insetEnd","bottom","badge","className","displayName","initials","name","firstName","lastName","split","charAt","AvatarName","getInitials","rest","label","DefaultIcon","baseStyle","textAlign","textTransform","fontWeight","flexShrink","Avatar","src","showBorder","borderRadius","onError","icon","iconLabel","loading","children","borderColor","ignoreFallback","avatarStyles","borderWidth","undefined","container","AvatarImage","status","hasLoaded","showFallback","cloneElement","role","width","height","objectFit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAT,QAAyB,kBAAzB;AAQA,SACEC,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAIEC,cAJF,EAKEC,mBALF,EAMEC,SANF,QAOO,mBAPP;AAQA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAuDA;AACA;AACA;AACA;AACA,OAAO,IAAMC,WAAW,GAAA,aAAGR,UAAU,CAA0B,CAACS,KAAD,EAAQC,GAAR,KAAgB;EAC7E,IAAMC,MAAM,GAAGP,SAAS,CAAA,CAAxB;EAEA,IAAMQ,WAA8B,GAAA,QAAA,CAAA;IAClCC,QAAQ,EAAE,UADwB;IAElCC,OAAO,EAAE,MAFyB;IAGlCC,UAAU,EAAE,QAHsB;IAIlCC,cAAc,EAAE,QAJkB;IAKlCC,QAAQ,EAAE,GALwB;IAMlCC,MAAM,EAAE;EAN0B,CAAA,EAO/BP,MAAM,CAACQ,KAPwB,CAApC;EAUA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,GAAR,EAAA,QAAA,CAAA;IACE,GAAG,EAAET;EADP,CAAA,EAEMD,KAFN,EAAA;IAGE,SAAS,EAAEJ,EAAE,CAAC,sBAAD,EAAyBI,KAAK,CAACW,SAA/B,CAHf;IAIE,KAAK,EAAER;EAJT,CAAA,CAAA,CADF;AAQD,CArBoC,CAA9B;AAuBP,IAAIN,OAAJ,EAAa;EACXE,WAAW,CAACa,WAAZb,GAA0B,aAA1BA;AACD;AAED,SAASc,QAAT,CAAkBC,IAAlB,EAAgC;EAC9B,IAAM,CAACC,SAAD,EAAYC,QAAZ,CAAA,GAAwBF,IAAI,CAACG,KAALH,CAAW,GAAXA,CAA9B;EACA,OAAOC,SAAS,IAAIC,QAAbD,GAAAA,EAAAA,GACAA,SAAS,CAACG,MAAVH,CAAiB,CAAjBA,CADAA,GACsBC,QAAQ,CAACE,MAATF,CAAgB,CAAhBA,CADtBD,GAEHA,SAAS,CAACG,MAAVH,CAAiB,CAAjBA,CAFJ;AAGD;;AAMD;AACA;AACA;AACA,IAAMI,UAAqC,GAAInB,KAAD,IAAW;EACvD,IAAM;MAAEc,IAAF;MAAQM;IAAR,CAAA,GAAiCpB,KAAvC;IAA8BqB,IAA9B,GAAA,6BAAA,CAAuCrB,KAAvC,EAAA,CAAA,MAAA,EAAA,aAAA,CAAA,CAAA;EACA,IAAME,MAAM,GAAGP,SAAS,CAAA,CAAxB;EAEA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,GAAR,EAAA,QAAA,CAAA;IAAY,IAAI,EAAC,KAAjB;IAAuB,YAAA,EAAYmB;EAAnC,CAAA,EAA6CO,IAA7C,EAAA;IAAmD,KAAK,EAAEnB,MAAM,CAACoB;EAAjE,CAAA,CAAA,EACGR,IAAI,GAAGM,WAAH,IAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,WAAW,CAAGN,IAAH,CAAd,GAAyB,IADhC,CADF;AAKD,CATD;AAWA;AACA;AACA;AACA;;AACA,IAAMS,WAAmC,GAAIvB,KAAD,IAAA,aAC1C,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,GAAR,EAAA,QAAA,CAAA;EACE,OAAO,EAAC,aADV;EAEE,KAAK,EAAC,MAFR;EAGE,KAAK,EAAC,MAHR;EAIE,MAAM,EAAC,MAJT;EAKE,SAAS,EAAC;AALZ,CAAA,EAMMA,KANN,CAAA,EAAA,aAQE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;EACE,IAAI,EAAC,cADP;EAEE,CAAC,EAAC;AAFJ,CAAA,CARF,EAAA,aAYE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;EACE,IAAI,EAAC,cADP;EAEE,CAAC,EAAC;AAFJ,CAAA,CAZF,CADF;AAoBA,OAAO,IAAMwB,SAA4B,GAAG;EAC1CnB,OAAO,EAAE,aADiC;EAE1CC,UAAU,EAAE,QAF8B;EAG1CC,cAAc,EAAE,QAH0B;EAI1CkB,SAAS,EAAE,QAJ+B;EAK1CC,aAAa,EAAE,WAL2B;EAM1CC,UAAU,EAAE,QAN8B;EAO1CvB,QAAQ,EAAE,UAPgC;EAQ1CwB,UAAU,EAAE;AAR8B,CAArC;;AAuBP;AACA;AACA;AACA;AACA,OAAO,IAAMC,MAAM,GAAA,aAAGtC,UAAU,CAAsB,CAACS,KAAD,EAAQC,GAAR,KAAgB;EACpE,IAAMC,MAAM,GAAGR,mBAAmB,CAAC,QAAD,EAAWM,KAAX,CAAlC;EAEA,IAAA,iBAAA,GAcIR,gBAAgB,CAACQ,KAAD,CAdpB;IAAM;MACJ8B,GADI;MAEJhB,IAFI;MAGJiB,UAHI;MAIJC,YAAY,GAAG,MAJX;MAKJC,OALI;MAMJb,WAAW,GAAGP,QANV;MAOJqB,IAAI,GAAA,aAAG,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA,IAAA,CAPH;MAQJC,SAAS,GAAG,SARR;MASJC,OATI;MAUJC,QAVI;MAWJC,WAXI;MAYJC;IAZI,CAAN,GAAA,iBAAA;IAaKlB,IAbL,GAAA,6BAAA,CAAA,iBAAA,EAAA,CAAA,KAAA,EAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,SAAA,EAAA,aAAA,EAAA,MAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,aAAA,EAAA,gBAAA,CAAA,CAAA;EAgBA,IAAMmB,YAA+B,GAAA,QAAA,CAAA;IACnCR,YADmC;IAEnCS,WAAW,EAAEV,UAAU,GAAG,KAAH,GAAWW;EAFC,CAAA,EAGhClB,SAHgC,EAIhCtB,MAAM,CAACyC,SAJyB,CAArC;EAOA,IAAIL,WAAJ,EAAiB;IACfE,YAAY,CAACF,WAAbE,GAA2BF,WAA3BE;EACD;EAED,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,IAAR,EAAA,QAAA,CAAA;IACE,GAAG,EAAEvC;EADP,CAAA,EAEMoB,IAFN,EAAA;IAGE,SAAS,EAAEzB,EAAE,CAAC,eAAD,EAAkBI,KAAK,CAACW,SAAxB,CAHf;IAIE,KAAK,EAAE6B;EAJT,CAAA,CAAA,EAAA,aAME,KAAA,CAAA,aAAA,CAAC,cAAD,EAAA;IAAgB,KAAK,EAAEtC;EAAvB,CAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IACE,GAAG,EAAE4B,GADP;IAEE,OAAO,EAAEM,OAFX;IAGE,OAAO,EAAEH,OAHX;IAIE,WAAW,EAAEb,WAJf;IAKE,IAAI,EAAEN,IALR;IAME,YAAY,EAAEkB,YANhB;IAOE,IAAI,EAAEE,IAPR;IAQE,SAAS,EAAEC,SARb;IASE,cAAc,EAAEI;EATlB,CAAA,CADF,EAYGF,QAZH,CANF,CADF;AAuBD,CArD+B,CAAzB;AAuDP,IAAIxC,OAAJ,EAAa;EACXgC,MAAM,CAACjB,WAAPiB,GAAqB,QAArBA;AACD;AAQD,IAAMe,WAAuC,GAAI5C,KAAD,IAAW;EACzD,IAAM;IACJ8B,GADI;IAEJG,OAFI;IAGJb,WAHI;IAIJN,IAJI;IAKJkB,YALI;IAMJI,OANI;IAOJD,SAPI;IAQJD,IAAI,GAAA,aAAG,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA,IAAA,CARH;IASJK;EATI,CAAA,GAUFvC,KAVJ;EAYA;AACF;AACA;;EACE,IAAM6C,MAAM,GAAGxD,QAAQ,CAAC;IAAEyC,GAAF;IAAOG,OAAP;IAAgBM;EAAhB,CAAD,CAAvB;EAEA,IAAMO,SAAS,GAAGD,MAAM,KAAK,QAA7B;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EACE,IAAME,YAAY,GAAG,CAACjB,GAAD,IAAQ,CAACgB,SAA9B;EAEA,IAAIC,YAAJ,EAAkB;IAChB,OAAOjC,IAAI,GAAA,aACT,KAAA,CAAA,aAAA,CAAC,UAAD,EAAA;MACE,SAAS,EAAC,yBADZ;MAEE,WAAW,EAAEM,WAFf;MAGE,IAAI,EAAEN;IAHR,CAAA,CADS,GAAA,aAOT,KAAK,CAACkC,YAAN,CAAmBd,IAAnB,EAAyB;MACvBe,IAAI,EAAE,KADiB;MAEvB,YAAA,EAAcd;IAFS,CAAzB,CAPF;EAYD;EAED;AACF;AACA;;EACE,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,GAAR,EAAA;IACE,GAAG,EAAEL,GADP;IAEE,GAAG,EAAEhB,IAFP;IAGE,SAAS,EAAC,oBAHZ;IAIE,OAAO,EAAEsB,OAJX;IAKE,KAAK,EAAE;MACLc,KAAK,EAAE,MADF;MAELC,MAAM,EAAE,MAFH;MAGLC,SAAS,EAAE,OAHN;MAILpB;IAJK;EALT,CAAA,CADF;AAcD,CA7DD;AA+DA,IAAInC,OAAJ,EAAa;EACX+C,WAAW,CAAChC,WAAZgC,GAA0B,aAA1BA;AACD","sourcesContent":["import type { ImageProps } from \"@chakra-ui/image\"\nimport { useImage } from \"@chakra-ui/image\"\nimport type {\n  ChakraComponent,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface AvatarOptions {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * If `true`, the `Avatar` will show a border around it.\n   *\n   * Best for a group of avatars\n   */\n  showBorder?: boolean\n  /**\n   * The badge at the bottom right corner of the avatar.\n   */\n  children?: React.ReactNode\n  /**\n   * The image url of the `Avatar`\n   */\n  src?: string\n  /**\n   * List of sources to use for different screen resolutions\n   */\n  srcSet?: string\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * The border color of the avatar\n   * @type SystemProps[\"borderColor\"]\n   */\n  borderColor?: SystemProps[\"borderColor\"]\n  /**\n   * Function called when image failed to load\n   */\n  onError?: () => void\n  /**\n   * The default avatar used as fallback when `name`, and `src`\n   * is not specified.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * Function to get the initials to display\n   */\n  getInitials?: (name: string) => string\n}\n\nexport interface AvatarBadgeProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  const badgeStyles: SystemStyleObject = {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    insetEnd: \"0\",\n    bottom: \"0\",\n    ...styles.badge,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-avatar__badge\", props.className)}\n      __css={badgeStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\"\n}\n\nfunction initials(name: string) {\n  const [firstName, lastName] = name.split(\" \")\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n\n/**\n * The avatar name container\n */\nconst AvatarName: React.FC<AvatarNameProps> = (props) => {\n  const { name, getInitials, ...rest } = props\n  const styles = useStyles()\n\n  return (\n    <chakra.div role=\"img\" aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nconst DefaultIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    className=\"chakra-avatar__svg\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  iconLabel?: string\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and\n   * renders the `img` at all times.\n   */\n  ignoreFallback?: boolean\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    src,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    getInitials = initials,\n    icon = <DefaultIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      __css={avatarStyles}\n    >\n      <StylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          loading={loading}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n          ignoreFallback={ignoreFallback}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.span>\n  )\n})\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\"\n}\n\ninterface AvatarImageProps\n  extends ImageProps,\n    Pick<AvatarProps, \"getInitials\" | \"borderRadius\" | \"icon\" | \"name\"> {\n  iconLabel?: string\n}\n\nconst AvatarImage: React.FC<AvatarImageProps> = (props) => {\n  const {\n    src,\n    onError,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <DefaultIcon />,\n    ignoreFallback,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError, ignoreFallback })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      React.cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      alt={name}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\"\n}\n"]},"metadata":{},"sourceType":"module"}