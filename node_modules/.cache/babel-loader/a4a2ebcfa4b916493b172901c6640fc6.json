{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useRangeSlider } from \"./use-range-slider\";\nvar [RangeSliderProvider, useRangeSliderContext] = createContext({\n  name: \"SliderContext\",\n  errorMessage: \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />\"\n});\nexport { RangeSliderProvider, useRangeSliderContext };\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport var RangeSlider = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Slider\", props);\n  var ownProps = omitThemingProps(props);\n  var {\n    direction\n  } = useTheme();\n  ownProps.direction = direction;\n  var _useRangeSlider = useRangeSlider(ownProps),\n    {\n      getRootProps\n    } = _useRangeSlider,\n    context = _objectWithoutPropertiesLoose(_useRangeSlider, [\"getRootProps\"]);\n  var ctx = React.useMemo(() => _extends({}, context, {\n    name: props.name\n  }), [context, props.name]);\n  return /*#__PURE__*/React.createElement(RangeSliderProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, getRootProps({}, ref), {\n    className: \"chakra-slider\",\n    __css: styles.container\n  }), props.children)));\n});\nRangeSlider.defaultProps = {\n  orientation: \"horizontal\"\n};\nif (__DEV__) {\n  RangeSlider.displayName = \"RangeSlider\";\n}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport var RangeSliderThumb = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getThumbProps,\n    getInputProps,\n    name\n  } = useRangeSliderContext();\n  var styles = useStyles();\n  var thumbProps = getThumbProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, thumbProps, {\n    className: cx(\"chakra-slider__thumb\", props.className),\n    __css: styles.thumb\n  }), thumbProps.children, name && /*#__PURE__*/React.createElement(\"input\", getInputProps({\n    index: props.index\n  })));\n});\nif (__DEV__) {\n  RangeSliderThumb.displayName = \"RangeSliderThumb\";\n}\nexport var RangeSliderTrack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getTrackProps\n  } = useRangeSliderContext();\n  var styles = useStyles();\n  var trackProps = getTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: cx(\"chakra-slider__track\", props.className),\n    __css: styles.track\n  }));\n});\nif (__DEV__) {\n  RangeSliderTrack.displayName = \"RangeSliderTrack\";\n}\nexport var RangeSliderFilledTrack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getInnerTrackProps\n  } = useRangeSliderContext();\n  var styles = useStyles();\n  var trackProps = getInnerTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: \"chakra-slider__filled-track\",\n    __css: styles.filledTrack\n  }));\n});\nif (__DEV__) {\n  RangeSliderFilledTrack.displayName = \"RangeSliderFilledTrack\";\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\nexport var RangeSliderMark = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getMarkerProps\n  } = useRangeSliderContext();\n  var markProps = getMarkerProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, markProps, {\n    className: cx(\"chakra-slider__marker\", props.className)\n  }));\n});\nif (__DEV__) {\n  RangeSliderMark.displayName = \"RangeSliderMark\";\n}","map":{"version":3,"sources":["../../src/range-slider.tsx"],"names":["createContext","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","useTheme","cx","__DEV__","React","useRangeSlider","RangeSliderProvider","useRangeSliderContext","name","errorMessage","RangeSlider","props","ref","styles","ownProps","direction","getRootProps","context","ctx","useMemo","container","children","defaultProps","orientation","displayName","RangeSliderThumb","getThumbProps","getInputProps","thumbProps","className","thumb","index","RangeSliderTrack","getTrackProps","trackProps","track","RangeSliderFilledTrack","getInnerTrackProps","filledTrack","RangeSliderMark","getMarkerProps","markProps"],"mappings":"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","sourcesContent":["import { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useRangeSlider,\n  UseRangeSliderProps,\n  UseRangeSliderReturn,\n} from \"./use-range-slider\"\n\ninterface RangeSliderContext\n  extends Omit<UseRangeSliderReturn, \"getRootProps\"> {\n  name?: string | string[]\n}\n\nconst [\n  RangeSliderProvider,\n  useRangeSliderContext,\n] = createContext<RangeSliderContext>({\n  name: \"SliderContext\",\n  errorMessage:\n    \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />\",\n})\n\nexport { RangeSliderProvider, useRangeSliderContext }\n\nexport interface RangeSliderProps\n  extends UseRangeSliderProps,\n    ThemingProps<\"Slider\">,\n    Omit<HTMLChakraProps<\"div\">, keyof UseRangeSliderProps> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport const RangeSlider = forwardRef<RangeSliderProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Slider\", props)\n  const ownProps = omitThemingProps(props)\n  const { direction } = useTheme()\n  ownProps.direction = direction\n\n  const { getRootProps, ...context } = useRangeSlider(ownProps)\n  const ctx = React.useMemo(() => ({ ...context, name: props.name }), [\n    context,\n    props.name,\n  ])\n\n  return (\n    <RangeSliderProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className=\"chakra-slider\"\n          __css={styles.container}\n        >\n          {props.children}\n        </chakra.div>\n      </StylesProvider>\n    </RangeSliderProvider>\n  )\n})\n\nRangeSlider.defaultProps = {\n  orientation: \"horizontal\",\n}\n\nif (__DEV__) {\n  RangeSlider.displayName = \"RangeSlider\"\n}\n\nexport interface RangeSliderThumbProps extends HTMLChakraProps<\"div\"> {\n  index: number\n}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const RangeSliderThumb = forwardRef<RangeSliderThumbProps, \"div\">(\n  (props, ref) => {\n    const { getThumbProps, getInputProps, name } = useRangeSliderContext()\n    const styles = useStyles()\n    const thumbProps = getThumbProps(props, ref)\n\n    return (\n      <chakra.div\n        {...thumbProps}\n        className={cx(\"chakra-slider__thumb\", props.className)}\n        __css={styles.thumb}\n      >\n        {thumbProps.children}\n        {name && <input {...getInputProps({ index: props.index })} />}\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderThumb.displayName = \"RangeSliderThumb\"\n}\n\nexport interface RangeSliderTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderTrack = forwardRef<RangeSliderTrackProps, \"div\">(\n  (props, ref) => {\n    const { getTrackProps } = useRangeSliderContext()\n    const styles = useStyles()\n    const trackProps = getTrackProps(props, ref)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className={cx(\"chakra-slider__track\", props.className)}\n        __css={styles.track}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderTrack.displayName = \"RangeSliderTrack\"\n}\n\nexport interface RangeSliderInnerTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderFilledTrack = forwardRef<\n  RangeSliderInnerTrackProps,\n  \"div\"\n>((props, ref) => {\n  const { getInnerTrackProps } = useRangeSliderContext()\n  const styles = useStyles()\n  const trackProps = getInnerTrackProps(props, ref)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className=\"chakra-slider__filled-track\"\n      __css={styles.filledTrack}\n    />\n  )\n})\n\nif (__DEV__) {\n  RangeSliderFilledTrack.displayName = \"RangeSliderFilledTrack\"\n}\n\nexport interface RangeSliderMarkProps extends HTMLChakraProps<\"div\"> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\nexport const RangeSliderMark = forwardRef<RangeSliderMarkProps, \"div\">(\n  (props, ref) => {\n    const { getMarkerProps } = useRangeSliderContext()\n    const markProps = getMarkerProps(props, ref)\n    return (\n      <chakra.div\n        {...markProps}\n        className={cx(\"chakra-slider__marker\", props.className)}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderMark.displayName = \"RangeSliderMark\"\n}\n"]},"metadata":{},"sourceType":"module"}