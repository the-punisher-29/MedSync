{"ast":null,"code":"import { runIfFn } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCallbackRef } from \"./use-callback-ref\";\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n *\n * @internal\n */\nexport function useEventListener(event, handler, env, options) {\n  var listener = useCallbackRef(handler);\n  React.useEffect(() => {\n    var _runIfFn;\n    var node = (_runIfFn = runIfFn(env)) != null ? _runIfFn : document;\n    node.addEventListener(event, listener, options);\n    return () => {\n      node.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, listener]);\n  return () => {\n    var _runIfFn2;\n    var node = (_runIfFn2 = runIfFn(env)) != null ? _runIfFn2 : document;\n    node.removeEventListener(event, listener, options);\n  };\n}","map":{"version":3,"sources":["../../src/use-event-listener.ts"],"names":["runIfFn","React","useCallbackRef","useEventListener","event","handler","env","options","listener","useEffect","node","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,oBAA/B;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAT,CACLC,KADK,EAELC,OAFK,EAGLC,GAHK,EAILC,OAJK,EAKL;EACA,IAAMC,QAAQ,GAAGN,cAAc,CAACG,OAAD,CAA/B;EAEAJ,KAAK,CAACQ,SAANR,CAAgB,MAAM;IAAA,IAAA,QAAA;IACpB,IAAMS,IAAI,GAAA,CAAA,QAAA,GAAGV,OAAO,CAACM,GAAD,CAAV,KAAA,IAAA,GAAA,QAAA,GAAmBK,QAA7B;IAEAD,IAAI,CAACE,gBAALF,CAAsBN,KAAtBM,EAA6BF,QAA7BE,EAAuCH,OAAvCG,CAAAA;IACA,OAAO,MAAM;MACXA,IAAI,CAACG,mBAALH,CAAyBN,KAAzBM,EAAgCF,QAAhCE,EAA0CH,OAA1CG,CAAAA;IACD,CAFD;EAGD,CAPDT,EAOG,CAACG,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBC,QAAtB,CAPHP,CAAAA;EASA,OAAO,MAAM;IAAA,IAAA,SAAA;IACX,IAAMS,IAAI,GAAA,CAAA,SAAA,GAAGV,OAAO,CAACM,GAAD,CAAV,KAAA,IAAA,GAAA,SAAA,GAAmBK,QAA7B;IACAD,IAAI,CAACG,mBAALH,CAAyBN,KAAzBM,EAAgCF,QAAhCE,EAA0CH,OAA1CG,CAAAA;EACD,CAHD;AAID","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\ntype DocumentOrElement = Document | HTMLElement | null\n\nexport type EventListenerEnv = (() => DocumentOrElement) | DocumentOrElement\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n *\n * @internal\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K | (string & {}),\n  handler: (event: DocumentEventMap[K]) => void,\n  env?: EventListenerEnv,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const listener = useCallbackRef(handler) as EventListener\n\n  React.useEffect(() => {\n    const node = runIfFn(env) ?? document\n\n    node.addEventListener(event, listener, options)\n    return () => {\n      node.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, listener])\n\n  return () => {\n    const node = runIfFn(env) ?? document\n    node.removeEventListener(event, listener, options)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}