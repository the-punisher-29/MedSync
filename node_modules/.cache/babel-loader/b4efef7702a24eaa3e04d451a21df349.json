{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, filterUndefined, __DEV__ } from \"@chakra-ui/utils\";\nimport { getValidChildren } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { baseStyle } from \"./avatar\";\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport var AvatarGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Avatar\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    {\n      children,\n      borderColor,\n      max,\n      spacing = \"-0.75rem\",\n      borderRadius = \"full\"\n    } = _omitThemingProps,\n    rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"borderColor\", \"max\", \"spacing\", \"borderRadius\"]);\n  var validChildren = getValidChildren(children);\n  /**\n   * get the avatars within the max\n   */\n\n  var childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;\n  /**\n   * get the remaining avatar count\n   */\n\n  var excess = max != null && validChildren.length - max;\n  /**\n   * Reversing the children is a great way to avoid using zIndex\n   * to overlap the avatars\n   */\n\n  var reversedChildren = childrenWithinMax.reverse();\n  var clones = reversedChildren.map((child, index) => {\n    var _child$props$borderCo;\n    var isFirstAvatar = index === 0;\n    var childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: (_child$props$borderCo = child.props.borderColor) != null ? _child$props$borderCo : borderColor,\n      showBorder: true\n    };\n    return /*#__PURE__*/React.cloneElement(child, filterUndefined(childProps));\n  });\n  var groupStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\"\n  };\n  var excessStyles = _extends({\n    borderRadius,\n    marginStart: spacing\n  }, baseStyle, styles.excessLabel);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    role: \"group\",\n    __css: groupStyles\n  }, rest, {\n    className: cx(\"chakra-avatar__group\", props.className)\n  }), excess > 0 && /*#__PURE__*/React.createElement(chakra.span, {\n    className: \"chakra-avatar__excess\",\n    __css: excessStyles\n  }, \"+\" + excess), clones);\n});\nif (__DEV__) {\n  AvatarGroup.displayName = \"AvatarGroup\";\n}","map":{"version":3,"sources":["../../src/avatar-group.tsx"],"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","filterUndefined","__DEV__","getValidChildren","React","baseStyle","AvatarGroup","props","ref","styles","children","borderColor","max","spacing","borderRadius","rest","validChildren","childrenWithinMax","slice","excess","length","reversedChildren","reverse","clones","map","child","index","isFirstAvatar","childProps","marginEnd","size","showBorder","cloneElement","groupStyles","display","alignItems","justifyContent","flexDirection","excessStyles","marginStart","excessLabel","className","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, filterUndefined, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { baseStyle } from \"./avatar\"\n\ninterface AvatarGroupOptions {\n  /**\n   * The children of the avatar group.\n   *\n   * Ideally should be `Avatar` and `MoreIndicator` components\n   */\n  children: React.ReactNode\n  /**\n   * The space between the avatars in the group.\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The maximum number of visible avatars\n   */\n  max?: number\n}\n\nexport interface AvatarGroupProps\n  extends AvatarGroupOptions,\n    Omit<HTMLChakraProps<\"div\">, \"children\">,\n    ThemingProps<\"Avatar\"> {}\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport const AvatarGroup = forwardRef<AvatarGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    children,\n    borderColor,\n    max,\n    spacing = \"-0.75rem\",\n    borderRadius = \"full\",\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  /**\n   * get the avatars within the max\n   */\n  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren\n\n  /**\n   * get the remaining avatar count\n   */\n  const excess = max != null && validChildren.length - max\n\n  /**\n   * Reversing the children is a great way to avoid using zIndex\n   * to overlap the avatars\n   */\n  const reversedChildren = childrenWithinMax.reverse()\n\n  const clones = reversedChildren.map((child, index) => {\n    const isFirstAvatar = index === 0\n\n    const childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: child.props.borderColor ?? borderColor,\n      showBorder: true,\n    }\n\n    return React.cloneElement(child, filterUndefined(childProps))\n  })\n\n  const groupStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\",\n  }\n\n  const excessStyles: SystemStyleObject = {\n    borderRadius,\n    marginStart: spacing,\n    ...baseStyle,\n    ...styles.excessLabel,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      role=\"group\"\n      __css={groupStyles}\n      {...rest}\n      className={cx(\"chakra-avatar__group\", props.className)}\n    >\n      {excess > 0 && (\n        <chakra.span className=\"chakra-avatar__excess\" __css={excessStyles}>\n          {`+${excess}`}\n        </chakra.span>\n      )}\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  AvatarGroup.displayName = \"AvatarGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}