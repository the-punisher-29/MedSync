{"ast":null,"code":"import { isCssVar, isNumber, isString } from \"@chakra-ui/utils\";\nimport { backdropFilterTemplate, filterTemplate, getRingTemplate, getTransformGpuTemplate, getTransformTemplate, flexDirectionTemplate } from \"./templates\";\nimport { gradientTransform, globalSet, isCSSFunction } from \"./parse-gradient\";\nvar analyzeCSSValue = value => {\n  var num = parseFloat(value.toString());\n  var unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n};\nvar wrap = str => value => str + \"(\" + value + \")\";\nexport var transformFunctions = {\n  filter(value) {\n    return value !== \"auto\" ? value : filterTemplate;\n  },\n  backdropFilter(value) {\n    return value !== \"auto\" ? value : backdropFilterTemplate;\n  },\n  ring(value) {\n    return getRingTemplate(transformFunctions.px(value));\n  },\n  bgClip(value) {\n    return value === \"text\" ? {\n      color: \"transparent\",\n      backgroundClip: \"text\"\n    } : {\n      backgroundClip: value\n    };\n  },\n  transform(value) {\n    if (value === \"auto\") return getTransformTemplate();\n    if (value === \"auto-gpu\") return getTransformGpuTemplate();\n    return value;\n  },\n  px(value) {\n    if (value == null) return value;\n    var {\n      unitless\n    } = analyzeCSSValue(value);\n    return unitless || isNumber(value) ? value + \"px\" : value;\n  },\n  fraction(value) {\n    return !isNumber(value) || value > 1 ? value : value * 100 + \"%\";\n  },\n  float(value, theme) {\n    var map = {\n      left: \"right\",\n      right: \"left\"\n    };\n    return theme.direction === \"rtl\" ? map[value] : value;\n  },\n  degree(value) {\n    if (isCssVar(value) || value == null) return value;\n    var unitless = isString(value) && !value.endsWith(\"deg\");\n    return isNumber(value) || unitless ? value + \"deg\" : value;\n  },\n  gradient: gradientTransform,\n  blur: wrap(\"blur\"),\n  opacity: wrap(\"opacity\"),\n  brightness: wrap(\"brightness\"),\n  contrast: wrap(\"contrast\"),\n  dropShadow: wrap(\"drop-shadow\"),\n  grayscale: wrap(\"grayscale\"),\n  hueRotate: wrap(\"hue-rotate\"),\n  invert: wrap(\"invert\"),\n  saturate: wrap(\"saturate\"),\n  sepia: wrap(\"sepia\"),\n  bgImage(value) {\n    if (value == null) return value;\n    var prevent = isCSSFunction(value) || globalSet.has(value);\n    return !prevent ? \"url(\" + value + \")\" : value;\n  },\n  outline(value) {\n    var isNoneOrZero = String(value) === \"0\" || String(value) === \"none\";\n    return value !== null && isNoneOrZero ? {\n      outline: \"2px solid transparent\",\n      outlineOffset: \"2px\"\n    } : {\n      outline: value\n    };\n  },\n  flexDirection(value) {\n    var _flexDirectionTemplat;\n    var {\n      space,\n      divide\n    } = (_flexDirectionTemplat = flexDirectionTemplate[value]) != null ? _flexDirectionTemplat : {};\n    var result = {\n      flexDirection: value\n    };\n    if (space) result[space] = 1;\n    if (divide) result[divide] = 1;\n    return result;\n  }\n};","map":{"version":3,"sources":["../../../src/utils/transform-functions.ts"],"names":["isCssVar","isNumber","isString","backdropFilterTemplate","filterTemplate","getRingTemplate","getTransformGpuTemplate","getTransformTemplate","flexDirectionTemplate","gradientTransform","globalSet","isCSSFunction","analyzeCSSValue","value","num","parseFloat","toString","unit","replace","String","unitless","wrap","str","transformFunctions","filter","backdropFilter","ring","px","bgClip","color","backgroundClip","transform","fraction","float","theme","map","left","right","direction","degree","endsWith","gradient","blur","opacity","brightness","contrast","dropShadow","grayscale","hueRotate","invert","saturate","sepia","bgImage","prevent","has","outline","isNoneOrZero","outlineOffset","flexDirection","space","divide","result"],"mappings":"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","sourcesContent":["import { Dict, isCssVar, isNumber, isString } from \"@chakra-ui/utils\"\nimport {\n  backdropFilterTemplate,\n  filterTemplate,\n  getRingTemplate,\n  getTransformGpuTemplate,\n  getTransformTemplate,\n  flexDirectionTemplate,\n} from \"./templates\"\nimport { gradientTransform, globalSet, isCSSFunction } from \"./parse-gradient\"\n\nconst analyzeCSSValue = (value: number | string) => {\n  const num = parseFloat(value.toString())\n  const unit = value.toString().replace(String(num), \"\")\n  return { unitless: !unit, value: num, unit }\n}\n\nconst wrap = (str: string) => (value: any) => `${str}(${value})`\n\nexport const transformFunctions = {\n  filter(value: any) {\n    return value !== \"auto\" ? value : filterTemplate\n  },\n  backdropFilter(value: any) {\n    return value !== \"auto\" ? value : backdropFilterTemplate\n  },\n  ring(value: string) {\n    return getRingTemplate(transformFunctions.px(value))\n  },\n  bgClip(value: string) {\n    return value === \"text\"\n      ? { color: \"transparent\", backgroundClip: \"text\" }\n      : { backgroundClip: value }\n  },\n  transform(value: any) {\n    if (value === \"auto\") return getTransformTemplate()\n    if (value === \"auto-gpu\") return getTransformGpuTemplate()\n    return value\n  },\n  px(value: number | string) {\n    if (value == null) return value\n    const { unitless } = analyzeCSSValue(value)\n    return unitless || isNumber(value) ? `${value}px` : value\n  },\n  fraction(value: any) {\n    return !isNumber(value) || value > 1 ? value : `${value * 100}%`\n  },\n  float(value: any, theme: Dict) {\n    const map = { left: \"right\", right: \"left\" }\n    return theme.direction === \"rtl\" ? map[value] : value\n  },\n  degree(value: any) {\n    if (isCssVar(value) || value == null) return value\n    const unitless = isString(value) && !value.endsWith(\"deg\")\n    return isNumber(value) || unitless ? `${value}deg` : value\n  },\n  gradient: gradientTransform,\n  blur: wrap(\"blur\"),\n  opacity: wrap(\"opacity\"),\n  brightness: wrap(\"brightness\"),\n  contrast: wrap(\"contrast\"),\n  dropShadow: wrap(\"drop-shadow\"),\n  grayscale: wrap(\"grayscale\"),\n  hueRotate: wrap(\"hue-rotate\"),\n  invert: wrap(\"invert\"),\n  saturate: wrap(\"saturate\"),\n  sepia: wrap(\"sepia\"),\n  bgImage(value: any) {\n    if (value == null) return value\n    const prevent = isCSSFunction(value) || globalSet.has(value)\n    return !prevent ? `url(${value})` : value\n  },\n  outline(value: any) {\n    const isNoneOrZero = String(value) === \"0\" || String(value) === \"none\"\n    return value !== null && isNoneOrZero\n      ? { outline: \"2px solid transparent\", outlineOffset: \"2px\" }\n      : { outline: value }\n  },\n  flexDirection(value: any) {\n    const { space, divide } = flexDirectionTemplate[value] ?? {}\n    const result = { flexDirection: value }\n    if (space) result[space] = 1\n    if (divide) result[divide] = 1\n    return result\n  },\n}\n"]},"metadata":{},"sourceType":"module"}