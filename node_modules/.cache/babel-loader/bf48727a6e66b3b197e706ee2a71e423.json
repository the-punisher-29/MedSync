{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2\n  }\n});\nvar InputElement = /*#__PURE__*/forwardRef((props, ref) => {\n  var _input$height, _input$height2;\n  var {\n      placement = \"left\"\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"placement\"]);\n  var styles = useStyles();\n  var input = styles.field;\n  var attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\";\n  var elementStyles = {\n    [attr]: \"0\",\n    width: (_input$height = input == null ? void 0 : input.height) != null ? _input$height : input == null ? void 0 : input.h,\n    height: (_input$height2 = input == null ? void 0 : input.height) != null ? _input$height2 : input == null ? void 0 : input.h,\n    fontSize: input == null ? void 0 : input.fontSize\n  };\n  return /*#__PURE__*/React.createElement(StyledElement, _extends({\n    ref: ref,\n    __css: elementStyles\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputElement.id = \"InputElement\";\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\";\n}\nexport var InputLeftElement = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      className\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n  var _className = cx(\"chakra-input__left-element\", className);\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"left\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputLeftElement.id = \"InputLeftElement\";\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\";\n}\nexport var InputRightElement = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      className\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n  var _className = cx(\"chakra-input__right-element\", className);\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"right\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputRightElement.id = \"InputRightElement\";\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\";\n}","map":{"version":3,"sources":["../../src/input-element.tsx"],"names":["chakra","forwardRef","useStyles","cx","__DEV__","React","StyledElement","baseStyle","display","alignItems","justifyContent","position","top","zIndex","InputElement","props","ref","placement","rest","styles","input","field","attr","elementStyles","width","height","h","fontSize","id","displayName","InputLeftElement","className","_className","InputRightElement"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">((props, ref) => {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n  }\n\n  return <StyledElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\"\n}\n\nexport const InputLeftElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\"\n}\n\nexport const InputRightElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\"\n}\n"]},"metadata":{},"sourceType":"module"}