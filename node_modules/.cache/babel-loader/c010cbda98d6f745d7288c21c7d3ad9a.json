{"ast":null,"code":"import * as React from \"react\";\nexport function useEventListeners() {\n  var listeners = React.useRef(new Map());\n  var currentListeners = listeners.current;\n  var add = React.useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, {\n      type,\n      el,\n      options\n    });\n    el.addEventListener(type, listener, options);\n  }, []);\n  var remove = React.useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options);\n    listeners.current.delete(listener);\n  }, []);\n  React.useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}","map":{"version":3,"sources":["../../src/use-event-listeners.ts"],"names":["React","useEventListeners","listeners","useRef","Map","currentListeners","current","add","useCallback","el","type","listener","options","set","addEventListener","remove","removeEventListener","delete","useEffect","forEach","value","key"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AA6BA,OAAO,SAASC,iBAAT,CAAA,EAA6C;EAClD,IAAMC,SAAS,GAAGF,KAAK,CAACG,MAANH,CAAa,IAAII,GAAJ,CAAA,CAAbJ,CAAlB;EACA,IAAMK,gBAAgB,GAAGH,SAAS,CAACI,OAAnC;EAEA,IAAMC,GAAG,GAAG,KAAK,CAACC,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;IAC7DV,SAAS,CAACI,OAAVJ,CAAkBW,GAAlBX,CAAsBS,QAAtBT,EAAgC;MAAEQ,IAAF;MAAQD,EAAR;MAAYG;IAAZ,CAAhCV,CAAAA;IACAO,EAAE,CAACK,gBAAHL,CAAoBC,IAApBD,EAA0BE,QAA1BF,EAAoCG,OAApCH,CAAAA;EACD,CAHW,EAGT,EAHS,CAAZ;EAKA,IAAMM,MAAM,GAAG,KAAK,CAACP,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;IAChEH,EAAE,CAACO,mBAAHP,CAAuBC,IAAvBD,EAA6BE,QAA7BF,EAAuCG,OAAvCH,CAAAA;IACAP,SAAS,CAACI,OAAVJ,CAAkBe,MAAlBf,CAAyBS,QAAzBT,CAAAA;EACD,CAHc,EAGZ,EAHY,CAAf;EAKAF,KAAK,CAACkB,SAANlB,CACE,MAAM,MAAM;IACVK,gBAAgB,CAACc,OAAjBd,CAAyB,CAACe,KAAD,EAAQC,GAAR,KAAgB;MACvCN,MAAM,CAACK,KAAK,CAACX,EAAP,EAAWW,KAAK,CAACV,IAAjB,EAAuBW,GAAvB,EAA4BD,KAAK,CAACR,OAAlC,CAANG;IACD,CAFDV,CAAAA;EAGD,CALHL,EAME,CAACe,MAAD,EAASV,gBAAT,CANFL,CAAAA;EASA,OAAO;IAAEO,GAAF;IAAOQ;EAAP,CAAP;AACD","sourcesContent":["import * as React from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListeners(): EventListeners {\n  const listeners = React.useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = React.useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, { type, el, options })\n    el.addEventListener(type, listener, options)\n  }, [])\n\n  const remove = React.useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options)\n    listeners.current.delete(listener)\n  }, [])\n\n  React.useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module"}