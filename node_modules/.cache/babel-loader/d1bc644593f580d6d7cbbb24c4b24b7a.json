{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, ColorModeContext, ThemeProvider, useChakra } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, noop } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { toast } from \"./toast.class\";\nimport { getToastPlacement } from \"./toast.placement\";\nvar Toast = props => {\n  var {\n    status,\n    variant,\n    id,\n    title,\n    isClosable,\n    onClose,\n    description\n  } = props;\n  var alertTitleId = typeof id !== \"undefined\" ? \"toast-\" + id + \"-title\" : undefined;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: id,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingEnd: 8,\n    textAlign: \"start\",\n    width: \"auto\",\n    \"aria-labelledby\": alertTitleId\n  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\",\n    maxWidth: \"100%\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, {\n    id: alertTitleId\n  }, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    insetEnd: 1,\n    top: 1\n  }));\n};\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\nexport var defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults\n};\n/**\n * Create a toast from outside of React Components\n */\n\nexport function createStandaloneToast(_temp) {\n  var {\n    theme = defaultStandaloneParam.theme,\n    colorMode = defaultStandaloneParam.colorMode,\n    toggleColorMode = defaultStandaloneParam.toggleColorMode,\n    setColorMode = defaultStandaloneParam.setColorMode,\n    defaultOptions = defaultStandaloneParam.defaultOptions\n  } = _temp === void 0 ? defaultStandaloneParam : _temp;\n  var renderWithProviders = (props, options) => /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: {\n      colorMode,\n      setColorMode,\n      toggleColorMode\n    }\n  }, isFunction(options.render) ? options.render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, options))));\n  var toastImpl = options => {\n    var opts = _extends({}, defaultOptions, options);\n    opts.position = getToastPlacement(opts.position, theme.direction);\n    var Message = props => renderWithProviders(props, opts);\n    return toast.notify(Message, opts);\n  };\n  toastImpl.close = toast.close;\n  toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id\n\n  toastImpl.update = (id, options) => {\n    if (!id) return;\n    var opts = _extends({}, defaultOptions, options);\n    opts.position = getToastPlacement(opts.position, theme.direction);\n    toast.update(id, _extends({}, opts, {\n      message: props => renderWithProviders(props, opts)\n    }));\n  };\n  toastImpl.isActive = toast.isActive;\n  return toastImpl;\n}\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\nexport function useToast(options) {\n  var {\n    theme,\n    setColorMode,\n    toggleColorMode,\n    colorMode\n  } = useChakra();\n  return React.useMemo(() => {\n    return createStandaloneToast({\n      theme,\n      colorMode,\n      setColorMode,\n      toggleColorMode,\n      defaultOptions: options\n    });\n  }, [theme, setColorMode, toggleColorMode, colorMode, options]);\n}\nexport default useToast;","map":{"version":3,"sources":["../../src/use-toast.tsx"],"names":["Alert","AlertDescription","AlertIcon","AlertTitle","CloseButton","chakra","ColorModeContext","ThemeProvider","useChakra","defaultTheme","isFunction","noop","React","toast","getToastPlacement","Toast","props","status","variant","id","title","isClosable","onClose","description","alertTitleId","undefined","defaults","duration","position","defaultStandaloneParam","theme","colorMode","toggleColorMode","setColorMode","defaultOptions","createStandaloneToast","renderWithProviders","options","render","toastImpl","opts","direction","Message","notify","close","closeAll","update","message","isActive","useToast","useMemo"],"mappings":"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","sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { isFunction, noop } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { toast } from \"./toast.class\"\nimport {\n  getToastPlacement,\n  ToastPositionWithLogical,\n  WithoutLogicalPosition,\n} from \"./toast.placement\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\n\nexport interface UseToastOptions {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPositionWithLogical\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   */\n  isClosable?: boolean\n  /**\n   * The alert component `variant` to use\n   */\n  variant?: \"subtle\" | \"solid\" | \"left-accent\" | \"top-accent\" | (string & {})\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n}\n\ntype UseToastOptionsNormalized = WithoutLogicalPosition<UseToastOptions>\n\nexport type IToast = UseToastOptions\n\nconst Toast: React.FC<any> = (props) => {\n  const { status, variant, id, title, isClosable, onClose, description } = props\n\n  const alertTitleId = typeof id !== \"undefined\" ? `toast-${id}-title` : undefined\n\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      id={id}\n      alignItems=\"start\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      paddingEnd={8}\n      textAlign=\"start\"\n      width=\"auto\"\n      aria-labelledby={alertTitleId}\n    >\n      <AlertIcon />\n      <chakra.div flex=\"1\" maxWidth=\"100%\">\n        {title && <AlertTitle id={alertTitleId}>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription display=\"block\">{description}</AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          insetEnd={1}\n          top={1}\n        />\n      )}\n    </Alert>\n  )\n}\n\nconst defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\",\n} as const\n\nexport type CreateStandAloneToastParam = Partial<\n  ReturnType<typeof useChakra> & {\n    setColorMode: (value: ColorMode) => void\n    defaultOptions: UseToastOptions\n  }\n>\n\nexport const defaultStandaloneParam: Required<CreateStandAloneToastParam> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults,\n}\n/**\n * Create a toast from outside of React Components\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n}: CreateStandAloneToastParam = defaultStandaloneParam) {\n  const renderWithProviders = (\n    props: React.PropsWithChildren<RenderProps>,\n    options: UseToastOptionsNormalized,\n  ) => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider\n        value={{ colorMode, setColorMode, toggleColorMode }}\n      >\n        {isFunction(options.render) ? (\n          options.render(props)\n        ) : (\n          <Toast {...props} {...options} />\n        )}\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  const toastImpl = (options?: UseToastOptions) => {\n    const opts = { ...defaultOptions, ...options } as UseToastOptionsNormalized\n    opts.position = getToastPlacement(opts.position, theme.direction)\n\n    const Message: React.FC<RenderProps> = (props) =>\n      renderWithProviders(props, opts)\n\n    return toast.notify(Message, opts)\n  }\n\n  toastImpl.close = toast.close\n  toastImpl.closeAll = toast.closeAll\n\n  // toasts can only be updated if they have a valid id\n  toastImpl.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n    if (!id) return\n\n    const opts = { ...defaultOptions, ...options } as UseToastOptionsNormalized\n    opts.position = getToastPlacement(opts.position, theme.direction)\n\n    toast.update(id, {\n      ...opts,\n      message: (props) => renderWithProviders(props, opts),\n    })\n  }\n\n  toastImpl.isActive = toast.isActive\n\n  return toastImpl\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions) {\n  const { theme, setColorMode, toggleColorMode, colorMode } = useChakra()\n  return React.useMemo(() => {\n    return createStandaloneToast({\n      theme,\n      colorMode,\n      setColorMode,\n      toggleColorMode,\n      defaultOptions: options,\n    })\n  }, [theme, setColorMode, toggleColorMode, colorMode, options])\n}\n\nexport default useToast\n"]},"metadata":{},"sourceType":"module"}