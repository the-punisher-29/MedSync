{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, layoutPropNames, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, mergeWith, split, __DEV__, dataAttr } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var SelectField = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      children,\n      placeholder,\n      className\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"children\", \"placeholder\", \"className\"]);\n  return /*#__PURE__*/React.createElement(chakra.select, _extends({}, rest, {\n    ref: ref,\n    className: cx(\"chakra-select\", className)\n  }), placeholder && /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\"\n  }, placeholder), children);\n});\nif (__DEV__) {\n  SelectField.displayName = \"SelectField\";\n}\n\n/**\n * React component used to select one item from a list of options.\n */\nexport var Select = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Select\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    {\n      rootProps,\n      placeholder,\n      icon,\n      color,\n      height,\n      h,\n      minH,\n      minHeight,\n      iconColor,\n      iconSize\n    } = _omitThemingProps,\n    rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"rootProps\", \"placeholder\", \"icon\", \"color\", \"height\", \"h\", \"minH\", \"minHeight\", \"iconColor\", \"iconSize\", \"isFullWidth\"]);\n  var [layoutProps, otherProps] = split(rest, layoutPropNames);\n  var ownProps = useFormControl(otherProps);\n  var rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  var fieldStyles = mergeWith({}, styles.field, {\n    paddingEnd: \"2rem\",\n    _focus: {\n      zIndex: \"unset\"\n    }\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-select__wrapper\",\n    __css: rootStyles\n  }, layoutProps, rootProps), /*#__PURE__*/React.createElement(SelectField, _extends({\n    ref: ref,\n    height: h != null ? h : height,\n    minH: minH != null ? minH : minHeight,\n    placeholder: placeholder\n  }, ownProps, {\n    __css: fieldStyles\n  }), props.children), /*#__PURE__*/React.createElement(SelectIcon, _extends({\n    \"data-disabled\": dataAttr(ownProps.disabled)\n  }, (iconColor || color) && {\n    color: iconColor || color\n  }, {\n    __css: styles.icon\n  }, iconSize && {\n    fontSize: iconSize\n  }), icon));\n});\nif (__DEV__) {\n  Select.displayName = \"Select\";\n}\nexport var DefaultIcon = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 24 24\"\n}, props), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n}));\nvar IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nvar SelectIcon = props => {\n  var {\n      children = /*#__PURE__*/React.createElement(DefaultIcon, null)\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"children\"]);\n  var clone = /*#__PURE__*/React.cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /*#__PURE__*/React.createElement(IconWrapper, _extends({}, rest, {\n    className: \"chakra-select__icon-wrapper\"\n  }), /*#__PURE__*/React.isValidElement(children) ? clone : null);\n};\nif (__DEV__) {\n  SelectIcon.displayName = \"SelectIcon\";\n}","map":{"version":3,"sources":["../../src/select.tsx"],"names":["useFormControl","chakra","forwardRef","layoutPropNames","omitThemingProps","useMultiStyleConfig","cx","mergeWith","split","__DEV__","dataAttr","React","SelectField","props","ref","children","placeholder","className","rest","displayName","Select","styles","rootProps","icon","color","height","h","minH","minHeight","iconColor","iconSize","layoutProps","otherProps","ownProps","rootStyles","width","position","fieldStyles","field","paddingEnd","_focus","zIndex","disabled","fontSize","DefaultIcon","IconWrapper","baseStyle","display","alignItems","justifyContent","pointerEvents","top","transform","SelectIcon","clone","cloneElement","role","focusable","style","isValidElement"],"mappings":"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","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  PropsOf,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, mergeWith, split, __DEV__, dataAttr } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface SelectFieldProps\n  extends Omit<HTMLChakraProps<\"select\">, Omitted> {\n  isDisabled?: boolean\n}\n\nexport const SelectField = forwardRef<SelectFieldProps, \"select\">(\n  (props, ref) => {\n    const { children, placeholder, className, ...rest } = props\n\n    return (\n      <chakra.select\n        {...rest}\n        ref={ref}\n        className={cx(\"chakra-select\", className)}\n      >\n        {placeholder && <option value=\"\">{placeholder}</option>}\n        {children}\n      </chakra.select>\n    )\n  },\n)\n\nif (__DEV__) {\n  SelectField.displayName = \"SelectField\"\n}\n\ninterface RootProps extends Omit<HTMLChakraProps<\"div\">, \"color\"> {}\n\ninterface SelectOptions extends FormControlOptions {\n  /**\n   * The border color when the select is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the select is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the select element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n  /**\n   * The placeholder for the select. We render an `<option/>` element that has\n   * empty value.\n   *\n   * ```jsx\n   * <option value=\"\">{placeholder}</option>\n   * ```\n   */\n  placeholder?: string\n  /**\n   * The size (width and height) of the icon\n   */\n  iconSize?: string\n  /**\n   * The color of the icon\n   */\n  iconColor?: string\n}\n\nexport interface SelectProps\n  extends SelectFieldProps,\n    ThemingProps<\"Select\">,\n    SelectOptions {\n  /**\n   * Props to forward to the root `div` element\n   */\n  rootProps?: RootProps\n  /**\n   * The icon element to use in the select\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement<any>\n}\n\n/**\n * React component used to select one item from a list of options.\n */\nexport const Select = forwardRef<SelectProps, \"select\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Select\", props)\n\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    isFullWidth,\n    ...rest\n  } = omitThemingProps(props)\n\n  const [layoutProps, otherProps] = split(rest, layoutPropNames as any[])\n\n  const ownProps = useFormControl(otherProps)\n\n  const rootStyles: SystemStyleObject = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color,\n  }\n\n  const fieldStyles: SystemStyleObject = mergeWith({}, styles.field, {\n    paddingEnd: \"2rem\",\n    _focus: { zIndex: \"unset\" },\n  })\n\n  return (\n    <chakra.div\n      className=\"chakra-select__wrapper\"\n      __css={rootStyles}\n      {...layoutProps}\n      {...rootProps}\n    >\n      <SelectField\n        ref={ref}\n        height={h ?? height}\n        minH={minH ?? minHeight}\n        placeholder={placeholder}\n        {...ownProps}\n        __css={fieldStyles}\n      >\n        {props.children}\n      </SelectField>\n\n      <SelectIcon\n        data-disabled={dataAttr(ownProps.disabled)}\n        {...((iconColor || color) && { color: iconColor || color })}\n        __css={styles.icon}\n        {...(iconSize && { fontSize: iconSize })}\n      >\n        {icon}\n      </SelectIcon>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Select.displayName = \"Select\"\n}\n\nexport const DefaultIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n    />\n  </svg>\n)\n\nconst IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n})\n\ninterface SelectIconProps extends HTMLChakraProps<\"div\"> {}\n\nconst SelectIcon: React.FC<SelectIconProps> = (props) => {\n  const { children = <DefaultIcon />, ...rest } = props\n\n  const clone = React.cloneElement(children as any, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\",\n    },\n  })\n\n  return (\n    <IconWrapper {...rest} className=\"chakra-select__icon-wrapper\">\n      {React.isValidElement(children) ? clone : null}\n    </IconWrapper>\n  )\n}\n\nif (__DEV__) {\n  SelectIcon.displayName = \"SelectIcon\"\n}\n"]},"metadata":{},"sourceType":"module"}