{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { omit, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useImage } from \"./use-image\";\nvar NativeImage = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var {\n      htmlWidth,\n      htmlHeight,\n      alt\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"htmlWidth\", \"htmlHeight\", \"alt\"]);\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    width: htmlWidth,\n    height: htmlHeight,\n    ref: ref,\n    alt: alt\n  }, rest));\n});\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport var Image = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      fallbackSrc,\n      fallback,\n      src,\n      srcSet,\n      align,\n      fit,\n      loading,\n      ignoreFallback,\n      crossOrigin\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"fallbackSrc\", \"fallback\", \"src\", \"srcSet\", \"align\", \"fit\", \"loading\", \"ignoreFallback\", \"crossOrigin\"]);\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   */\n\n  var shouldIgnore = loading != null || ignoreFallback || fallbackSrc === undefined && fallback === undefined; // if the user doesn't provide any kind of fallback we should ignore it\n\n  var status = useImage(_extends({}, props, {\n    ignoreFallback: shouldIgnore\n  }));\n  var shared = _extends({\n    ref,\n    objectFit: fit,\n    objectPosition: align\n  }, shouldIgnore ? rest : omit(rest, [\"onError\", \"onLoad\"]));\n  if (status !== \"loaded\") {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback;\n    return /*#__PURE__*/React.createElement(chakra.img, _extends({\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc\n    }, shared));\n  }\n  return /*#__PURE__*/React.createElement(chakra.img, _extends({\n    as: NativeImage,\n    src: src,\n    srcSet: srcSet,\n    crossOrigin: crossOrigin,\n    loading: loading,\n    className: \"chakra-image\"\n  }, shared));\n});\n\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\nexport var Img = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(chakra.img, _extends({\n  ref: ref,\n  as: NativeImage,\n  className: \"chakra-image\"\n}, props)));\nif (__DEV__) {\n  Image.displayName = \"Image\";\n}","map":{"version":3,"sources":["../../src/image.tsx"],"names":["chakra","forwardRef","omit","__DEV__","React","useImage","NativeImage","props","ref","htmlWidth","htmlHeight","alt","rest","Image","fallbackSrc","fallback","src","srcSet","align","fit","loading","ignoreFallback","crossOrigin","shouldIgnore","undefined","status","shared","objectFit","objectPosition","Img","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  PropsOf,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useImage, UseImageProps } from \"./use-image\"\n\ninterface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nconst NativeImage = React.forwardRef(\n  (props: NativeImageProps, ref: React.Ref<any>) => {\n    const { htmlWidth, htmlHeight, alt, ...rest } = props\n    return (\n      <img\n        width={htmlWidth}\n        height={htmlHeight}\n        ref={ref}\n        alt={alt}\n        {...rest}\n      />\n    )\n  },\n)\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">((props, ref) => {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    ...rest\n  } = props\n\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   */\n  const shouldIgnore =\n    loading != null ||\n    ignoreFallback ||\n    (fallbackSrc === undefined && fallback === undefined) // if the user doesn't provide any kind of fallback we should ignore it\n\n  const status = useImage({\n    ...props,\n    ignoreFallback: shouldIgnore,\n  })\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnore ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (status !== \"loaded\") {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nexport interface ImgProps extends HTMLChakraProps<\"img\">, NativeImageOptions {}\n\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\nexport const Img = forwardRef<ImgProps, \"img\">((props, ref) => (\n  <chakra.img ref={ref} as={NativeImage} className=\"chakra-image\" {...props} />\n))\n\nif (__DEV__) {\n  Image.displayName = \"Image\"\n}\n"]},"metadata":{},"sourceType":"module"}