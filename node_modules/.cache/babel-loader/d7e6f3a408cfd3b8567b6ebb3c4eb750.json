{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn, omit } from \"@chakra-ui/utils\";\nimport { useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useChakra } from \"./hooks\";\nexport function useStyleConfig(themeKey, props, opts) {\n  var _styleConfig$defaultP;\n  if (props === void 0) {\n    props = {};\n  }\n  if (opts === void 0) {\n    opts = {};\n  }\n  var {\n      styleConfig: styleConfigProp\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"styleConfig\"]);\n  var {\n    theme,\n    colorMode\n  } = useChakra();\n  var themeStyleConfig = get(theme, \"components.\" + themeKey);\n  var styleConfig = styleConfigProp || themeStyleConfig;\n  var mergedProps = mergeWith({\n    theme,\n    colorMode\n  }, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, filterUndefined(omit(rest, [\"children\"])));\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n\n  var stylesRef = useRef({});\n  if (styleConfig) {\n    var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$me, _styleConfig$sizes, _opts;\n    var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n    var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n    var sizes = runIfFn((_styleConfig$sizes$me = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[mergedProps.size]) != null ? _styleConfig$sizes$me : {}, mergedProps);\n    var styles = mergeWith({}, baseStyles, sizes, variants);\n    if ((_opts = opts) != null && _opts.isMultiPart && styleConfig.parts) {\n      styleConfig.parts.forEach(part => {\n        var _styles$part;\n        styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n      });\n    }\n    var isStyleEqual = isEqual(stylesRef.current, styles);\n    if (!isStyleEqual) {\n      stylesRef.current = styles;\n    }\n  }\n  return stylesRef.current;\n}\nexport function useMultiStyleConfig(themeKey, props) {\n  return useStyleConfig(themeKey, props, {\n    isMultiPart: true\n  });\n}","map":{"version":3,"sources":["../../src/use-style-config.ts"],"names":["filterUndefined","memoizedGet","get","mergeWith","runIfFn","omit","useRef","isEqual","useChakra","useStyleConfig","themeKey","props","opts","styleConfig","styleConfigProp","rest","theme","colorMode","themeStyleConfig","mergedProps","defaultProps","stylesRef","baseStyles","baseStyle","variants","variant","sizes","size","styles","isMultiPart","parts","forEach","part","isStyleEqual","current","useMultiStyleConfig"],"mappings":"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","sourcesContent":["import { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  omit,\n  Dict,\n} from \"@chakra-ui/utils\"\nimport { useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\nimport { ThemingProps } from \"./system.types\"\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict,\n  opts: { isMultiPart: true },\n): Record<string, SystemStyleObject>\n\nexport function useStyleConfig(\n  themeKey: string,\n  props?: ThemingProps & Dict,\n  opts?: { isMultiPart?: boolean },\n): SystemStyleObject\n\nexport function useStyleConfig(themeKey: any, props: any = {}, opts: any = {}) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  type StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n  const stylesRef = useRef<StylesRef>({})\n\n  if (styleConfig) {\n    const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n    const variants = runIfFn(\n      styleConfig.variants?.[mergedProps.variant] ?? {},\n      mergedProps,\n    )\n\n    const sizes = runIfFn(\n      styleConfig.sizes?.[mergedProps.size] ?? {},\n      mergedProps,\n    )\n\n    const styles = mergeWith({}, baseStyles, sizes, variants)\n\n    if (opts?.isMultiPart && styleConfig.parts) {\n      styleConfig.parts.forEach((part: string) => {\n        styles[part] = styles[part] ?? {}\n      })\n    }\n\n    const isStyleEqual = isEqual(stylesRef.current, styles)\n\n    if (!isStyleEqual) {\n      stylesRef.current = styles\n    }\n  }\n\n  return stylesRef.current\n}\n\nexport function useMultiStyleConfig(themeKey: string, props: any) {\n  return useStyleConfig(themeKey, props, { isMultiPart: true })\n}\n"]},"metadata":{},"sourceType":"module"}