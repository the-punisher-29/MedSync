{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { CheckIcon, InfoIcon, WarningIcon } from \"./icons\";\nvar STATUSES = {\n  info: {\n    icon: InfoIcon,\n    colorScheme: \"blue\"\n  },\n  warning: {\n    icon: WarningIcon,\n    colorScheme: \"orange\"\n  },\n  success: {\n    icon: CheckIcon,\n    colorScheme: \"green\"\n  },\n  error: {\n    icon: WarningIcon,\n    colorScheme: \"red\"\n  }\n};\nvar [AlertProvider, useAlertContext] = createContext({\n  name: \"AlertContext\",\n  errorMessage: \"useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`\"\n});\n\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n */\nexport var Alert = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$colorScheme;\n  var _omitThemingProps = omitThemingProps(props),\n    {\n      status = \"info\"\n    } = _omitThemingProps,\n    rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"status\"]);\n  var colorScheme = (_props$colorScheme = props.colorScheme) != null ? _props$colorScheme : STATUSES[status].colorScheme;\n  var styles = useMultiStyleConfig(\"Alert\", _extends({}, props, {\n    colorScheme\n  }));\n  var alertStyles = _extends({\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\"\n  }, styles.container);\n  return /*#__PURE__*/React.createElement(AlertProvider, {\n    value: {\n      status\n    }\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    role: \"alert\",\n    ref: ref\n  }, rest, {\n    className: cx(\"chakra-alert\", props.className),\n    __css: alertStyles\n  }))));\n});\nexport var AlertTitle = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-alert__title\", props.className),\n    __css: styles.title\n  }));\n});\nexport var AlertDescription = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  var descriptionStyles = _extends({\n    display: \"inline\"\n  }, styles.description);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-alert__desc\", props.className),\n    __css: descriptionStyles\n  }));\n});\nexport var AlertIcon = props => {\n  var {\n    status\n  } = useAlertContext();\n  var {\n    icon: BaseIcon\n  } = STATUSES[status];\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    display: \"inherit\"\n  }, props, {\n    className: cx(\"chakra-alert__icon\", props.className),\n    __css: styles.icon\n  }), /*#__PURE__*/React.createElement(BaseIcon, {\n    w: \"100%\",\n    h: \"100%\"\n  }));\n};","map":{"version":3,"sources":["../../src/alert.tsx"],"names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","createContext","React","CheckIcon","InfoIcon","WarningIcon","STATUSES","info","icon","colorScheme","warning","success","error","AlertProvider","useAlertContext","name","errorMessage","Alert","props","ref","status","rest","styles","alertStyles","width","display","alignItems","position","overflow","container","className","AlertTitle","title","AlertDescription","descriptionStyles","description","AlertIcon","BaseIcon"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { CheckIcon, InfoIcon, WarningIcon } from \"./icons\"\n\nconst STATUSES = {\n  info: { icon: InfoIcon, colorScheme: \"blue\" },\n  warning: { icon: WarningIcon, colorScheme: \"orange\" },\n  success: { icon: CheckIcon, colorScheme: \"green\" },\n  error: { icon: WarningIcon, colorScheme: \"red\" },\n}\n\nexport type AlertStatus = keyof typeof STATUSES\n\ninterface AlertContext {\n  status: AlertStatus\n}\n\nconst [AlertProvider, useAlertContext] = createContext<AlertContext>({\n  name: \"AlertContext\",\n  errorMessage:\n    \"useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`\",\n})\n\ninterface AlertOptions {\n  /**\n   * The status of the alert\n   */\n  status?: AlertStatus\n}\n\nexport interface AlertProps\n  extends HTMLChakraProps<\"div\">,\n    AlertOptions,\n    ThemingProps<\"Alert\"> {}\n\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n */\nexport const Alert = forwardRef<AlertProps, \"div\">((props, ref) => {\n  const { status = \"info\", ...rest } = omitThemingProps(props)\n  const colorScheme = props.colorScheme ?? STATUSES[status].colorScheme\n\n  const styles = useMultiStyleConfig(\"Alert\", { ...props, colorScheme })\n\n  const alertStyles: SystemStyleObject = {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    ...styles.container,\n  }\n\n  return (\n    <AlertProvider value={{ status }}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          role=\"alert\"\n          ref={ref}\n          {...rest}\n          className={cx(\"chakra-alert\", props.className)}\n          __css={alertStyles}\n        />\n      </StylesProvider>\n    </AlertProvider>\n  )\n})\n\nexport interface AlertTitleProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertTitle = forwardRef<AlertTitleProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-alert__title\", props.className)}\n      __css={styles.title}\n    />\n  )\n})\n\nexport interface AlertDescriptionProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertDescription = forwardRef<AlertDescriptionProps, \"div\">(\n  (props, ref) => {\n    const styles = useStyles()\n    const descriptionStyles: SystemStyleObject = {\n      display: \"inline\",\n      ...styles.description,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-alert__desc\", props.className)}\n        __css={descriptionStyles}\n      />\n    )\n  },\n)\n\nexport interface AlertIconProps extends HTMLChakraProps<\"span\"> {}\n\nexport const AlertIcon: React.FC<AlertIconProps> = (props) => {\n  const { status } = useAlertContext()\n  const { icon: BaseIcon } = STATUSES[status]\n  const styles = useStyles()\n\n  return (\n    <chakra.span\n      display=\"inherit\"\n      {...props}\n      className={cx(\"chakra-alert__icon\", props.className)}\n      __css={styles.icon}\n    >\n      <BaseIcon w=\"100%\" h=\"100%\" />\n    </chakra.span>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}