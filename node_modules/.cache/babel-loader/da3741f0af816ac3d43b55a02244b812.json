{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { addListener, getColorScheme, syncBodyClassName, root } from \"./color-mode.utils\";\nimport { localStorageManager } from \"./storage-manager\";\nexport var ColorModeContext = /*#__PURE__*/React.createContext({});\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\nexport var useColorMode = () => {\n  var context = React.useContext(ColorModeContext);\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n  return context;\n};\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props) {\n  var {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode\n    },\n    colorModeManager = localStorageManager\n  } = props;\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var [colorMode, rawSetColorMode] = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(initialColorMode) : initialColorMode);\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var mode = useSystemColorMode ? getColorScheme(initialColorMode) : root.get() || colorModeManager.get();\n      if (mode) {\n        rawSetColorMode(mode);\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode]);\n  React.useEffect(() => {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode]);\n  var setColorMode = React.useCallback(value => {\n    colorModeManager.set(value);\n    rawSetColorMode(value);\n  }, [colorModeManager]);\n  var toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(() => {\n    var removeListener;\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode);\n    }\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode]); // presence of `value` indicates a controlled context\n\n  var context = React.useMemo(() => ({\n    colorMode: value != null ? value : colorMode,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode\n  }), [colorMode, setColorMode, toggleColorMode, value]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\nexport var DarkMode = props => /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n  value: {\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop\n  }\n}, props));\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\nexport var LightMode = props => /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n  value: {\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop\n  }\n}, props));\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\nexport function useColorModeValue(light, dark) {\n  var {\n    colorMode\n  } = useColorMode();\n  return colorMode === \"dark\" ? dark : light;\n}","map":{"version":3,"sources":["../../src/color-mode-provider.tsx"],"names":["isBrowser","noop","__DEV__","React","addListener","getColorScheme","syncBodyClassName","root","localStorageManager","ColorModeContext","createContext","displayName","useColorMode","context","useContext","undefined","Error","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","colorModeManager","colorMode","rawSetColorMode","useState","type","get","useEffect","mode","isDark","set","setColorMode","useCallback","toggleColorMode","removeListener","useMemo","DarkMode","LightMode","useColorModeValue","light","dark"],"mappings":"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","sourcesContent":["import { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  syncBodyClassName,\n  root,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    colorModeManager.type === \"cookie\"\n      ? colorModeManager.get(initialColorMode)\n      : initialColorMode,\n  )\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      const mode = useSystemColorMode\n        ? getColorScheme(initialColorMode)\n        : root.get() || colorModeManager.get()\n\n      if (mode) {\n        rawSetColorMode(mode)\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark)\n    root.set(isDark ? \"dark\" : \"light\")\n  }, [colorMode])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode) => {\n      colorModeManager.set(value)\n      rawSetColorMode(value)\n    },\n    [colorModeManager],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    let removeListener: any\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode)\n    }\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener()\n      }\n    }\n  }, [setColorMode, useSystemColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = React.useMemo(\n    () => ({\n      colorMode: (value ?? colorMode) as ColorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n    }),\n    [colorMode, setColorMode, toggleColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n"]},"metadata":{},"sourceType":"module"}