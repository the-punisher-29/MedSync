{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var ButtonSpinner = props => {\n  var {\n      label,\n      placement,\n      children = /*#__PURE__*/React.createElement(Spinner, {\n        color: \"currentColor\",\n        width: \"1em\",\n        height: \"1em\"\n      }),\n      className,\n      __css\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"label\", \"placement\", \"spacing\", \"children\", \"className\", \"__css\"]);\n  var _className = cx(\"chakra-button__spinner\", className);\n  var marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  var spinnerStyles = React.useMemo(() => _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    [marginProp]: label ? \"0.5rem\" : 0,\n    fontSize: \"1em\",\n    lineHeight: \"normal\"\n  }, __css), [__css, label, marginProp]);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className\n  }, rest, {\n    __css: spinnerStyles\n  }), children);\n};\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\";\n}","map":{"version":3,"sources":["../../src/button-spinner.tsx"],"names":["Spinner","chakra","cx","__DEV__","React","ButtonSpinner","props","label","placement","children","className","__css","rest","_className","marginProp","spinnerStyles","useMemo","display","alignItems","position","fontSize","lineHeight","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SACEC,MADF,QAKO,mBALP;AAMA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAWA,OAAO,IAAMC,aAA2C,GAAIC,KAAD,IAAW;EACpE,IAAM;MACJC,KADI;MAEJC,SAFI;MAIJC,QAAQ,GAAA,aAAG,KAAA,CAAA,aAAA,CAAC,OAAD,EAAA;QAAS,KAAK,EAAC,cAAf;QAA8B,KAAK,EAAC,KAApC;QAA0C,MAAM,EAAC;MAAjD,CAAA,CAJP;MAKJC,SALI;MAMJC;IANI,CAAA,GAQFL,KARJ;IAOKM,IAPL,GAAA,6BAAA,CAQIN,KARJ,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,WAAA,EAAA,OAAA,CAAA,CAAA;EAUA,IAAMO,UAAU,GAAGX,EAAE,CAAC,wBAAD,EAA2BQ,SAA3B,CAArB;EAEA,IAAMI,UAAU,GAAGN,SAAS,KAAK,OAAdA,GAAwB,WAAxBA,GAAsC,aAAzD;EAEA,IAAMO,aAAgC,GAAG,KAAK,CAACC,OAAN,CACvC,MAAA,QAAA,CAAA;IACEC,OAAO,EAAE,MADX;IAEEC,UAAU,EAAE,QAFd;IAGEC,QAAQ,EAAEZ,KAAK,GAAG,UAAH,GAAgB,UAHjC;IAIE,CAACO,UAAD,GAAcP,KAAK,GAAG,QAAH,GAAc,CAJnC;IAKEa,QAAQ,EAAE,KALZ;IAMEC,UAAU,EAAE;EANd,CAAA,EAOKV,KAPL,CADuC,EAUvC,CAACA,KAAD,EAAQJ,KAAR,EAAeO,UAAf,CAVuC,CAAzC;EAaA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAQ,GAAR,EAAA,QAAA,CAAA;IAAY,SAAS,EAAED;EAAvB,CAAA,EAAuCD,IAAvC,EAAA;IAA6C,KAAK,EAAEG;EAApD,CAAA,CAAA,EACGN,QADH,CADF;AAKD,CAjCM;AAkCP,IAAIN,OAAJ,EAAa;EACXE,aAAa,CAACiB,WAAdjB,GAA4B,eAA5BA;AACD","sourcesContent":["import { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  HTMLChakraProps,\n  SystemProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  placement?: \"start\" | \"end\"\n}\n\nexport const ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    placement,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? \"0.5rem\" : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"]},"metadata":{},"sourceType":"module"}