{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { db } from '../config/firebase.js'; // Adjust the path if necessary\n\nconst useFetch = collectionName => {\n  _s();\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let documents = [];\n\n        if (collectionName === 'products') {\n          // Fetch data from Firestore for products\n          const querySnapshot = await getDocs(collection(db, collectionName));\n          documents = querySnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n        } else if (collectionName === 'services' || collectionName === 'testimonials') {\n          // Fetch data from JSON files for services and testimonials\n          const response = await fetch(`/database/${collectionName}.json`);\n          const jsonData = await response.json();\n          documents = jsonData;\n        }\n\n        setData(documents);\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n      }\n    };\n\n    fetchData();\n  }, [collectionName]);\n  return [data];\n};\n\n_s(useFetch, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\nexport default useFetch;","map":{"version":3,"sources":["E:/Pr/Web D/MedSync/src/hooks/useFetch.js"],"names":["useEffect","useState","collection","getDocs","db","useFetch","collectionName","data","setData","fetchData","documents","querySnapshot","docs","map","doc","id","response","fetch","jsonData","json","error","console"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,oBAApC;AACA,SAASC,EAAT,QAAmB,uBAAnB,C,CAA4C;;AAE5C,MAAMC,QAAQ,GAAIC,cAAD,IAAoB;AAAA;;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,SAAS,GAAG,YAAY;AAC1B,UAAI;AACA,YAAIC,SAAS,GAAG,EAAhB;;AAEA,YAAIJ,cAAc,KAAK,UAAvB,EAAmC;AAC/B;AACA,gBAAMK,aAAa,GAAG,MAAMR,OAAO,CAACD,UAAU,CAACE,EAAD,EAAKE,cAAL,CAAX,CAAnC;AACAI,UAAAA,SAAS,GAAGC,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,KAAK;AACvCC,YAAAA,EAAE,EAAED,GAAG,CAACC,EAD+B;AAEvC,eAAGD,GAAG,CAACP,IAAJ;AAFoC,WAAL,CAA1B,CAAZ;AAIH,SAPD,MAOO,IAAID,cAAc,KAAK,UAAnB,IAAiCA,cAAc,KAAK,cAAxD,EAAwE;AAC3E;AACA,gBAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,aAAYX,cAAe,OAA7B,CAA5B;AACA,gBAAMY,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACAT,UAAAA,SAAS,GAAGQ,QAAZ;AACH;;AAEDV,QAAAA,OAAO,CAACE,SAAD,CAAP;AACH,OAlBD,CAkBE,OAAOU,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACH;AACJ,KAtBD;;AAwBAX,IAAAA,SAAS;AACZ,GA1BQ,EA0BN,CAACH,cAAD,CA1BM,CAAT;AA4BA,SAAO,CAACC,IAAD,CAAP;AACH,CAhCD;;GAAMF,Q;;AAkCN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { collection, getDocs } from 'firebase/firestore';\r\nimport { db } from '../config/firebase.js'; // Adjust the path if necessary\r\n\r\nconst useFetch = (collectionName) => {\r\n    const [data, setData] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let documents = [];\r\n\r\n                if (collectionName === 'products') {\r\n                    // Fetch data from Firestore for products\r\n                    const querySnapshot = await getDocs(collection(db, collectionName));\r\n                    documents = querySnapshot.docs.map(doc => ({\r\n                        id: doc.id,\r\n                        ...doc.data()\r\n                    }));\r\n                } else if (collectionName === 'services' || collectionName === 'testimonials') {\r\n                    // Fetch data from JSON files for services and testimonials\r\n                    const response = await fetch(`/database/${collectionName}.json`);\r\n                    const jsonData = await response.json();\r\n                    documents = jsonData;\r\n                }\r\n\r\n                setData(documents);\r\n            } catch (error) {\r\n                console.error(\"Error fetching data: \", error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [collectionName]);\r\n\r\n    return [data];\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}