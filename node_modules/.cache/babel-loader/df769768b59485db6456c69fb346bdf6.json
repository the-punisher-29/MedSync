{"ast":null,"code":"import { isObject } from \"@chakra-ui/utils\";\nimport { mergeThemeOverride } from \"../extend-theme\";\nexport function withDefaultColorScheme(_ref) {\n  var {\n    colorScheme,\n    components\n  } = _ref;\n  return theme => {\n    var names = Object.keys(theme.components || {});\n    if (Array.isArray(components)) {\n      names = components;\n    } else if (isObject(components)) {\n      names = Object.keys(components);\n    }\n    return mergeThemeOverride(theme, {\n      components: Object.fromEntries(names.map(componentName => {\n        var withColorScheme = {\n          defaultProps: {\n            colorScheme\n          }\n        };\n        return [componentName, withColorScheme];\n      }))\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/theme-extensions/with-default-color-scheme.ts"],"names":["isObject","mergeThemeOverride","withDefaultColorScheme","colorScheme","components","theme","names","Object","keys","Array","isArray","fromEntries","map","componentName","withColorScheme","defaultProps"],"mappings":"AACA,SAAeA,QAAf,QAA+B,kBAA/B;AACA,SAASC,kBAAT,QAAmD,iBAAnD;AAEA,OAAO,SAASC,sBAAT,CAAA,IAAA,EAMY;EAAA,IANoB;IACrCC,WADqC;IAErCC;EAFqC,CAMpB,GAAA,IAAA;EACjB,OAAQC,KAAD,IAAW;IAChB,IAAIC,KAAK,GAAGC,MAAM,CAACC,IAAPD,CAAYF,KAAK,CAACD,UAANC,IAAoB,CAAA,CAAhCE,CAAZ;IAEA,IAAIE,KAAK,CAACC,OAAND,CAAcL,UAAdK,CAAJ,EAA+B;MAC7BH,KAAK,GAAGF,UAARE;IACD,CAFD,MAEO,IAAIN,QAAQ,CAACI,UAAD,CAAZ,EAA0B;MAC/BE,KAAK,GAAGC,MAAM,CAACC,IAAPD,CAAYH,UAAZG,CAARD;IACD;IAED,OAAOL,kBAAkB,CAACI,KAAD,EAAQ;MAC/BD,UAAU,EAAE,MAAM,CAACO,WAAP,CACV,KAAK,CAACC,GAAN,CAAWC,aAAD,IAAmB;QAC3B,IAAMC,eAAe,GAAG;UACtBC,YAAY,EAAE;YACZZ;UADY;QADQ,CAAxB;QAKA,OAAO,CAACU,aAAD,EAAgBC,eAAhB,CAAP;MACD,CAPD,CADU;IADmB,CAAR,CAAzB;EAYD,CArBD;AAsBD","sourcesContent":["import { ThemingProps } from \"@chakra-ui/system\"\nimport { Dict, isObject } from \"@chakra-ui/utils\"\nimport { mergeThemeOverride, ThemeExtension } from \"../extend-theme\"\n\nexport function withDefaultColorScheme({\n  colorScheme,\n  components,\n}: {\n  colorScheme: ThemingProps[\"colorScheme\"]\n  components?: string[] | Dict\n}): ThemeExtension {\n  return (theme) => {\n    let names = Object.keys(theme.components || {})\n\n    if (Array.isArray(components)) {\n      names = components\n    } else if (isObject(components)) {\n      names = Object.keys(components)\n    }\n\n    return mergeThemeOverride(theme, {\n      components: Object.fromEntries(\n        names.map((componentName) => {\n          const withColorScheme = {\n            defaultProps: {\n              colorScheme,\n            },\n          }\n          return [componentName, withColorScheme]\n        }),\n      ),\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}