{"ast":null,"code":"function _wrapRegExp(re, groups) {\n  _wrapRegExp = function _wrapRegExp(re, groups) {\n    return new BabelRegExp(re, undefined, groups);\n  };\n  var _RegExp = _wrapNativeSuper(RegExp);\n  var _super = RegExp.prototype;\n  var _groups = new WeakMap();\n  function BabelRegExp(re, flags, groups) {\n    var _this = _RegExp.call(this, re, flags);\n    _groups.set(_this, groups || _groups.get(re));\n    return _this;\n  }\n  _inherits(BabelRegExp, _RegExp);\n  BabelRegExp.prototype.exec = function (str) {\n    var result = _super.exec.call(this, str);\n    if (result) result.groups = buildGroups(result, this);\n    return result;\n  };\n  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {\n    if (typeof substitution === \"string\") {\n      var groups = _groups.get(this);\n      return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) {\n        return \"$\" + groups[name];\n      }));\n    } else if (typeof substitution === \"function\") {\n      var _this = this;\n      return _super[Symbol.replace].call(this, str, function () {\n        var args = [];\n        args.push.apply(args, arguments);\n        if (typeof args[args.length - 1] !== \"object\") {\n          args.push(buildGroups(args, _this));\n        }\n        return substitution.apply(this, args);\n      });\n    } else {\n      return _super[Symbol.replace].call(this, str, substitution);\n    }\n  };\n  function buildGroups(result, re) {\n    var g = _groups.get(re);\n    return Object.keys(g).reduce(function (groups, name) {\n      groups[name] = result[g[name]];\n      return groups;\n    }, Object.create(null));\n  }\n  return _wrapRegExp.apply(this, arguments);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nimport { isString } from \"@chakra-ui/utils\";\nvar directionMap = {\n  \"to-t\": \"to top\",\n  \"to-tr\": \"to top right\",\n  \"to-r\": \"to right\",\n  \"to-br\": \"to bottom right\",\n  \"to-b\": \"to bottom\",\n  \"to-bl\": \"to bottom left\",\n  \"to-l\": \"to left\",\n  \"to-tl\": \"to top left\"\n};\nvar valueSet = new Set(Object.values(directionMap));\nexport var globalSet = new Set([\"none\", \"-moz-initial\", \"inherit\", \"initial\", \"revert\", \"unset\"]);\nvar trimSpace = str => str.trim();\nexport function parseGradient(value, theme) {\n  var _regex$exec$groups, _regex$exec;\n  if (value == null || globalSet.has(value)) return value;\n  var regex = /*#__PURE__*/_wrapRegExp(/(^[\\x2DA-Za-z]+)\\(((.*))\\)/g, {\n    type: 1,\n    values: 2\n  });\n  var {\n    type,\n    values\n  } = (_regex$exec$groups = (_regex$exec = regex.exec(value)) == null ? void 0 : _regex$exec.groups) != null ? _regex$exec$groups : {};\n  if (!type || !values) return value;\n  var _type = type.includes(\"-gradient\") ? type : type + \"-gradient\";\n  var [maybeDirection, ...stops] = values.split(\",\").map(trimSpace).filter(Boolean);\n  if ((stops == null ? void 0 : stops.length) === 0) return value;\n  var direction = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;\n  stops.unshift(direction);\n  var _values = stops.map(stop => {\n    // if stop is valid shorthand direction, return it\n    if (valueSet.has(stop)) return stop;\n    var firstStop = stop.indexOf(\" \"); // color stop could be `red.200 20%` based on css gradient spec\n\n    var [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];\n    var _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(\" \"); // else, get and transform the color token or css value\n\n    var key = \"colors.\" + _color;\n    var color = key in theme.__cssMap ? theme.__cssMap[key].varRef : _color;\n    return _stopOrFunc ? [color, _stopOrFunc].join(\" \") : color;\n  });\n  return _type + \"(\" + _values.join(\", \") + \")\";\n}\nexport var isCSSFunction = value => {\n  return isString(value) && value.includes(\"(\") && value.includes(\")\");\n};\nexport var gradientTransform = (value, theme) => parseGradient(value, theme != null ? theme : {});","map":{"version":3,"sources":["../../../src/utils/parse-gradient.ts"],"names":["isString","directionMap","valueSet","Set","Object","values","globalSet","trimSpace","str","trim","parseGradient","value","theme","has","regex","type","exec","groups","_type","includes","maybeDirection","stops","split","map","filter","Boolean","length","direction","unshift","_values","stop","firstStop","indexOf","_color","_stop","substr","_stopOrFunc","isCSSFunction","key","color","__cssMap","varRef","join","gradientTransform"],"mappings":"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","sourcesContent":["import { Dict, isString } from \"@chakra-ui/utils\"\nimport { Transform } from \"./types\"\n\nconst directionMap = {\n  \"to-t\": \"to top\",\n  \"to-tr\": \"to top right\",\n  \"to-r\": \"to right\",\n  \"to-br\": \"to bottom right\",\n  \"to-b\": \"to bottom\",\n  \"to-bl\": \"to bottom left\",\n  \"to-l\": \"to left\",\n  \"to-tl\": \"to top left\",\n}\n\nconst valueSet = new Set(Object.values(directionMap))\n\nexport const globalSet = new Set([\n  \"none\",\n  \"-moz-initial\",\n  \"inherit\",\n  \"initial\",\n  \"revert\",\n  \"unset\",\n])\n\nconst trimSpace = (str: string) => str.trim()\n\nexport function parseGradient(value: string | null | undefined, theme: Dict) {\n  if (value == null || globalSet.has(value)) return value\n  const regex = /(?<type>^[a-z-A-Z]+)\\((?<values>(.*))\\)/g\n  const { type, values } = regex.exec(value)?.groups ?? {}\n\n  if (!type || !values) return value\n\n  const _type = type.includes(\"-gradient\") ? type : `${type}-gradient`\n  const [maybeDirection, ...stops] = values\n    .split(\",\")\n    .map(trimSpace)\n    .filter(Boolean)\n\n  if (stops?.length === 0) return value\n\n  const direction =\n    maybeDirection in directionMap\n      ? directionMap[maybeDirection]\n      : maybeDirection\n\n  stops.unshift(direction)\n\n  const _values = stops.map((stop) => {\n    // if stop is valid shorthand direction, return it\n    if (valueSet.has(stop)) return stop\n\n    const firstStop = stop.indexOf(\" \")\n\n    // color stop could be `red.200 20%` based on css gradient spec\n    const [_color, _stop] =\n      firstStop !== -1\n        ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)]\n        : [stop]\n\n    const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(\" \")\n\n    // else, get and transform the color token or css value\n    const key = `colors.${_color}`\n    const color = key in theme.__cssMap ? theme.__cssMap[key].varRef : _color\n    return _stopOrFunc ? [color, _stopOrFunc].join(\" \") : color\n  })\n\n  return `${_type}(${_values.join(\", \")})`\n}\n\nexport const isCSSFunction = (value: unknown) => {\n  return isString(value) && value.includes(\"(\") && value.includes(\")\")\n}\n\nexport const gradientTransform: Transform = (value, theme) =>\n  parseGradient(value, theme ?? {})\n"]},"metadata":{},"sourceType":"module"}