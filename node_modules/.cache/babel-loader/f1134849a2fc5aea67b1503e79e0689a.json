{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useBoolean, useCallbackRef, useControllableProp, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, dataAttr, focus, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n */\nexport function useCheckbox(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n      defaultIsChecked,\n      defaultChecked = defaultIsChecked,\n      isChecked: checkedProp,\n      isFocusable,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n      onChange,\n      isIndeterminate,\n      isInvalid,\n      name,\n      value,\n      id,\n      onBlur,\n      onFocus,\n      tabIndex = undefined,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid,\n      \"aria-describedby\": ariaDescribedBy\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isIndeterminate\", \"isInvalid\", \"name\", \"value\", \"id\", \"onBlur\", \"onFocus\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-invalid\", \"aria-describedby\"]);\n  var onChangeProp = useCallbackRef(onChange);\n  var onBlurProp = useCallbackRef(onBlur);\n  var onFocusProp = useCallbackRef(onFocus);\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovered] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var inputRef = useRef(null);\n  var [rootIsLabelElement, setRootIsLabelElement] = useState(true);\n  var [checkedState, setCheckedState] = useState(!!defaultChecked);\n  var [isControlled, isChecked] = useControllableProp(checkedProp, checkedState);\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.checked !== isChecked;\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  var getCheckboxProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    var onPressDown = event => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault();\n      setActive.on();\n    };\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off)\n    });\n  }, [isActive, isChecked, isDisabled, isFocused, isHovered, isIndeterminate, isInvalid, isReadOnly, setActive, setHovered.off, setHovered.on]);\n  var getRootProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, htmlProps, props, {\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          var _inputRef$current;\n          (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.click();\n          focus(inputRef.current, {\n            nextTick: true\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);\n  var getInputProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, props, {\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      tabIndex,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  }, [name, value, id, handleChange, setFocused.off, setFocused.on, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled, tabIndex]);\n  var getLabelProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, props, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [isChecked, isDisabled, isInvalid]);\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getRootProps,\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["useBoolean","useCallbackRef","useControllableProp","useSafeLayoutEffect","mergeRefs","callAllHandlers","dataAttr","focus","warn","visuallyHiddenStyle","useCallback","useRef","useState","useCheckbox","props","defaultIsChecked","defaultChecked","isChecked","checkedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","onBlur","onFocus","tabIndex","undefined","ariaLabel","ariaLabelledBy","ariaInvalid","ariaDescribedBy","htmlProps","onChangeProp","onBlurProp","onFocusProp","isFocused","setFocused","isHovered","setHovered","isActive","setActive","inputRef","rootIsLabelElement","setRootIsLabelElement","checkedState","setCheckedState","isControlled","condition","message","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getRootProps","node","tagName","onClick","click","nextTick","getInputProps","type","required","disabled","readOnly","style","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { callAllHandlers, dataAttr, focus, warn } from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes.\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is blurred (loses focus)\n   */\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is focused\n   */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * Defines the string that labels the checkbox element.\n   */\n  \"aria-label\"?: string\n  /**\n   * Refers to the `id` of the element that labels the checkbox element.\n   */\n  \"aria-labelledby\"?: string\n  \"aria-invalid\"?: true | undefined\n  \"aria-describedby\"?: string\n\n  tabIndex?: number\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    onBlur,\n    onFocus,\n    tabIndex = undefined,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        event.preventDefault()\n        setActive.on()\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n      setActive,\n      setHovered.off,\n      setHovered.on,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          focus(inputRef.current, { nextTick: true })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        tabIndex,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      setFocused.off,\n      setFocused.on,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n      tabIndex,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getRootProps,\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"]},"metadata":{},"sourceType":"module"}