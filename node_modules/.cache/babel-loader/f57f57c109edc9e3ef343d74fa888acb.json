{"ast":null,"code":"import { useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props) {\n  var {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  var [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  var imageRef = useRef();\n  var load = useCallback(() => {\n    if (!src) return;\n    flush();\n    var img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n  var flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined;\n    if (status === \"loading\") {\n      load();\n    }\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n\n  return ignoreFallback ? \"loaded\" : status;\n}","map":{"version":3,"sources":["../../src/use-image.ts"],"names":["useSafeLayoutEffect","useCallback","useEffect","useRef","useState","useImage","props","loading","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","status","setStatus","imageRef","load","flush","img","Image","srcset","onload","event","onerror","error","current","undefined"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,kBAApC;AACA,SAEEC,WAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,QALF,QAMO,OANP;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAwC;EAC7C,IAAM;IACJC,OADI;IAEJC,GAFI;IAGJC,MAHI;IAIJC,MAJI;IAKJC,OALI;IAMJC,WANI;IAOJC,KAPI;IAQJC;EARI,CAAA,GASFR,KATJ;EAWA,IAAM,CAACS,MAAD,EAASC,SAAT,CAAA,GAAsBZ,QAAQ,CAAS,SAAT,CAApC;EAEAF,SAAS,CAAC,MAAM;IACdc,SAAS,CAACR,GAAG,GAAG,SAAH,GAAe,SAAnB,CAATQ;EACD,CAFQ,EAEN,CAACR,GAAD,CAFM,CAATN;EAIA,IAAMe,QAAQ,GAAGd,MAAM,CAAA,CAAvB;EAEA,IAAMe,IAAI,GAAGjB,WAAW,CAAC,MAAM;IAC7B,IAAI,CAACO,GAAL,EAAU;IAEVW,KAAK,CAAA,CAAA;IAEL,IAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAA,CAAZ;IACAD,GAAG,CAACZ,GAAJY,GAAUZ,GAAVY;IACA,IAAIR,WAAJ,EAAiBQ,GAAG,CAACR,WAAJQ,GAAkBR,WAAlBQ;IACjB,IAAIX,MAAJ,EAAYW,GAAG,CAACE,MAAJF,GAAaX,MAAbW;IACZ,IAAIP,KAAJ,EAAWO,GAAG,CAACP,KAAJO,GAAYP,KAAZO;IACX,IAAIb,OAAJ,EAAaa,GAAG,CAACb,OAAJa,GAAcb,OAAda;IAEbA,GAAG,CAACG,MAAJH,GAAcI,KAAD,IAAW;MACtBL,KAAK,CAAA,CAAA;MACLH,SAAS,CAAC,QAAD,CAATA;MACAN,MAAM,IAAA,IAANA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CAAIc,KAAJ,CAANd;IACD,CAJDU;IAKAA,GAAG,CAACK,OAAJL,GAAeM,KAAD,IAAW;MACvBP,KAAK,CAAA,CAAA;MACLH,SAAS,CAAC,QAAD,CAATA;MACAL,OAAO,IAAA,IAAPA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAGe,KAAH,CAAPf;IACD,CAJDS;IAMAH,QAAQ,CAACU,OAATV,GAAmBG,GAAnBH;EACD,CAxBuB,EAwBrB,CAACT,GAAD,EAAMI,WAAN,EAAmBH,MAAnB,EAA2BI,KAA3B,EAAkCH,MAAlC,EAA0CC,OAA1C,EAAmDJ,OAAnD,CAxBqB,CAAxB;EA0BA,IAAMY,KAAK,GAAG,CAAA,KAAM;IAClB,IAAIF,QAAQ,CAACU,OAAb,EAAsB;MACpBV,QAAQ,CAACU,OAATV,CAAiBM,MAAjBN,GAA0B,IAA1BA;MACAA,QAAQ,CAACU,OAATV,CAAiBQ,OAAjBR,GAA2B,IAA3BA;MACAA,QAAQ,CAACU,OAATV,GAAmB,IAAnBA;IACD;EACF,CAND;EAQAjB,mBAAmB,CAAC,MAAM;IACxB;AACJ;AACA;AACA;IACI,IAAIc,cAAJ,EAAoB,OAAOc,SAAP;IAEpB,IAAIb,MAAM,KAAK,SAAf,EAA0B;MACxBG,IAAI,CAAA,CAAA;IACL;IACD,OAAO,MAAM;MACXC,KAAK,CAAA,CAAA;IACN,CAFD;EAGD,CAbkB,EAahB,CAACJ,MAAD,EAASG,IAAT,EAAeJ,cAAf,CAbgB,CAAnBd;EAeA;AACF;AACA;AACA;;EACE,OAAOc,cAAc,GAAG,QAAH,GAAcC,MAAnC;AACD","sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  ImgHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\ntype NativeImageProps = ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.((event as unknown) as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"]},"metadata":{},"sourceType":"module"}