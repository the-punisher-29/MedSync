{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useFormControlContext } from \"@chakra-ui/form-control\";\nimport { useBoolean, useControllableProp, useId } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { ariaAttr, callAllHandlers, dataAttr, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useRadioGroupContext } from \"./radio-group\";\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\n\nexport function useRadio(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n      defaultIsChecked,\n      defaultChecked = defaultIsChecked,\n      isChecked: isCheckedProp,\n      isFocusable,\n      isDisabled: isDisabledProp,\n      isReadOnly: isReadOnlyProp,\n      isRequired: isRequiredProp,\n      onChange,\n      isInvalid: isInvalidProp,\n      name,\n      value,\n      id: idProp,\n      \"data-radiogroup\": dataRadioGroup\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isInvalid\", \"name\", \"value\", \"id\", \"data-radiogroup\"]);\n  var uuid = useId(undefined, \"radio\");\n  var formControl = useFormControlContext();\n  var group = useRadioGroupContext();\n  var isWithinRadioGroup = !!group || !!dataRadioGroup;\n  var isWithinFormControl = !!formControl;\n  var id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;\n  id = idProp != null ? idProp : id;\n  var isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;\n  var isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;\n  var isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;\n  var isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovering] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var ref = useRef(null);\n  var [isCheckedState, setChecked] = useState(Boolean(defaultChecked));\n  var [isControlled, isChecked] = useControllableProp(isCheckedProp, isCheckedState);\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  var getCheckboxProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({}, props, {\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off)\n    });\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, setActive.on, setActive.off, setHovering.on, setHovering.off]);\n  var {\n    onFocus,\n    onBlur\n  } = formControl != null ? formControl : {};\n  var getInputProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    var trulyDisabled = isDisabled && !isFocusable;\n    return _extends({}, props, {\n      id,\n      ref: mergeRefs(forwardedRef, ref),\n      type: \"radio\",\n      name,\n      value,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(onBlur, props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(onFocus, props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      required: isRequired,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-required\": ariaAttr(isRequired),\n      style: visuallyHiddenStyle\n    });\n  }, [isDisabled, isFocusable, id, name, value, handleChange, onBlur, setFocused, onFocus, onKeyDown, onKeyUp, isChecked, isReadOnly, isRequired, isInvalid]);\n  var getLabelProps = function getLabelProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({}, props, {\n      ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n  var getRootProps = function getRootProps(pros, ref) {\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({}, props, {\n      ref,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stop(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"sources":["../../src/use-radio.ts"],"names":["useFormControlContext","useBoolean","useControllableProp","useId","mergeRefs","ariaAttr","callAllHandlers","dataAttr","warn","visuallyHiddenStyle","useCallback","useRef","useState","useRadioGroupContext","useRadio","props","defaultIsChecked","defaultChecked","isChecked","isCheckedProp","isFocusable","isDisabled","isDisabledProp","isReadOnly","isReadOnlyProp","isRequired","isRequiredProp","onChange","isInvalid","isInvalidProp","name","value","id","idProp","dataRadioGroup","htmlProps","uuid","undefined","formControl","group","isWithinRadioGroup","isWithinFormControl","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","isCheckedState","setChecked","Boolean","isControlled","condition","message","handleChange","event","preventDefault","target","checked","onKeyDown","key","on","onKeyUp","off","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onFocus","onBlur","getInputProps","forwardedRef","trulyDisabled","type","disabled","readOnly","required","style","getLabelProps","stop","onTouchStart","getRootProps","pros","state","stopPropagation"],"mappings":"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","sourcesContent":["import { useFormControlContext } from \"@chakra-ui/form-control\"\nimport { useBoolean, useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { ariaAttr, callAllHandlers, dataAttr, warn } from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @deprecated Please use `defaultChecked` which mirrors the default prop\n   * name for radio elements.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * @internal\n   */\n  \"data-radiogroup\"?: any\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    ...htmlProps\n  } = props\n\n  const uuid = useId(undefined, \"radio\")\n\n  const formControl = useFormControlContext()\n  const group = useRadioGroupContext()\n\n  const isWithinRadioGroup = !!group || !!dataRadioGroup\n  const isWithinFormControl = !!formControl\n\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid\n  id = idProp ?? id\n\n  const isDisabled = isDisabledProp ?? formControl?.isDisabled\n  const isReadOnly = isReadOnlyProp ?? formControl?.isReadOnly\n  const isRequired = isRequiredProp ?? formControl?.isRequired\n  const isInvalid = isInvalidProp ?? formControl?.isInvalid\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      setActive.on,\n      setActive.off,\n      setHovering.on,\n      setHovering.off,\n    ],\n  )\n\n  const { onFocus, onBlur } = formControl ?? {}\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const trulyDisabled = isDisabled && !isFocusable\n\n      return {\n        ...props,\n        id,\n        ref: mergeRefs(forwardedRef, ref),\n        type: \"radio\",\n        name,\n        value,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(onBlur, props.onBlur, setFocused.off),\n        onFocus: callAllHandlers(onFocus, props.onFocus, setFocused.on),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        required: isRequired,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        \"aria-disabled\": ariaAttr(trulyDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-required\": ariaAttr(isRequired),\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      isDisabled,\n      isFocusable,\n      id,\n      name,\n      value,\n      handleChange,\n      onBlur,\n      setFocused,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      isChecked,\n      isReadOnly,\n      isRequired,\n      isInvalid,\n    ],\n  )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stop),\n    onTouchStart: callAllHandlers(props.onTouchStart, stop),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  const getRootProps: PropGetter = (pros, ref = null) => ({\n    ...props,\n    ref,\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"]},"metadata":{},"sourceType":"module"}