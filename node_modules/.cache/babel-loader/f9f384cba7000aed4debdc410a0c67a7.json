{"ast":null,"code":"/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\";\nexport function assignRef(ref, value) {\n  if (ref == null) return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    // @ts-ignore\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\" + value + \"' to ref '\" + ref + \"'\");\n  }\n}\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n */\n\nexport function useMergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return node => {\n      refs.forEach(ref => {\n        if (ref) assignRef(ref, node);\n      });\n    };\n  }, refs);\n}","map":{"version":3,"sources":["../../src/use-merge-refs.ts"],"names":["React","assignRef","ref","value","current","error","Error","useMergeRefs","refs","useMemo","every","node","forEach"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA,OAAO,SAASC,SAAT,CAA4BC,GAA5B,EAA0DC,KAA1D,EAAoE;EACzE,IAAID,GAAG,IAAI,IAAX,EAAiB;EAEjB,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;IAC7BA,GAAG,CAACC,KAAD,CAAHD;IACA;EACD;EAED,IAAI;IACF;IACAA,GAAG,CAACE,OAAJF,GAAcC,KAAdD;EACD,CAHD,CAGE,OAAOG,KAAP,EAAc;IACd,MAAM,IAAIC,KAAJ,CAAA,uBAAA,GAAkCH,KAAlC,GAAA,YAAA,GAAoDD,GAApD,GAAA,GAAA,CAAN;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,YAAT,CAAA,EAA+D;EAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAnCC,IAAmC,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;IAAnCA,IAAmC,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA;EAAA;EACpE,OAAO,KAAK,CAACC,OAAN,CAAc,MAAM;IACzB,IAAID,IAAI,CAACE,KAALF,CAAYN,GAAD,IAASA,GAAG,IAAI,IAA3BM,CAAJ,EAAsC;MACpC,OAAO,IAAP;IACD;IACD,OAAQG,IAAD,IAAa;MAClBH,IAAI,CAACI,OAALJ,CAAcN,GAAD,IAAS;QACpB,IAAIA,GAAJ,EAASD,SAAS,CAACC,GAAD,EAAMS,IAAN,CAATV;MACV,CAFDO,CAAAA;IAGD,CAJD;EAKD,CATM,EASJA,IATI,CAAP;AAUD","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n */\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return React.useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null\n    }\n    return (node: T) => {\n      refs.forEach((ref) => {\n        if (ref) assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n"]},"metadata":{},"sourceType":"module"}